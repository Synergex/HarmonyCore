;;*****************************************************************************
;;
;; Title:       strtestsTestResponses.dbl
;;
;; Description: Generates test responses for all OUT and INOUT parameters
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

namespace TraditionalBridge.Methods

    public class strtestsTestResponses

        public static method TestID66, void
            required inout SINGLEIMPLIEDDECIMAL, SINGLEIMPLIEDDECIMAL
        proc
            SINGLEIMPLIEDDECIMAL = {"Id6p6": 0.0}
        endmethod

        public static method TestStrID66, void
            required inout IMPLIEDDECIMALTEST, IMPLIEDDECIMALTEST
        proc
            IMPLIEDDECIMALTEST = {"Name": "", "Id6p6": 0.0, "Desc": ""}
        endmethod

        public static method arrayswitharrays, void
            required out SALESMAN, SALESMAN
        proc
            SALESMAN = {"SalesmansCode": "", "SalesmansDepart": 0, "SalesmansInit": "", "SalesmansSurname": "", "ServiceReceptionist": "", "SalesmansLaserQue": "", "SmTargetPerUnitNew": 0.0, "SmTargetPerUnitUsed": 0.0, "SmTargetType": "", "SmTargetUnitsNew": 0, "SmTargetUnitsUsed": 0, "SmTargetPenetPercNew": 0.0, "SmTargetPenetPercUsed": 0.0, "SmCommCalcFrom": 0, "SmCommCalcTo": 0, "SmRate": 0, "SmAugmentation": 0, "SmCommEarned": 0, "SmRateEarned": 0, "SmUnitsFin": 0, "SmCommissionType": "", "SmUsedDocFee": "", "SmPayrollNumber": "", "SmDocFeePerc": "", "SmCommPassword": "", "SmAccrualAccount": "", "SmProfitEarned": 0, "SmPension": "", "SmSoldNew": 0, "SmSoldUsed": 0, "SmAccrualAmount": 0, "SmAccrualNic": 0, "SmAccrualPen": 0, "SmDocFeePaid": 0, "SmAugmentationPaid": 0, "SmDefaultSaleType": "", "SmPensionPer": "", "SmDiaryTargets": 0, "NotUsed": ""}
        endmethod

        public static method manage_funds, i4
            required inout MANAGE_FUNDS, MANAGE_FUNDS
        proc
            MANAGE_FUNDS = {"Cust": "", "Dptcde": "", "Fndstr": "", "Action": "", "Fndarr": ""}
            mreturn 0
        endmethod

        public static method paramdiff, void
            required inout p1, DBAUTHOR
        proc
            p1 = {"Authorid": "", "LastName": "", "FirstName": ""}
        endmethod

        public static method getNumRecords, void
            required out num, i4
        proc
            num = 9
        endmethod

        public static method getStructArray, void
            required out PERFSTRUCT, [*]PERFSTRUCT
        proc
            PERFSTRUCT = {"Alpha20": "", "Dec5": 0, "Dec15": 0, "Idec31": 0.0, "Idec144": 0.0, "I1": 0, "I2": 0, "I4": 0, "I8": 0}
        endmethod

        public static method inoutStructArray, void
            required inout PERFSTRUCT, [*]PERFSTRUCT
            required inout Count, i4
        proc
            PERFSTRUCT = {"Alpha20": "", "Dec5": 0, "Dec15": 0, "Idec31": 0.0, "Idec144": 0.0, "I1": 0, "I2": 0, "I4": 0, "I8": 0}
            Count = 9
        endmethod

        public static method outStructArray, void
            required out PERFSTRUCT, [*]PERFSTRUCT
            required out Count, i4
        proc
            PERFSTRUCT = {"Alpha20": "", "Dec5": 0, "Dec15": 0, "Idec31": 0.0, "Idec144": 0.0, "I1": 0, "I2": 0, "I4": 0, "I8": 0}
            Count = 9
        endmethod

        public static method syninsurance, i4
            optional out TR_SYNINS_RET, [*]TR_SYNINS_RET
            required inout elementcount, i4
        proc
            if (^passed(TR_SYNINS_RET))
                TR_SYNINS_RET = {"StatusCode": "", "Supplier": "", "SupplierName": "", "Endorsement": "", "EndorsementName": "", "InsuranceType": "", "InsuranceDescription": "", "InsDuration": 0, "InsValues": ""}
            elementcount = 9
            mreturn 0
        endmethod

        public static method testrefcount, void
            required inout REFCOUNT, REFCOUNT
        proc
            REFCOUNT = {"F1": ""}
        endmethod

        public static method teststr1, void
            required inout STRTEST1, STRTEST1
        proc
            STRTEST1 = {"Str1De6": 0, "Str1Al10": "", "Str1Id62": 0.0, "Str1In4": 0, "Str1Al20": ""}
        endmethod

        public static method teststr10, void
            required inout strtest4, STRTEST4
            required inout STRTEST3, [*]STRTEST3
        proc
            strtest4 = {"Str4Lv1fld1": 0, "Str4Lv1fld2": "", "Str4Grp1": "", "Str4Lv1fld3": ""}
            STRTEST3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
        endmethod

        public static method teststr11, void
            required inout STRTEST3, [*]STRTEST3
            required inout STRTEST4, STRTEST4
        proc
            STRTEST3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
            STRTEST4 = {"Str4Lv1fld1": 0, "Str4Lv1fld2": "", "Str4Grp1": "", "Str4Lv1fld3": ""}
        endmethod

        public static method teststr12, void
            required inout strtest12, STRTEST12
        proc
            strtest12 = {"Str12Al10": "", "Str12Strary": "", "Str12De7": 0}
        endmethod

        public static method teststr13, void
            required inout strtest12, [*]STRTEST12
        proc
            strtest12 = {"Str12Al10": "", "Str12Strary": "", "Str12De7": 0}
        endmethod

        public static method teststr14, void
            required inout strtest14, STRTEST14
        proc
            strtest14 = {"Reckey": "", "ProdName": "", "Cost": 0.0, "LocGrp": "", "Comment": ""}
        endmethod

        public static method teststr16, void
            required inout STRTEST16, STRTEST16
        proc
            STRTEST16 = {"Decary": 0, "Alpary": "", "Impary": 0.0, "Intary": 0}
        endmethod

        public static method teststr18, void
            required inout strtest18, STRTEST18
        proc
            strtest18 = {"Str18Al10": "", "Str18Str1": "", "Str18De7": 0}
        endmethod

        public static method teststr19, void
            required inout strtest19, STRTEST19
        proc
            strtest19 = {"Str19Al10": "", "Str19Grp1": "", "Str19Grp2": ""}
        endmethod

        public static method teststr2, void
            required inout strtest2, STRTEST2
        proc
            strtest2 = {"Str2De10": 0, "Str2Arde5": 0, "Str2Al20": "", "Str2Date8": 0, "Str2Time6": 0, "Str2Id83": 0.0, "Str2In4": 0}
        endmethod

        public static method teststr20, d7
            required inout strtest19, STRTEST19
        proc
            strtest19 = {"Str19Al10": "", "Str19Grp1": "", "Str19Grp2": ""}
            mreturn 9
        endmethod

        public static method teststr5a, void
            required inout strtest3, STRTEST3
        proc
            strtest3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
        endmethod

        public static method teststr5b, void
            required inout strtest1, STRTEST1
        proc
            strtest1 = {"Str1De6": 0, "Str1Al10": "", "Str1Id62": 0.0, "Str1In4": 0, "Str1Al20": ""}
        endmethod

        public static method teststr23, a7
            required inout strtest23, STRTEST23
        proc
            strtest23 = {"Strgp1": "", "Str23Id5": 0.0, "Strgp2": "", "Str23Al20": ""}
            mreturn "Z"
        endmethod

        public static method teststr24, d5.2
            required inout strtest24, STRTEST24
        proc
            strtest24 = {"Strgp1": "", "Str23Id5": 0.0, "Strgp2": "", "Str23Al20": ""}
            mreturn 6.6
        endmethod

        public static method teststr25, void
            required inout STRTEST25, STRTEST25
        proc
            STRTEST25 = {"Str25Al10": "", "Str25Grp1": "", "Str25De10": 0}
        endmethod

        public static method teststr27, void
            required inout STRTEST27, STRTEST27
        proc
            STRTEST27 = {"Str27I8": 0}
        endmethod

        public static method teststr29, d5
            required inout DBORDER, DBORDER
        proc
            DBORDER = {"Orderno": 0, "CustName": "", "Adresses": ""}
            mreturn 9
        endmethod

        public static method teststr3, void
            required inout strtest3, STRTEST3
        proc
            strtest3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
        endmethod

        public static method teststr30, void
            required inout STRTEST30, [*]STRTEST30
        proc
            STRTEST30 = {"Name": "", "Address": ""}
        endmethod

        public static method teststr31, void
            required inout STRTEST31, [*]STRTEST31
        proc
            STRTEST31 = {"Str31F1": 0, "Str31F2": 0, "Str31Grp": ""}
        endmethod

        public static method teststr32, void
            required inout DATASET, DATASET
        proc
            DATASET = {"Dkey": 0, "Idkey": 0.0, "Akey": "", "D1": 0, "D2": 0, "D3": 0, "D4": 0, "D5": 0, "D6": 0, "D7": 0, "D8": 0, "D9": 0, "D10": 0, "D11": 0, "D12": 0, "D13": 0, "D14": 0, "D15": 0, "D16": 0, "D17": 0, "Id21": 0.0, "Id32": 0.0, "Id42": 0.0, "Id52": 0.0, "Id82": 0.0, "Id84": 0.0, "Id104": 0.0, "Id124": 0.0, "Id186": 0.0, "Id206": 0.0, "Id237": 0.0, "Id268": 0.0, "I1": 0, "I2": 0, "I4": 0, "I8": 0, "Yymmdd": "", "Yyyymmdd": "", "Yyjjj": "", "Yyyyjjj": "", "Yypp": 0, "Yyyypp": 0, "Mmddyy": "", "Mmddyyyy": "", "Ddmmyy": "", "Ddmmyyyy": "", "Jjjjjj": "", "Jjjyy": "", "Jjjyyyy": "", "Ppyy": "", "Ppyyyy": "", "Monddyy": "", "Monddyyyy": "", "Ddmonyy": "", "Ddmonyyyy": "", "Yymondd": "", "Yyyymondd": "", "Hhmmss": "", "Hhmm": "", "Binary10": "", "Binary20": "", "Binary40": "", "Packed6": 0, "Packed8": 0, "A1": "", "A10": "", "A100": "", "A255": "", "A512": ""}
        endmethod

        public static method teststr4, void
            required inout strtest4, STRTEST4
        proc
            strtest4 = {"Str4Lv1fld1": 0, "Str4Lv1fld2": "", "Str4Grp1": "", "Str4Lv1fld3": ""}
        endmethod

        public static method teststr5, void
            required inout strtest1, STRTEST1
            required inout strtest3, STRTEST3
        proc
            strtest1 = {"Str1De6": 0, "Str1Al10": "", "Str1Id62": 0.0, "Str1In4": 0, "Str1Al20": ""}
            strtest3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
        endmethod

        public static method teststr6, void
            required inout p1, a6
            required inout strtest1, STRTEST1
            required inout p3, d5
            required inout strtest3, STRTEST3
            required inout p5, d5
        proc
            p1 = "Z"
            strtest1 = {"Str1De6": 0, "Str1Al10": "", "Str1Id62": 0.0, "Str1In4": 0, "Str1Al20": ""}
            p3 = 9
            strtest3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
            p5 = 9
        endmethod

        public static method teststr7, void
            required inout strtest7, [*]STRTEST7
        proc
            strtest7 = {"Str7Al6": "", "Str7De4": 0}
        endmethod

        public static method teststr8, void
            required inout strtest3, [*]STRTEST3
        proc
            strtest3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
        endmethod

        public static method teststr9, void
            required inout p1de7, d7
            required inout strtest3, [*]STRTEST3
            required inout p3al10, a10
        proc
            p1de7 = 9
            strtest3 = {"Str3Al10": "", "StrGrp1": "", "Str3De7": 0, "Str3Al25": ""}
            p3al10 = "Z"
        endmethod

    endclass

endnamespace

;
; Sample code to call these test methods
;
;    strtestsTestResponses.TestID66(SINGLEIMPLIEDDECIMAL)
;    xreturn
;    strtestsTestResponses.TestStrID66(IMPLIEDDECIMALTEST)
;    xreturn
;    strtestsTestResponses.arrayswitharrays(SALESMAN)
;    xreturn
;    freturn strtestsTestResponses.manage_funds(MANAGE_FUNDS)
;    strtestsTestResponses.paramdiff(p1)
;    xreturn
;    strtestsTestResponses.getNumRecords(num)
;    xreturn
;    strtestsTestResponses.getStructArray(PERFSTRUCT)
;    xreturn
;    strtestsTestResponses.inoutStructArray(PERFSTRUCT,Count)
;    xreturn
;    strtestsTestResponses.outStructArray(PERFSTRUCT,Count)
;    xreturn
;    freturn strtestsTestResponses.syninsurance(TR_SYNINS_RET,elementcount)
;    strtestsTestResponses.testrefcount(REFCOUNT)
;    xreturn
;    strtestsTestResponses.teststr1(STRTEST1)
;    xreturn
;    strtestsTestResponses.teststr10(strtest4,STRTEST3)
;    xreturn
;    strtestsTestResponses.teststr11(STRTEST3,STRTEST4)
;    xreturn
;    strtestsTestResponses.teststr12(strtest12)
;    xreturn
;    strtestsTestResponses.teststr13(strtest12)
;    xreturn
;    strtestsTestResponses.teststr14(strtest14)
;    xreturn
;    strtestsTestResponses.teststr16(STRTEST16)
;    xreturn
;    strtestsTestResponses.teststr18(strtest18)
;    xreturn
;    strtestsTestResponses.teststr19(strtest19)
;    xreturn
;    strtestsTestResponses.teststr2(strtest2)
;    xreturn
;    freturn strtestsTestResponses.teststr20(strtest19)
;    strtestsTestResponses.teststr5a(strtest3)
;    xreturn
;    strtestsTestResponses.teststr5b(strtest1)
;    xreturn
;    freturn strtestsTestResponses.teststr23(strtest23)
;    freturn strtestsTestResponses.teststr24(strtest24)
;    strtestsTestResponses.teststr25(STRTEST25)
;    xreturn
;    strtestsTestResponses.teststr27(STRTEST27)
;    xreturn
;    freturn strtestsTestResponses.teststr29(DBORDER)
;    strtestsTestResponses.teststr3(strtest3)
;    xreturn
;    strtestsTestResponses.teststr30(STRTEST30)
;    xreturn
;    strtestsTestResponses.teststr31(STRTEST31)
;    xreturn
;    strtestsTestResponses.teststr32(DATASET)
;    xreturn
;    strtestsTestResponses.teststr4(strtest4)
;    xreturn
;    strtestsTestResponses.teststr5(strtest1,strtest3)
;    xreturn
;    strtestsTestResponses.teststr6(p1,strtest1,p3,strtest3,p5)
;    xreturn
;    strtestsTestResponses.teststr7(strtest7)
;    xreturn
;    strtestsTestResponses.teststr8(strtest3)
;    xreturn
;    strtestsTestResponses.teststr9(p1de7,strtest3,p3al10)
;    xreturn
