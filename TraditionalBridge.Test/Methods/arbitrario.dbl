
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.Methods

    public class arbitrario
        public method MethodWithParameters, int
            required in intValue, int
            required in stringValue, @string
            required in stringArray, [#]@string
            required out intArrayList, @ArrayList
            required inout stringArrayList, @ArrayList
            endparams
            record
                stringElement, @string
        proc
            ;;test that we can recover from total runtime failure
            if(stringValue == "STOP NOW!!!")
                STOP

            Logger.Instance.Log("intValue was " + %string(intValue))
            if(intValue == -1)
                throw new Exception("intValue cannot be -1")

            intArrayList = new ArrayList()
            intArrayList.Add((@int)intValue)

            foreach stringElement in stringArray
                stringArrayList.Add(stringElement)

            mreturn stringArrayList.Count + intValue
        endmethod

        public method MethodWithStructures, int
            required inout customerArray, [#]@Customer
            required inout customerArrayList, @ArrayList
            required inout customer1, @Customer
            required in customer2, TraditionalBridge.Test.Models.strCustomer
            required in customerSynergyArray, [*]TraditionalBridge.Test.Models.strCustomer
            required in customerStrSynergyArray, [#]TraditionalBridge.Test.Models.strCustomer
            required in customerStrArrayList, @ArrayList
            endparams
            record
                tempCustomer, @Customer
                tempStrCustomer, TraditionalBridge.Test.Models.strCustomer
                i, int
        proc
            if(^argdim(%argnum(customerSynergyArray), 1) != customerStrSynergyArray.Length)
                throw new Exception("real and dynamic array sizes differed " + %string(^argdim(%argnum(customerSynergyArray), 1)) + " and " + %string(customerStrSynergyArray.Length))

            if(customerStrArrayList.Count != customerArrayList.Count)
                throw new Exception("array list lengths differed " + %string(customerStrArrayList.Count) + " and " + %string(customerArrayList.Count))


            for i from 1 thru customerArrayList.Count by 1
            begin
                tempStrCustomer = (TraditionalBridge.Test.Models.strCustomer)customerStrArrayList[i - 1]
                tempCustomer = (@Customer)customerArrayList[i - 1]
                if(tempCustomer.Name != tempStrCustomer.name)
                    throw new Exception("Object array list and structure array list failed to match")
            end
            
            for i from 1 thru customerArray.Length by 1
            begin
                if(customerArray[i].Name != customerSynergyArray[i].name || customerArray[i].Name != customerStrSynergyArray[i].name)
                    throw new Exception("Object array and structure array failed to match " + %atrim(customerArray[i].Name) + ", " + %atrim(customerSynergyArray[i].name) + ", " + %atrim(customerStrSynergyArray[i].name))
            end

            for i from 1 thru customerArrayList.Count by 1
            begin
                tempCustomer = (@Customer)customerArrayList[i - 1]
                customerArrayList[i - 1] = customerArray[i]
                customerArrayList[i - 1] = tempCustomer
            end

            customer1 = new Customer(customer2)

            mreturn customerArrayList.Count
        endmethod

    endclass

endnamespace

subroutine arbitrary_optional
    required in arg1, i
    optional in arg2, a
    optional out arg3, a
    optional inout arg4, d
proc
    if(^passed(arg2) && ^passed(arg3))
        arg3 = arg2

    if(^passed(arg4))
        arg4 = arg1 * arg4
    
    xreturn
endsubroutine

