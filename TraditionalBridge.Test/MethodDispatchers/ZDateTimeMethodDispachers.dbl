;;*****************************************************************************
;;
;; Title:       ZDateTimeMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

.ifdef DBLV11
import System.Text.Json
.define JSON_ELEMENT @JsonElement
.else
.define JSON_ELEMENT @JsonValue
.endc

namespace TraditionalBridge.Test.ZDateTime


    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method ZDateTime.DateTime20
    ;;; </summary>
    public class DateTime20_Dispatcher extends RoutineStub


        public method DateTime20_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED IN Dt20In D20 YYYYMMDD date)
                arg1,               d20
                ;;Argument 2 (REQUIRED OUT Dt20Out D20 YYYYMMDD date)
                arg2,               d20
                ;;Argument 3 (REQUIRED INOUT Dt20InOut D20 YYYYMMDD date)
                arg3,               d20
                returnValue,         D20
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED IN Dt20In D20 YYYYMMDD date)
            arg1 = dispatcher.GetDecimal(arguments[1])

            ;;Argument 3 (REQUIRED INOUT Dt20InOut D20 YYYYMMDD date)
            arg3 = dispatcher.GetDecimal(arguments[3])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            returnValue = %DateTime20(arg1,arg2,arg3)

            ;;Function return value
            serializer.ArgumentData(0,returnValue,FieldDataType.DecimalField,20,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (REQUIRED OUT Dt20Out D20 YYYYMMDD date)
            
            serializer.ArgumentData(2,arg2,FieldDataType.DecimalField,20,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 3 (REQUIRED INOUT Dt20InOut D20 YYYYMMDD date)
            
            serializer.ArgumentData(3,arg3,FieldDataType.DecimalField,20,0,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method ZDateTime.DateTimeOther
    ;;; </summary>
    public class DateTimeOther_Dispatcher extends RoutineStub


        public method DateTimeOther_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT dt8 D8 YYYYMMDD date)
                arg1,               d8
                ;;Argument 2 (REQUIRED INOUT dt6 D6 YYMMDD date)
                arg2,               d6
                ;;Argument 3 (REQUIRED INOUT dt14 D14 YYYYMMDD date)
                arg3,               d14
                returnValue,         D8
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT dt8 D8 YYYYMMDD date)
            arg1 = dispatcher.GetDecimal(arguments[1])

            ;;Argument 2 (REQUIRED INOUT dt6 D6 YYMMDD date)
            arg2 = dispatcher.GetDecimal(arguments[2])

            ;;Argument 3 (REQUIRED INOUT dt14 D14 YYYYMMDD date)
            arg3 = dispatcher.GetDecimal(arguments[3])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            returnValue = %DateTimeOther(arg1,arg2,arg3)

            ;;Function return value
            serializer.ArgumentData(0,returnValue,FieldDataType.DecimalField,8,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT dt8 D8 YYYYMMDD date)
            
            serializer.ArgumentData(1,arg1,FieldDataType.DecimalField,8,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (REQUIRED INOUT dt6 D6 YYMMDD date)
            
            serializer.ArgumentData(2,arg2,FieldDataType.DecimalField,6,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 3 (REQUIRED INOUT dt14 D14 YYYYMMDD date)
            
            serializer.ArgumentData(3,arg3,FieldDataType.DecimalField,14,0,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method ZDateTime.DateTimeS
    ;;; </summary>
    public class DateTimeS_Dispatcher extends RoutineStub

        private mDatetimestrMetadata, @DataObjectMetadataBase

        public method DateTimeS_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mDatetimestrMetadata = DataObjectMetadataBase.LookupType("Datetimestr")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT DATETIMESTR [*]structure @Datetimestr)
                arg1Array,          JSON_ELEMENT
                arg1Handle,         D_HANDLE
                arg1HandlePos,      int
            endrecord

            ;;Temp structure tempstr1
            structure tempstr1
                arry, @Datetimestr
            endstructure


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT DATETIMESTR [*]structure @Datetimestr)
            argumentDefinition = dispatcher.GetArgumentDataDefForCollection(arguments[1],34)
            arg1Array = arguments[1].GetProperty("PassedValue")
            arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.GetArrayLength())
            arg1HandlePos = 1
            dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall DateTimex(^m(strDatetimestr,arg1Handle))

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT DATETIMESTR [*]structure @Datetimestr)
            
            serializer.ArgumentHandleData(1,arg1Handle,FieldDataType.DataObjectCollectionField,34,"DATETIMESTR",%mem_proc(DM_GETSIZE,arg1Handle)/34,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method ZDateTime.DteTmeAry
    ;;; </summary>
    public class DteTmeAry_Dispatcher extends RoutineStub

        private mDatetimearyMetadata, @DataObjectMetadataBase

        public method DteTmeAry_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mDatetimearyMetadata = DataObjectMetadataBase.LookupType("Datetimeary")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT DATETIMEARY structure @Datetimeary)
                arg1DataObject,     @DataObjectBase
                arg1,               strDatetimeary
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT DATETIMEARY structure @Datetimeary)
            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mDatetimearyMetadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall DteTmeAry(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT DATETIMEARY structure @Datetimeary)
            
            ;;Argument 1: Single Datetimeary record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,108,"DATETIMEARY",false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method ZDateTime.Userdates
    ;;; </summary>
    public class Userdates_Dispatcher extends RoutineStub

        private mUserdateMetadata, @DataObjectMetadataBase

        public method Userdates_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mUserdateMetadata = DataObjectMetadataBase.LookupType("Userdate")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED OUT USERDATES structure @Userdate)
                arg1DataObject,     @DataObjectBase
                arg1,               strUserdate
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            ;;There are no inbound arguments to process

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall Userdates(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED OUT USERDATES structure @Userdate)
            
            ;;Argument 1: Single Userdate record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,40,"USERDATES",false)
        endmethod

    endclass

endnamespace