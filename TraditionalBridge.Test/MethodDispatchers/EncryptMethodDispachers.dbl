;;*****************************************************************************
;;
;; Title:       EncryptMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

.ifdef DBLV11
import System.Text.Json
.define JSON_ELEMENT @JsonElement
.else
.define JSON_ELEMENT @JsonValue
.endc

namespace TraditionalBridge.Test.Encrypt


    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst1
    ;;; </summary>
    public class encrypt_tst1_Dispatcher extends RoutineStub


        public method encrypt_tst1_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (OPTIONAL IN p1 A50)
                arg1,               A50
                ;;Argument 2 (OPTIONAL IN p2 D5)
                arg2,               D5
                ;;Argument 3 (OPTIONAL IN p3 D10.3)
                arg3,               D10.3
                ;;Argument 4 (OPTIONAL IN p4 I4)
                arg4,               I4
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (OPTIONAL IN p1 A50)

            arg1 = dispatcher.GetText(arguments[1])

            ;;Argument 2 (OPTIONAL IN p2 D5)

            arg2 = dispatcher.GetDecimal(arguments[2])

            ;;Argument 3 (OPTIONAL IN p3 D10.3)

            arg3 = dispatcher.GetImplied(arguments[3])

            ;;Argument 4 (OPTIONAL IN p4 I4)

            arg4 = dispatcher.GetInt(arguments[4])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall function_one(arg1,arg2,arg3,arg4)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst10
    ;;; </summary>
    public class encrypt_tst10_Dispatcher extends RoutineStub

        private mStrtest3Metadata, @DataObjectMetadataBase

        public method encrypt_tst10_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT strtest3 structure @Strtest3)
                arg1DataObject,     @DataObjectBase
                arg1,               strStrtest3
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT strtest3 structure @Strtest3)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest3Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr3(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT strtest3 structure @Strtest3)
            
            ;;Argument 1: Single Strtest3 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,58,"STRTEST3",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst11
    ;;; </summary>
    public class encrypt_tst11_Dispatcher extends RoutineStub

        private mStrtest4Metadata, @DataObjectMetadataBase

        public method encrypt_tst11_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest4Metadata = DataObjectMetadataBase.LookupType("Strtest4")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT strtest4 structure @Strtest4)
                arg1DataObject,     @DataObjectBase
                arg1,               strStrtest4
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT strtest4 structure @Strtest4)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest4Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr4(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT strtest4 structure @Strtest4)
            
            ;;Argument 1: Single Strtest4 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,84,"STRTEST4",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst12
    ;;; </summary>
    public class encrypt_tst12_Dispatcher extends RoutineStub

        private mStrtest1Metadata, @DataObjectMetadataBase
        private mStrtest3Metadata, @DataObjectMetadataBase

        public method encrypt_tst12_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest1Metadata = DataObjectMetadataBase.LookupType("Strtest1")
            mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT strtest1 structure @Strtest1)
                arg1DataObject,     @DataObjectBase
                arg1,               strStrtest1
                ;;Argument 2 (REQUIRED INOUT strtest3 structure @Strtest3)
                arg2DataObject,     @DataObjectBase
                arg2,               strStrtest3
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT strtest1 structure @Strtest1)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest1Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;Argument 2 (REQUIRED INOUT strtest3 structure @Strtest3)

            ;;Structure argument. Get the data object then get the record from it
            arg2DataObject = dispatcher.DeserializeObject(arguments[2],mStrtest3Metadata)
            arg2 = arg2DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr5(arg1,arg2)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT strtest1 structure @Strtest1)
            
            ;;Argument 1: Single Strtest1 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,46,"STRTEST1",true)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (REQUIRED INOUT strtest3 structure @Strtest3)
            
            ;;Argument 2: Single Strtest3 record
            serializer.ArgumentData(2,arg2,FieldDataType.DataObjectField,58,"STRTEST3",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst2
    ;;; </summary>
    public class encrypt_tst2_Dispatcher extends RoutineStub


        public method encrypt_tst2_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (OPTIONAL INOUT p1 D12.2)
                arg1,               D12.2
                ;;Argument 2 (OPTIONAL INOUT p2 D10.5)
                arg2,               D10.5
                ;;Argument 3 (OPTIONAL IN p3 D10.5)
                arg3,               D10.5
                ;;Argument 4 (OPTIONAL IN p4 D10.2)
                arg4,               D10.2
                ;;Argument 5 (OPTIONAL IN p5 D10)
                arg5,               D10
                ;;Argument 6 (OPTIONAL INOUT p6 D7.7)
                arg6,               D8.7
                ;;Argument 7 (OPTIONAL IN p7 D5.4)
                arg7,               D5.4
                ;;Argument 8 (OPTIONAL INOUT p8 D8)
                arg8,               D8
                ;;Argument 9 (OPTIONAL INOUT p9 D7.1)
                arg9,               D7.1
                ;;Argument 10 (OPTIONAL IN p10 D9)
                arg10,               D9
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (OPTIONAL INOUT p1 D12.2)

            arg1 = dispatcher.GetImplied(arguments[1])

            ;;Argument 2 (OPTIONAL INOUT p2 D10.5)

            arg2 = dispatcher.GetImplied(arguments[2])

            ;;Argument 3 (OPTIONAL IN p3 D10.5)

            arg3 = dispatcher.GetImplied(arguments[3])

            ;;Argument 4 (OPTIONAL IN p4 D10.2)

            arg4 = dispatcher.GetImplied(arguments[4])

            ;;Argument 5 (OPTIONAL IN p5 D10)

            arg5 = dispatcher.GetDecimal(arguments[5])

            ;;Argument 6 (OPTIONAL INOUT p6 D7.7)

            arg6 = dispatcher.GetImplied(arguments[6])

            ;;Argument 7 (OPTIONAL IN p7 D5.4)

            arg7 = dispatcher.GetImplied(arguments[7])

            ;;Argument 8 (OPTIONAL INOUT p8 D8)

            arg8 = dispatcher.GetDecimal(arguments[8])

            ;;Argument 9 (OPTIONAL INOUT p9 D7.1)

            arg9 = dispatcher.GetImplied(arguments[9])

            ;;Argument 10 (OPTIONAL IN p10 D9)

            arg10 = dispatcher.GetDecimal(arguments[10])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall function_two(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (OPTIONAL INOUT p1 D12.2)
            
            serializer.ArgumentData(1,arg1,FieldDataType.ImpliedDecimalField,12,2,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (OPTIONAL INOUT p2 D10.5)
            
            serializer.ArgumentData(2,arg2,FieldDataType.ImpliedDecimalField,10,5,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 6 (OPTIONAL INOUT p6 D7.7)
            
            serializer.ArgumentData(6,arg6,FieldDataType.ImpliedDecimalField,7,7,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 8 (OPTIONAL INOUT p8 D8)
            
            serializer.ArgumentData(8,arg8,FieldDataType.DecimalField,8,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 9 (OPTIONAL INOUT p9 D7.1)
            
            serializer.ArgumentData(9,arg9,FieldDataType.ImpliedDecimalField,7,1,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst3
    ;;; </summary>
    public class encrypt_tst3_Dispatcher extends RoutineStub


        public method encrypt_tst3_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (OPTIONAL INOUT p1 A30)
                arg1,               A30
                ;;Argument 2 (OPTIONAL INOUT p2 A30)
                arg2,               A30
                ;;Argument 3 (OPTIONAL INOUT p3 A10)
                arg3,               A10
                ;;Argument 4 (OPTIONAL INOUT p4 A50)
                arg4,               A50
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (OPTIONAL INOUT p1 A30)

            arg1 = dispatcher.GetText(arguments[1])

            ;;Argument 2 (OPTIONAL INOUT p2 A30)

            arg2 = dispatcher.GetText(arguments[2])

            ;;Argument 3 (OPTIONAL INOUT p3 A10)

            arg3 = dispatcher.GetText(arguments[3])

            ;;Argument 4 (OPTIONAL INOUT p4 A50)

            arg4 = dispatcher.GetText(arguments[4])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall function_four(arg1,arg2,arg3,arg4)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (OPTIONAL INOUT p1 A30)
            
            serializer.ArgumentData(1,%atrim(arg1),FieldDataType.AlphaField,30,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (OPTIONAL INOUT p2 A30)
            
            serializer.ArgumentData(2,%atrim(arg2),FieldDataType.AlphaField,30,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 3 (OPTIONAL INOUT p3 A10)
            
            serializer.ArgumentData(3,%atrim(arg3),FieldDataType.AlphaField,10,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 4 (OPTIONAL INOUT p4 A50)
            
            serializer.ArgumentData(4,%atrim(arg4),FieldDataType.AlphaField,50,0,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst4
    ;;; </summary>
    public class encrypt_tst4_Dispatcher extends RoutineStub


        public method encrypt_tst4_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (OPTIONAL INOUT p1 A5)
                arg1,               A5
                ;;Argument 2 (OPTIONAL INOUT p2 I4)
                arg2,               I4
                ;;Argument 3 (OPTIONAL INOUT p3 D6)
                arg3,               D6
                ;;Argument 4 (OPTIONAL IN p4 A5)
                arg4,               A5
                ;;Argument 5 (OPTIONAL INOUT p5 D6.3)
                arg5,               D6.3
                ;;Argument 6 (OPTIONAL INOUT p6 [*]D5)
                arg6Array,          JSON_ELEMENT
                arg6Handle,         D_HANDLE
                arg6HandlePos,      int
                ;;Argument 7 (OPTIONAL INOUT p7 [*]A20)
                arg7Array,          JSON_ELEMENT
                arg7Handle,         D_HANDLE
                arg7HandlePos,      int
                ;;Argument 8 (OPTIONAL INOUT p8 [*]D10.3)
                arg8Array,          JSON_ELEMENT
                arg8Handle,         D_HANDLE
                arg8HandlePos,      int
                ;;Argument 9 (OPTIONAL INOUT p9 [*]I4)
                arg9Array,          JSON_ELEMENT
                arg9Handle,         D_HANDLE
                arg9HandlePos,      int
            endrecord

            ;;Temp structure tempstr6
            structure tempstr6
                arry, D5
            endstructure

            ;;Temp structure tempstr7
            structure tempstr7
                arry, A20
            endstructure

            ;;Temp structure tempstr8
            structure tempstr8
                arry, D10.3
            endstructure

            ;;Temp structure tempstr9
            structure tempstr9
                arry, I4
            endstructure


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (OPTIONAL INOUT p1 A5)

            arg1 = dispatcher.GetText(arguments[1])

            ;;Argument 2 (OPTIONAL INOUT p2 I4)

            arg2 = dispatcher.GetInt(arguments[2])

            ;;Argument 3 (OPTIONAL INOUT p3 D6)

            arg3 = dispatcher.GetDecimal(arguments[3])

            ;;Argument 4 (OPTIONAL IN p4 A5)

            arg4 = dispatcher.GetText(arguments[4])

            ;;Argument 5 (OPTIONAL INOUT p5 D6.3)

            arg5 = dispatcher.GetImplied(arguments[5])

            ;;Argument 6 (OPTIONAL INOUT p6 [*]D5)

            argumentDefinition = dispatcher.GetArgumentDataDefForCollection(arguments[6],5)
            arg6Array = arguments[6].GetProperty("PassedValue")
            arg6Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg6Array.GetArrayLength())
            arg6HandlePos = 1
            dispatcher.UnwrapObjectCollection(^m(arg6Handle),argumentDefinition,arg6HandlePos,arg6Array)

            ;;Argument 7 (OPTIONAL INOUT p7 [*]A20)

            argumentDefinition = dispatcher.GetArgumentDataDefForCollection(arguments[7],20)
            arg7Array = arguments[7].GetProperty("PassedValue")
            arg7Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg7Array.GetArrayLength())
            arg7HandlePos = 1
            dispatcher.UnwrapObjectCollection(^m(arg7Handle),argumentDefinition,arg7HandlePos,arg7Array)

            ;;Argument 8 (OPTIONAL INOUT p8 [*]D10.3)

            argumentDefinition = dispatcher.GetArgumentDataDefForCollection(arguments[8],10,3)
            arg8Array = arguments[8].GetProperty("PassedValue")
            arg8Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg8Array.GetArrayLength())
            arg8HandlePos = 1
            dispatcher.UnwrapObjectCollection(^m(arg8Handle),argumentDefinition,arg8HandlePos,arg8Array)

            ;;Argument 9 (OPTIONAL INOUT p9 [*]I4)

            argumentDefinition = dispatcher.GetArgumentDataDefForCollection(arguments[9],4)
            arg9Array = arguments[9].GetProperty("PassedValue")
            arg9Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg9Array.GetArrayLength())
            arg9HandlePos = 1
            dispatcher.UnwrapObjectCollection(^m(arg9Handle),argumentDefinition,arg9HandlePos,arg9Array)

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall function_eight(arg1,arg2,arg3,arg4,arg5,^marray(tempstr6.arry,arg6Handle),^marray(tempstr7.arry,arg7Handle),^marray(tempstr8.arry,arg8Handle),^marray(tempstr9.arry,arg9Handle))

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (OPTIONAL INOUT p1 A5)
            
            serializer.ArgumentData(1,%atrim(arg1),FieldDataType.AlphaField,5,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (OPTIONAL INOUT p2 I4)
            
            serializer.ArgumentData(2,arg2,FieldDataType.IntegerField,4,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 3 (OPTIONAL INOUT p3 D6)
            
            serializer.ArgumentData(3,arg3,FieldDataType.DecimalField,6,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 5 (OPTIONAL INOUT p5 D6.3)
            
            serializer.ArgumentData(5,arg5,FieldDataType.ImpliedDecimalField,6,3,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 6 (OPTIONAL INOUT p6 [*]D5)
            
            serializer.ArgumentHandleData(6,arg6Handle,FieldDataType.DecimalArrayField,5,0,%mem_proc(DM_GETSIZE,arg6Handle)/5,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 7 (OPTIONAL INOUT p7 [*]A20)
            
            serializer.ArgumentHandleData(7,arg7Handle,FieldDataType.AlphaArrayField,20,0,%mem_proc(DM_GETSIZE,arg7Handle)/20,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 8 (OPTIONAL INOUT p8 [*]D10.3)
            
            serializer.ArgumentHandleData(8,arg8Handle,FieldDataType.ImpliedDecimalArrayField,10,3,%mem_proc(DM_GETSIZE,arg8Handle)/10,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 9 (OPTIONAL INOUT p9 [*]I4)
            
            serializer.ArgumentHandleData(9,arg9Handle,FieldDataType.IntegerArrayField,4,0,%mem_proc(DM_GETSIZE,arg9Handle)/4,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst5
    ;;; </summary>
    public class encrypt_tst5_Dispatcher extends RoutineStub


        public method encrypt_tst5_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (OPTIONAL INOUT p1 A5)
                arg1,               A5
                ;;Argument 2 (OPTIONAL INOUT p2 A5)
                arg2,               A5
                returnValue,         A9
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (OPTIONAL INOUT p1 A5)

            arg1 = dispatcher.GetText(arguments[1])

            ;;Argument 2 (OPTIONAL INOUT p2 A5)

            arg2 = dispatcher.GetText(arguments[2])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            returnValue = %function_nine(arg1,arg2)

            ;;Function return value
            serializer.ArgumentData(0,%atrim(returnValue),FieldDataType.AlphaField,9,0,true)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (OPTIONAL INOUT p1 A5)
            
            serializer.ArgumentData(1,%atrim(arg1),FieldDataType.AlphaField,5,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (OPTIONAL INOUT p2 A5)
            
            serializer.ArgumentData(2,%atrim(arg2),FieldDataType.AlphaField,5,0,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst6
    ;;; </summary>
    public class encrypt_tst6_Dispatcher extends RoutineStub


        public method encrypt_tst6_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (OPTIONAL IN p1 A5)
                arg1,               A5
                ;;Argument 2 (OPTIONAL INOUT p2 A5)
                arg2,               A5
                returnValue,         D9
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (OPTIONAL IN p1 A5)

            arg1 = dispatcher.GetText(arguments[1])

            ;;Argument 2 (OPTIONAL INOUT p2 A5)

            arg2 = dispatcher.GetText(arguments[2])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            returnValue = %function_ten(arg1,arg2)

            ;;Function return value
            serializer.ArgumentData(0,returnValue,FieldDataType.DecimalField,9,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (OPTIONAL INOUT p2 A5)
            
            serializer.ArgumentData(2,%atrim(arg2),FieldDataType.AlphaField,5,0,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst7
    ;;; </summary>
    public class encrypt_tst7_Dispatcher extends RoutineStub


        public method encrypt_tst7_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT verno A30)
                arg1,               A30
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT verno A30)

            arg1 = dispatcher.GetText(arguments[1])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall get_verno_tst(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT verno A30)
            
            serializer.ArgumentData(1,%atrim(arg1),FieldDataType.AlphaField,30,0,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst8
    ;;; </summary>
    public class encrypt_tst8_Dispatcher extends RoutineStub

        private mStrtest1Metadata, @DataObjectMetadataBase

        public method encrypt_tst8_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest1Metadata = DataObjectMetadataBase.LookupType("Strtest1")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
                arg1DataObject,     @DataObjectBase
                arg1,               strStrtest1
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest1Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr1(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
            
            ;;Argument 1: Single Strtest1 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,46,"STRTEST1",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method Encrypt.encrypt_tst9
    ;;; </summary>
    public class encrypt_tst9_Dispatcher extends RoutineStub

        private mStrtest2Metadata, @DataObjectMetadataBase

        public method encrypt_tst9_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest2Metadata = DataObjectMetadataBase.LookupType("Strtest2")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT strtest2 structure @Strtest2)
                arg1DataObject,     @DataObjectBase
                arg1,               strStrtest2
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Process inbound arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT strtest2 structure @Strtest2)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest2Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr2(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT strtest2 structure @Strtest2)
            
            ;;Argument 1: Single Strtest2 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,71,"STRTEST2",true)
        endmethod

    endclass

endnamespace
