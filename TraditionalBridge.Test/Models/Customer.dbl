;;*****************************************************************************
;;
;; Title:       Customer.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure CUSTOMERS and from the data file DAT:customers.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.TraditionalBridge

namespace TraditionalBridge.Test.Models

	public partial class Customer extends DataObjectBase

		;; Metadata, current record state, and a copy of the original state
		public static sMetadata, @CustomerMetadata
		private mCustomer, strCustomer 
		private mOriginalCustomer, strCustomer 
		
		;;; <summary>
		;;;  Construct an empty Customer object
		;;; </summary>
		public method Customer
			parent()
		proc
			init mCustomer, mOriginalCustomer
		endmethod

		;;; <summary>
		;;;  Construct a Customer object containing data from a record
		;;; </summary>
		public method Customer
			required in inData, strCustomer
			parent()
		proc
			mCustomer = mOriginalCustomer = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mCustomer, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Customer number
		;;; </summary>
		public property CustomerNumber, d
			method get
			proc
				mreturn mCustomer.customer_number
			endmethod
			method set
			proc
				mCustomer.customer_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer name
		;;; </summary>
		public property Name, a
			method get
			proc
				mreturn mCustomer.name
			endmethod
			method set
			proc
				mCustomer.name = value
			endmethod
		endproperty

		;;; <summary>
		;;; Street address
		;;; </summary>
		public property Street, a
			method get
			proc
				mreturn mCustomer.street
			endmethod
			method set
			proc
				mCustomer.street = value
			endmethod
		endproperty

		;;; <summary>
		;;; City
		;;; </summary>
		public property City, a
			method get
			proc
				mreturn mCustomer.city
			endmethod
			method set
			proc
				mCustomer.city = value
			endmethod
		endproperty

		;;; <summary>
		;;; State
		;;; </summary>
		public property State, a
			method get
			proc
				mreturn mCustomer.state
			endmethod
			method set
			proc
				mCustomer.state = value
			endmethod
		endproperty

		;;; <summary>
		;;; Zip code
		;;; </summary>
		public property ZipCode, d
			method get
			proc
				mreturn mCustomer.zip_code
			endmethod
			method set
			proc
				mCustomer.zip_code = value
			endmethod
		endproperty

		;;; <summary>
		;;; Contact name
		;;; </summary>
		public property Contact, a
			method get
			proc
				mreturn mCustomer.contact
			endmethod
			method set
			proc
				mCustomer.contact = value
			endmethod
		endproperty

		;;; <summary>
		;;; Phone number
		;;; </summary>
		public property Phone, d
			method get
			proc
				mreturn mCustomer.phone
			endmethod
			method set
			proc
				mCustomer.phone = value
			endmethod
		endproperty

		;;; <summary>
		;;; Fax number
		;;; </summary>
		public property Fax, d
			method get
			proc
				mreturn mCustomer.fax
			endmethod
			method set
			proc
				mCustomer.fax = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customers favorite item
		;;; </summary>
		public property FavoriteItem, d
			method get
			proc
				mreturn mCustomer.favorite_item
			endmethod
			method set
			proc
				mCustomer.favorite_item = value
			endmethod
		endproperty

		;;; <summary>
		;;; Payment terms code
		;;; </summary>
		public property PaymentTermsCode, a
			method get
			proc
				mreturn mCustomer.payment_terms_code
			endmethod
			method set
			proc
				mCustomer.payment_terms_code = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customers tax ID number
		;;; </summary>
		public property TaxId, d
			method get
			proc
				mreturn mCustomer.tax_id
			endmethod
			method set
			proc
				mCustomer.tax_id = value
			endmethod
		endproperty

		;;; <summary>
		;;; Credit limit
		;;; </summary>
		public property CreditLimit, d
			method get
			proc
				mreturn mCustomer.credit_limit
			endmethod
			method set
			proc
				mCustomer.credit_limit = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mCustomer
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalCustomer
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				if(sMetadata == ^null)
					sMetadata = new CustomerMetadata()
				mreturn sMetadata
			endmethod
		endproperty

	endclass

endnamespace