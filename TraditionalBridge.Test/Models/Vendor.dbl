;;*****************************************************************************
;;
;; Title:       Vendor.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure VENDORS and from the data file DAT:vendors.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.TraditionalBridge

namespace TraditionalBridge.Test.Models

	public partial class Vendor extends DataObjectBase

		;; Metadata, current record state, and a copy of the original state
		public static sMetadata, @VendorMetadata
		private mVendor, strVendor 
		private mOriginalVendor, strVendor 
		
		;;; <summary>
		;;;  Construct an empty Vendor object
		;;; </summary>
		public method Vendor
			parent()
		proc
			init mVendor, mOriginalVendor
		endmethod

		;;; <summary>
		;;;  Construct a Vendor object containing data from a record
		;;; </summary>
		public method Vendor
			required in inData, strVendor
			parent()
		proc
			mVendor = mOriginalVendor = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mVendor, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Vendor number
		;;; </summary>
		public property VendorNumber, d
			method get
			proc
				mreturn mVendor.vendor_number
			endmethod
			method set
			proc
				mVendor.vendor_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Vendor name
		;;; </summary>
		public property Name, a
			method get
			proc
				mreturn mVendor.name
			endmethod
			method set
			proc
				mVendor.name = value
			endmethod
		endproperty

		;;; <summary>
		;;; Street address
		;;; </summary>
		public property Street, a
			method get
			proc
				mreturn mVendor.street
			endmethod
			method set
			proc
				mVendor.street = value
			endmethod
		endproperty

		;;; <summary>
		;;; City
		;;; </summary>
		public property City, a
			method get
			proc
				mreturn mVendor.city
			endmethod
			method set
			proc
				mVendor.city = value
			endmethod
		endproperty

		;;; <summary>
		;;; State
		;;; </summary>
		public property State, a
			method get
			proc
				mreturn mVendor.state
			endmethod
			method set
			proc
				mVendor.state = value
			endmethod
		endproperty

		;;; <summary>
		;;; Zip Code
		;;; </summary>
		public property ZipCode, d
			method get
			proc
				mreturn mVendor.zip_code
			endmethod
			method set
			proc
				mVendor.zip_code = value
			endmethod
		endproperty

		;;; <summary>
		;;; Contact name
		;;; </summary>
		public property Contact, a
			method get
			proc
				mreturn mVendor.contact
			endmethod
			method set
			proc
				mVendor.contact = value
			endmethod
		endproperty

		;;; <summary>
		;;; Phone number
		;;; </summary>
		public property Phone, d
			method get
			proc
				mreturn mVendor.phone
			endmethod
			method set
			proc
				mVendor.phone = value
			endmethod
		endproperty

		;;; <summary>
		;;; Fax number
		;;; </summary>
		public property Fax, d
			method get
			proc
				mreturn mVendor.fax
			endmethod
			method set
			proc
				mVendor.fax = value
			endmethod
		endproperty

		;;; <summary>
		;;; Payment terms code
		;;; </summary>
		public property PaymentTermsCode, a
			method get
			proc
				mreturn mVendor.payment_terms_code
			endmethod
			method set
			proc
				mVendor.payment_terms_code = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mVendor
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalVendor
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				if(sMetadata == ^null)
					sMetadata = new VendorMetadata()
				mreturn sMetadata
			endmethod
		endproperty

	endclass

endnamespace