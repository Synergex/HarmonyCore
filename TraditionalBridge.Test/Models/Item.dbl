;;*****************************************************************************
;;
;; Title:       Item.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure ITEMS and from the data file DAT:items.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.TraditionalBridge

namespace TraditionalBridge.Test.Models

	public partial class Item extends DataObjectBase

		;; Metadata, current record state, and a copy of the original state
		public static sMetadata, @ItemMetadata
		private mItem, strItem 
		private mOriginalItem, strItem 
		
		;;; <summary>
		;;;  Construct an empty Item object
		;;; </summary>
		public method Item
			parent()
		proc
			init mItem, mOriginalItem
		endmethod

		;;; <summary>
		;;;  Construct a Item object containing data from a record
		;;; </summary>
		public method Item
			required in inData, strItem
			parent()
		proc
			mItem = mOriginalItem = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mItem, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Item number
		;;; </summary>
		public property ItemNumber, d
			method get
			proc
				mreturn mItem.item_number
			endmethod
			method set
			proc
				mItem.item_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Vendor number
		;;; </summary>
		public property VendorNumber, d
			method get
			proc
				mreturn mItem.vendor_number
			endmethod
			method set
			proc
				mItem.vendor_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Size in gallons
		;;; </summary>
		public property Size, d
			method get
			proc
				mreturn mItem.size
			endmethod
			method set
			proc
				mItem.size = value
			endmethod
		endproperty

		;;; <summary>
		;;; Common name
		;;; </summary>
		public property CommonName, a
			method get
			proc
				mreturn mItem.common_name
			endmethod
			method set
			proc
				mItem.common_name = value
			endmethod
		endproperty

		;;; <summary>
		;;; Latin name
		;;; </summary>
		public property LatinName, a
			method get
			proc
				mreturn mItem.latin_name
			endmethod
			method set
			proc
				mItem.latin_name = value
			endmethod
		endproperty

		;;; <summary>
		;;; Hardiness zone code
		;;; </summary>
		public property ZoneCode, d
			method get
			proc
				mreturn mItem.zone_code
			endmethod
			method set
			proc
				mItem.zone_code = value
			endmethod
		endproperty

		;;; <summary>
		;;; Type code
		;;; </summary>
		public property Type, d
			method get
			proc
				mreturn mItem.type
			endmethod
			method set
			proc
				mItem.type = value
			endmethod
		endproperty

		;;; <summary>
		;;; Flowering?
		;;; </summary>
		public property Flowering, a
			method get
			proc
				mreturn mItem.flowering
			endmethod
			method set
			proc
				mItem.flowering = value
			endmethod
		endproperty

		;;; <summary>
		;;; Flower color
		;;; </summary>
		public property FlowerColor, a
			method get
			proc
				mreturn mItem.flower_color
			endmethod
			method set
			proc
				mItem.flower_color = value
			endmethod
		endproperty

		;;; <summary>
		;;; Shape
		;;; </summary>
		public property Shape, a
			method get
			proc
				mreturn mItem.shape
			endmethod
			method set
			proc
				mItem.shape = value
			endmethod
		endproperty

		;;; <summary>
		;;; Maximum height (in inches)
		;;; </summary>
		public property MaxHeight, d
			method get
			proc
				mreturn mItem.max_height
			endmethod
			method set
			proc
				mItem.max_height = value
			endmethod
		endproperty

		;;; <summary>
		;;; Maximum width (in inches)
		;;; </summary>
		public property MaxWidth, d
			method get
			proc
				mreturn mItem.max_width
			endmethod
			method set
			proc
				mItem.max_width = value
			endmethod
		endproperty

		;;; <summary>
		;;; Water requirements
		;;; </summary>
		public property WaterRequirement, a
			method get
			proc
				mreturn mItem.water_requirement
			endmethod
			method set
			proc
				mItem.water_requirement = value
			endmethod
		endproperty

		;;; <summary>
		;;; Sun requirements
		;;; </summary>
		public property SunRequirement, a
			method get
			proc
				mreturn mItem.sun_requirement
			endmethod
			method set
			proc
				mItem.sun_requirement = value
			endmethod
		endproperty

		;;; <summary>
		;;; Bin/aisle
		;;; </summary>
		public property BinLocation, a
			method get
			proc
				mreturn mItem.bin_location
			endmethod
			method set
			proc
				mItem.bin_location = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty on hand
		;;; </summary>
		public property QtyOnHand, d
			method get
			proc
				mreturn mItem.qty_on_hand
			endmethod
			method set
			proc
				mItem.qty_on_hand = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty allocated
		;;; </summary>
		public property QtyAllocated, d
			method get
			proc
				mreturn mItem.qty_allocated
			endmethod
			method set
			proc
				mItem.qty_allocated = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty on order
		;;; </summary>
		public property QtyOnOrder, d
			method get
			proc
				mreturn mItem.qty_on_order
			endmethod
			method set
			proc
				mItem.qty_on_order = value
			endmethod
		endproperty

		;;; <summary>
		;;; Reorder point
		;;; </summary>
		public property ReorderLevel, d
			method get
			proc
				mreturn mItem.reorder_level
			endmethod
			method set
			proc
				mItem.reorder_level = value
			endmethod
		endproperty

		;;; <summary>
		;;; Unit price
		;;; </summary>
		public property UnitPrice, d
			method get
			proc
				mreturn mItem.unit_price
			endmethod
			method set
			proc
				mItem.unit_price = value
			endmethod
		endproperty

		;;; <summary>
		;;; Item cost
		;;; </summary>
		public property CostPrice, d
			method get
			proc
				mreturn mItem.cost_price
			endmethod
			method set
			proc
				mItem.cost_price = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mItem
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalItem
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				if(sMetadata == ^null)
					sMetadata = new ItemMetadata()
				mreturn sMetadata
			endmethod
		endproperty

	endclass

endnamespace