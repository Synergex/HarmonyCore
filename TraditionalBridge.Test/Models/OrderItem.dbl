;;*****************************************************************************
;;
;; Title:       OrderItem.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure ORDER_ITEMS and from the data file DAT:order_items.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.TraditionalBridge

namespace TraditionalBridge.Test.Models

	public partial class OrderItem extends DataObjectBase

		;; Metadata, current record state, and a copy of the original state
		public static sMetadata, @OrderItemMetadata
		private mOrderItem, strOrderItem 
		private mOriginalOrderItem, strOrderItem 
		
		;;; <summary>
		;;;  Construct an empty OrderItem object
		;;; </summary>
		public method OrderItem
			parent()
		proc
			init mOrderItem, mOriginalOrderItem
		endmethod

		;;; <summary>
		;;;  Construct a OrderItem object containing data from a record
		;;; </summary>
		public method OrderItem
			required in inData, strOrderItem
			parent()
		proc
			mOrderItem = mOriginalOrderItem = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mOrderItem, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Order number
		;;; </summary>
		public property OrderNumber, d
			method get
			proc
				mreturn mOrderItem.order_number
			endmethod
			method set
			proc
				mOrderItem.order_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Line item number
		;;; </summary>
		public property ItemNumber, d
			method get
			proc
				mreturn mOrderItem.item_number
			endmethod
			method set
			proc
				mOrderItem.item_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Item ordered
		;;; </summary>
		public property ItemOrdered, d
			method get
			proc
				mreturn mOrderItem.item_ordered
			endmethod
			method set
			proc
				mOrderItem.item_ordered = value
			endmethod
		endproperty

		;;; <summary>
		;;; Quantity ordered
		;;; </summary>
		public property QuantityOrdered, d
			method get
			proc
				mreturn mOrderItem.quantity_ordered
			endmethod
			method set
			proc
				mOrderItem.quantity_ordered = value
			endmethod
		endproperty

		;;; <summary>
		;;; Unit price
		;;; </summary>
		public property UnitPrice, d
			method get
			proc
				mreturn mOrderItem.unit_price
			endmethod
			method set
			proc
				mOrderItem.unit_price = value
			endmethod
		endproperty

		;;; <summary>
		;;; Date shipped
		;;; </summary>
		public property DateShipped, d
			method get
			proc
				mreturn mOrderItem.date_shipped
			endmethod
			method set
			proc
				mOrderItem.date_shipped = value
			endmethod
		endproperty

		;;; <summary>
		;;; Invoice number
		;;; </summary>
		public property InvoiceNumber, d
			method get
			proc
				mreturn mOrderItem.invoice_number
			endmethod
			method set
			proc
				mOrderItem.invoice_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mOrderItem
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalOrderItem
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				if(sMetadata == ^null)
					sMetadata = new OrderItemMetadata()
				mreturn sMetadata
			endmethod
		endproperty

	endclass

endnamespace