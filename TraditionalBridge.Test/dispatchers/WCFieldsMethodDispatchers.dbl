;;*****************************************************************************
;;
;; Title:       WCFieldsMethodDispatchers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Models

.ifdef DBLV11
import System.Text.Json
.define JSON_ELEMENT @JsonElement
.else
.define JSON_ELEMENT @JsonValue
.endc

namespace TraditionalBridge.Dispatchers.WCFields


    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method WCFields.teststr1
    ;;; </summary>
    public class teststr1_Dispatcher extends RoutineStub

        private mStrtest1Metadata, @DataObjectMetadataBase

        public method teststr1_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest1Metadata = DataObjectMetadataBase.LookupType("Strtest1")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
                arg1DataObject,     @DataObjectBase
                arg1,               strSTRTEST1
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest1Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr1(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
            
            ;;Argument 1: Single Strtest1 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,46,"STRTEST1",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method WCFields.teststr2
    ;;; </summary>
    public class teststr2_Dispatcher extends RoutineStub

        private mStrtest2Metadata, @DataObjectMetadataBase

        public method teststr2_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest2Metadata = DataObjectMetadataBase.LookupType("Strtest2")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT STRTEST2 structure @Strtest2)
                arg1DataObject,     @DataObjectBase
                arg1,               strSTRTEST2
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT STRTEST2 structure @Strtest2)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest2Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr2(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT STRTEST2 structure @Strtest2)
            
            ;;Argument 1: Single Strtest2 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,71,"STRTEST2",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method WCFields.teststr3
    ;;; </summary>
    public class teststr3_Dispatcher extends RoutineStub

        private mStrtest3Metadata, @DataObjectMetadataBase

        public method teststr3_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT STRTEST3 structure @Strtest3)
                arg1DataObject,     @DataObjectBase
                arg1,               strSTRTEST3
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT STRTEST3 structure @Strtest3)

            ;;Structure argument. Get the data object then get the record from it
            arg1DataObject = dispatcher.DeserializeObject(arguments[1],mStrtest3Metadata)
            arg1 = arg1DataObject.SynergyRecord

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr3(arg1)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT STRTEST3 structure @Strtest3)
            
            ;;Argument 1: Single Strtest3 record
            serializer.ArgumentData(1,arg1,FieldDataType.DataObjectField,58,"STRTEST3",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method WCFields.teststr9
    ;;; </summary>
    public class teststr9_Dispatcher extends RoutineStub

        private mStrtest3Metadata, @DataObjectMetadataBase

        public method teststr9_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED INOUT p1de7 d7)
                arg1,               d7
                ;;Argument 2 (REQUIRED INOUT STRTEST3 structure @Strtest3)
                arg2Array,          JSON_ELEMENT
                arg2Handle,         D_HANDLE
                arg2HandlePos,      int
                ;;Argument 3 (REQUIRED INOUT p3al10 a10)
                arg3,               a10
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED INOUT p1de7 d7)

            arg1 = dispatcher.GetDecimal(arguments[1])

            ;;Argument 2 (REQUIRED INOUT STRTEST3 [*]structure @Strtest3)

            argumentDefinition = dispatcher.GetArgumentDataDefForCollection(arguments[2],58)
            arg2Array = arguments[2].GetProperty("PassedValue")
            arg2Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg2Array.GetArrayLength())
            arg2HandlePos = 1
            dispatcher.UnwrapObjectCollection(^m(arg2Handle),argumentDefinition,arg2HandlePos,arg2Array)

            ;;Argument 3 (REQUIRED INOUT p3al10 a10)

            arg3 = dispatcher.GetText(arguments[3])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall teststr9(arg1,^marray(strStrtest3,arg2Handle),arg3)

            ;;--------------------------------------------------------------------------------
            ;;Argument 1 (REQUIRED INOUT p1de7 d7)
            
            serializer.ArgumentData(1,arg1,FieldDataType.DecimalField,7,0,false)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (REQUIRED INOUT STRTEST3 [*]structure @Strtest3)
            
            serializer.ArgumentHandleData(2,arg2Handle,FieldDataType.DataObjectCollectionField,58,"STRTEST3",%mem_proc(DM_GETSIZE,arg2Handle)/58,true)

            ;;--------------------------------------------------------------------------------
            ;;Argument 3 (REQUIRED INOUT p3al10 a10)
            
            serializer.ArgumentData(3,%atrim(arg3),FieldDataType.AlphaField,10,0,false)
        endmethod

    endclass

endnamespace

;; This is here to ensure that the TraditionalBridge.Models namespace exists.
;; If the Synergy methods don't expsoe any structure or collection of structure
;; parameters then there won't be anything in the Models folder, and the import above will fail.
namespace TraditionalBridge.Models
    public class WCFieldsDummyModel
    endclass
endnamespace

