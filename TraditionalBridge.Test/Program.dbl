
import Harmony.TraditionalBridge
import Json
import TraditionalBridge.Test

.ifdef D_VMS
.define LOG_EXTENSION ".log;1"
.else
.define LOG_EXTENSION ".log"
.endc

main
	record
		disp, @SuperRoutineDispatcher
        ttChan, i4
        processId, d10
        processName, a256
        logLevel, a1
        logLevelLength, int
        logLevelInt, int
	endrecord
proc
	try
	begin
		data jsn, @Json.Json, new Json.Json()
		data jsnValue, @Json.JsonValue
		data jsnObj, @Json.JsonObject
		data jsnArray, @Json.JsonArray
		data targetLogSettings, @LoggerScopeSettings, new LoggerScopeSettings()
		nop
		xcall flags(1907050020)
        open(ttChan=0, O, "TT:")

        ;;get the process number to create a unique log file name with
        xcall JBNO(processId)
        xcall JBNAM(processName)
        getlog("HARMONY_LOG_LEVEL", logLevel, logLevelLength)
        if(logLevelLength > 0) then
            logLevelInt = %integer(logLevel)
        else
            logLevelInt = 6 ;log almost everything

        Logger.Instance = new TraditionalBridge.Logger(%atrim(processName) + "_" + %string(processId) + LOG_EXTENSION, logLevelInt, false)
		
		puts(ttChan, "READY" + %char(13)+ %char(10))

		;disp = new SuperRoutineDispatcher(new RoutineDispatcher[#] { new AutoTimeDispatcher(), new BinaryTransferDispatcher(), new data64kDispatcher(), new EncryptDispatcher(), new IF913Dispatcher(), new LrgPktsDispatcher(), new NoParmsDispatcher(), new Pool1Dispatcher(), new Pool2Dispatcher(), new Pool3Dispatcher(), new Pool4Dispatcher(), new Pool5Dispatcher(), new Pool6Dispatcher(), new SampleXfplEnvDispatcher(), new smcDispatcher(), new strtestsDispatcher(), new syntstDispatcher(), new TestDateDispatcher(), new UserDataDispatcher(), new WCFieldsDispatcher(), new ZDateTimeDispatcher() })

		disp = new SuperRoutineDispatcher(new RoutineDispatcher[#] { new AutoTimeDispatcher(), new EncryptDispatcher(), new IF913Dispatcher(), new NoParmsDispatcher(), new Pool1Dispatcher(), new Pool2Dispatcher(), new Pool3Dispatcher(), new Pool4Dispatcher(), new Pool5Dispatcher(), new Pool6Dispatcher(), new SampleXfplEnvDispatcher(), new smcDispatcher(), new syntstDispatcher(), new TestDateDispatcher(), new UserDataDispatcher(), new WCFieldsDispatcher(), new ZDateTimeDispatcher() })

		disp.Dispatch(ttChan)
	end
	
	catch(e, @Exception)
	begin
		if(Logger.Instance != ^null)
			Logger.Instance.Log("DISPATCHER EXITED with exception" + e.ToString())
	end
	endtry
	if(Logger.Instance != ^null)
		Logger.Instance.CloseLog()

endmain
