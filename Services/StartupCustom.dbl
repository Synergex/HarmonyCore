import Harmony.OData.Adapter
import Services.Isolated
;;*****************************************************************************
;;
;; Title:       StartupCustom.dbl
;;
;; Description: Custom startup class methods
;;
;;*****************************************************************************
;; THIS CODE WAS HAND CRAFTED
;;*****************************************************************************

import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.Utility
import Harmony.OData
import Harmony.AspNetCore.Context
import Microsoft.AspNetCore.Builder
import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.Http
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Extensions
import Microsoft.AspNet.OData.Builder
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.DependencyInjection.Extensions
import Microsoft.OData
import Microsoft.OData.UriParser
import Swashbuckle.AspNetCore.Swagger
import Microsoft.AspNetCore.StaticFiles
import Microsoft.AspNetCore.Mvc.Abstractions
import Services.Models
import Harmony.Core.Interface
import Harmony.Core
import Harmony.OData
import Harmony.AspNetCore.Context
import Services.Controllers
import System.IO
import System.Linq
import System.Threading.Tasks
import Microsoft.Extensions.Primitives

namespace Services

    public partial class Startup

        partial method ConfigureServicesCustom, void
            services, @IServiceCollection 
        proc
            ;;------------------------------------------------------------------------
            ;;Configure a custom primary key factory to provide new primary key
            ;;values for entities created via POST operations

            ;;Create a new parameter file
            data parameterFile, string, "DAT:sysparams.ddf"
            data tmpChn = 0
            try
            begin
                open(tmpChn,i:r,parameterFile)
                close tmpChn
                xcall delet(parameterFile)
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            finally
            begin
                data sourceFile = parameterFile.ToLower().Replace(".ddf",".txt")
                xcall copy(sourceFile,parameterFile,1)
            end
            endtry

            ;;Add the primary key factory service
            services.AddScoped<IPrimaryKeyFactory,PrimaryKeyGenerator>()

            ;;------------------------------------------------------------------------

            ;;services.TryAddEnumerable(ServiceDescriptor.Singleton<IActionInvokerProvider, HarmonySprocActionInvokerProvider>())
            ;;services.TryAddEnumerable(ServiceDescriptor.Singleton<IActionInvokerProvider, AdapterActionInvokerProvider>())
            services.AddSingleton<IContextFactory<IsolatedMethodsBase>>(new AssemblyLoadContextPool<IsolatedMethodsBase, IsolatedMethods>(2))
            services.AddScoped<Microsoft.EntityFrameworkCore.DbContext>(MakeGenericDbContext)
            ;data contextPool, @RemoteExternalContextPool<ExternalCallContext>, new RemoteExternalContextPool<ExternalCallContext>(RemoteTargetOS.VMS, "VMSIT", "STEVEI_RSAC", new Renci.SshNet.PasswordAuthenticationMethod("STEVEI_RSAC", "rsac"), "RUN PROGRAM.EXE" , 4, 10000, 10000) 
            data currentDirectory = Path.GetDirectoryName(^typeof(Startup).Assembly.Location)
			data solutionDir = Environment.GetEnvironmentVariable("SolutionDir")
			data testDir = findRelativeFolderForAssembly("TestDir")
            data contextPool,@ExternalContextPool<ExternalCallContext>, new ExternalContextPool<ExternalCallContext>(Environment.GetEnvironmentVariable("SYNERGYDE64") + "dbl\bin\dbr.exe", 'TraditionalBridge.Test.dbr', testDir, ^null, 4, true) 

            services.AddSingleton<IContextFactory<ExternalCallContext>>(contextPool)
            services.AddContextPool<ExternalCallContext>()

            services.AddSignalR()
            services.AddDistributedMemoryCache()
            services.AddSession()

        endmethod

		private static method findRelativeFolderForAssembly, string
			folderName, string
		proc
			data assemblyLocation = ^typeof(Startup).Assembly.Location
			data currentFolder = Path.GetDirectoryName(assemblyLocation)
			data rootPath = Path.GetPathRoot(currentFolder)
			while(currentFolder != rootPath)
			begin
				if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
					mreturn Path.Combine(currentFolder, folderName)
				else
					currentFolder = Path.GetFullPath(currentFolder + "..\")
			end
			mreturn ^null
		endmethod

        private method MakeGenericDbContext, @Microsoft.EntityFrameworkCore.DbContext
            sp, @IServiceProvider
        proc
            mreturn sp.GetService<Services.Models.DbContext>()
        endmethod

        partial method ConfigureCustom, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        proc
            
            ;;TODO there is a compiler bug with extension methods here
            ;data contextPool = (@ExternalContextPool<ExternalCallContext>)app.ApplicationServices.GetService<IContextFactory<ExternalCallContext>>()
            ;contextPool = (@ExternalContextPool<ExternalCallContext>)app.ApplicationServices.GetService(^typeof(IContextFactory<ExternalCallContext>))
            ;Task.WaitAll(contextPool.RealizeMinimumPoolSize(app.ApplicationServices))
            ;app.UseEagerContext<ExternalCallContext>(contextPool)
            
            app.UseSignalR(lambda(route){ route.MapHub<OrdersHub>(new PathString("/hub/orders")) })
        endmethod

        private method GetTenantId, @string
            httpCtx, @HttpContext
        proc
            data headers, StringValues
            if(httpCtx.Request.Headers.TryGetValue("X-TENANT-ID", headers) && headers.Count == 1) then
            begin
                mreturn headers.ToArray().First()
            end
            else
                mreturn String.Empty
        endmethod


    endclass

endnamespace
