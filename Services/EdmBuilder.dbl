;;*****************************************************************************
;;
;; Title:       EdmBuilder.dbl
;;
;; Description: Builds a Harmony Core Enterprise Data Model (EDM)
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.OData
import Microsoft.EntityFrameworkCore
import Microsoft.OData.Edm
import Microsoft.AspNetCore.Mvc
import System.Collections.Generic
import Services.Models
import Microsoft.OData.ModelBuilder

namespace Services

    ;;; <summary>
    ;;; Builds an entity framework entity data model.
    ;;; </summary>
    public partial class EdmBuilder implements IEdmBuilder

        static method EdmBuilder
        proc
            CustomStaticEdmInit()

            if(mEdmVersions.Count == 0)
                mEdmVersions.Add(1)
        endmethod

        public method EdmBuilder
            serviceProvider, @IServiceProvider
        proc
            mServiceProvider = serviceProvider
        endmethod

        public virtual method BuildModel, @IEdmModel
            modelBuilder, @ODataModelBuilder 
            endparams
        proc
            mreturn GetEdmModel(modelBuilder, mServiceProvider)
        endmethod

        private mServiceProvider, @IServiceProvider
        private static mEdmModels, @Dictionary<int, IEdmModel>, new Dictionary<int, IEdmModel>()
        private static mEdmVersions, @List<int>, new List<int>()

        public static method GetEdmModel, @IEdmModel
            required in serviceProvider, @IServiceProvider
            required in versionNumber, int
        proc
            if(!mEdmModels.ContainsKey(versionNumber))
            begin
                FillVersionedEdmModels(serviceProvider, versionNumber)

                if(!mEdmModels.ContainsKey(versionNumber))
                begin
                    data madeModel = GetEdmModel(new ODataConventionModelBuilder(), serviceProvider)
                    mEdmModels.Add(versionNumber, madeModel)
                end
            end
            mreturn mEdmModels[versionNumber]
        endmethod

        public static property EdmVersions, @IEnumerable<int>
            method get
            proc
                mreturn mEdmVersions
            endmethod
        endproperty

        private static partial method FillVersionedEdmModels, void
            required in serviceProvider, @IServiceProvider
            required in versionNumber, int
        endmethod

        private static partial method CustomStaticEdmInit, void
        
        endmethod

        ;;; <summary>
        ;;; Gets the entity data model.
        ;;; </summary>
        private static method GetEdmModel, @IEdmModel
            required in builder, @ODataModelBuilder
            required in serviceProvider, @IServiceProvider
        proc
            ;;Declare entities
            builder.EntitySet<Customer>("Customers")
            builder.EntitySet<CustomerNote>("CustomerNotes")
            builder.EntitySet<Item>("Items")
            builder.EntitySet<Order>("Orders")
            builder.EntitySet<OrderItem>("OrderItems")
            builder.EntitySet<Vendor>("Vendors")
            builder.EntitySet<CustomerEx>("CustomerExs")
            builder.EntitySet<Nonuniquepk>("Nonuniquepks")
            builder.EntitySet<Differentpk>("Differentpks")
            builder.EntitySet<Testcar>("Testcars")
            builder.EntitySet<Testcarlot>("Testcarlots")
            builder.EntitySet<Testcarowner1>("Testcarowner1s")
            builder.EntitySet<Testcarowner2>("Testcarowner2s")
            builder.EntitySet<Testcarowner3>("Testcarowner3s")

            ;;Entities with a single primary key segment have the key declared to EF via a
            ;;{Key} attribute on the appropriate property in the data model, but only one {key}
            ;;attribute can be used in a class, so keys with multiple segments are defined
            ;;using the "Fluent API" here.
            builder.EntityType<OrderItem>().HasKey<OrderItem,int>("OrderNumber")
            builder.EntityType<OrderItem>().HasKey<OrderItem,int>("ItemNumber")
 
            ;;-----------------------------------------------
            ;;If we have a GetEdmModelCustom method, call it 

            GetEdmModelCustom(serviceProvider, builder)

            ;;-----------------------------------------------

            data tempModel = (@EdmModel)builder.GetEdmModel()

            data customerType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Customer")
            tempModel.AddAlternateKeyAnnotation(customerType, new Dictionary<string, IEdmProperty>() {{"State",customerType.FindProperty("State")}})
            tempModel.AddAlternateKeyAnnotation(customerType, new Dictionary<string, IEdmProperty>() {{"ZipCode",customerType.FindProperty("ZipCode")}})
            tempModel.AddAlternateKeyAnnotation(customerType, new Dictionary<string, IEdmProperty>() {{"PaymentTermsCode",customerType.FindProperty("PaymentTermsCode")}})

            data customerNoteType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.CustomerNote")

            data itemType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Item")
            tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"VendorNumber",itemType.FindProperty("VendorNumber")}})
            tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"FlowerColor",itemType.FindProperty("FlowerColor")}})
            tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"Size",itemType.FindProperty("Size")}})
            tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"CommonName",itemType.FindProperty("CommonName")}})

            data orderType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Order")
            tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"CustomerNumber",orderType.FindProperty("CustomerNumber")}})
            tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"DateOrdered",orderType.FindProperty("DateOrdered")}})
            tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"DateCompleted",orderType.FindProperty("DateCompleted")}})

            data orderItemType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.OrderItem")
            tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"ItemOrdered",orderItemType.FindProperty("ItemOrdered")}})
            tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"DateShipped",orderItemType.FindProperty("DateShipped")}})
            tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"InvoiceNumber",orderItemType.FindProperty("InvoiceNumber")}})

            data vendorType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Vendor")
            tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"VendorNumber",vendorType.FindProperty("VendorNumber")},{"ZipCode",vendorType.FindProperty("ZipCode")}})
            tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"State",vendorType.FindProperty("State")}})
            tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"ZipCode",vendorType.FindProperty("ZipCode")}})
            tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"PaymentTermsCode",vendorType.FindProperty("PaymentTermsCode")}})

            data customerExType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.CustomerEx")

            data nonuniquepkType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Nonuniquepk")

            data differentpkType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Differentpk")
            tempModel.AddAlternateKeyAnnotation(differentpkType, new Dictionary<string, IEdmProperty>() {{"Alphapk",differentpkType.FindProperty("Alphapk")}})
            tempModel.AddAlternateKeyAnnotation(differentpkType, new Dictionary<string, IEdmProperty>() {{"Decimalpk",differentpkType.FindProperty("Decimalpk")}})
            tempModel.AddAlternateKeyAnnotation(differentpkType, new Dictionary<string, IEdmProperty>() {{"Intergerpk",differentpkType.FindProperty("Intergerpk")}})
            tempModel.AddAlternateKeyAnnotation(differentpkType, new Dictionary<string, IEdmProperty>() {{"Datepk",differentpkType.FindProperty("Datepk")}})
            tempModel.AddAlternateKeyAnnotation(differentpkType, new Dictionary<string, IEdmProperty>() {{"Timepk",differentpkType.FindProperty("Timepk")}})
            tempModel.AddAlternateKeyAnnotation(differentpkType, new Dictionary<string, IEdmProperty>() {{"Booleanpk",differentpkType.FindProperty("Booleanpk")}})

            data testcarType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Testcar")
            tempModel.AddAlternateKeyAnnotation(testcarType, new Dictionary<string, IEdmProperty>() {{"Lotid",testcarType.FindProperty("Lotid")}})
            tempModel.AddAlternateKeyAnnotation(testcarType, new Dictionary<string, IEdmProperty>() {{"Owner1",testcarType.FindProperty("Owner1")}})
            tempModel.AddAlternateKeyAnnotation(testcarType, new Dictionary<string, IEdmProperty>() {{"Owner2",testcarType.FindProperty("Owner2")}})
            tempModel.AddAlternateKeyAnnotation(testcarType, new Dictionary<string, IEdmProperty>() {{"Owner3",testcarType.FindProperty("Owner3")}})

            data testcarlotType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Testcarlot")

            data testcarowner1Type = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Testcarowner1")

            data testcarowner2Type = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Testcarowner2")

            data testcarowner3Type = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Testcarowner3")

            ;;-----------------------------------------------
            ;;If we have a PostEdmModelCustom method, call it 

            PostEdmModelCustom(serviceProvider, tempModel)

            ;;-----------------------------------------------

            mreturn tempModel

        endmethod

        ;;Declare the GetEdmModelCustom partial method
        ;;This method can be implemented in a partial class to provide custom EDM configuration code
        partial static method GetEdmModelCustom, void
            required in serviceProvider, @IServiceProvider
            required in builder, @ODataModelBuilder
        endmethod

        ;;Declare the PostEdmModelCustom partial method
        ;;This method can be implemented in a partial class to provide custom EDM configuration code
        partial static method PostEdmModelCustom, void
            required in serviceProvider, @IServiceProvider
            required in model, @EdmModel
        endmethod

    endclass

endnamespace
