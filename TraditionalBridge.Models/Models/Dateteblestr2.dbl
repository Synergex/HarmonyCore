;;*****************************************************************************
;;
;; Title:       Dateteblestr2.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure DATETEBLESTR2.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace TraditionalBridge.Models

    public partial class Dateteblestr2 extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strDateteblestr2
        private mOriginalSynergyData, strDateteblestr2
        protected mGlobalRFA  ,a10

        private static sMetadata, @Dateteblestr2Metadata

.region "Constructors"

        static method Dateteblestr2
        proc
            sMetadata = new Dateteblestr2Metadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Dateteblestr2), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Dateteblestr2
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Dateteblestr2
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(10, ErrorMessage=" cannot exceed 10 characters. ")}
        public property Alphafld1, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alphafld1, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alphafld1 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999, ErrorMessage=" must be between 0 and 9999. ")}
        public property Dec4fld, int
            method get
            proc
                mreturn (int)mSynergyData.dec4fld
            endmethod
            method set
            proc
                mSynergyData.dec4fld = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(20, ErrorMessage=" cannot exceed 20 characters. ")}
        public property GroupfldGpalpha, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.groupfld.gpalpha, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.groupfld.gpalpha = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999, ErrorMessage=" must be between 0 and 99999. ")}
        public property GroupfldGpdec, int
            method get
            proc
                mreturn (int)mSynergyData.groupfld.gpdec
            endmethod
            method set
            proc
                mSynergyData.groupfld.gpdec = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999.99, ErrorMessage=" must be between 0 and 99999.99. ")}
        public property Idfiled, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.idfiled, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.idfiled = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[5]
        endmethod

.endregion

    endclass

endnamespace
