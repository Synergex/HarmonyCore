;;*****************************************************************************
;;
;; Title:       Integertest.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure INTEGERTESTS.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace TraditionalBridge.Models

    public partial class Integertest extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strIntegertest
        private mOriginalSynergyData, strIntegertest
        protected mGlobalRFA  ,a10

        private static sMetadata, @IntegertestMetadata

.region "Constructors"

        static method Integertest
        proc
            sMetadata = new IntegertestMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Integertest), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Integertest
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Integertest
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Integer size i1
        ;;; </summary>
        {Range(0,127, ErrorMessage="Integer size i1 must be between 0 and 127. ")}
        public property IntI1, int
            method get
            proc
                mreturn (int)mSynergyData.int_i1
            endmethod
            method set
            proc
                mSynergyData.int_i1 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer size i2
        ;;; </summary>
        {Range(0,32767, ErrorMessage="Integer size i2 must be between 0 and 32767. ")}
        public property IntI2, int
            method get
            proc
                mreturn (int)mSynergyData.int_i2
            endmethod
            method set
            proc
                mSynergyData.int_i2 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer size i4
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="Integer size i4 must be between 0 and 2147483647. ")}
        public property IntI4, int
            method get
            proc
                mreturn (int)mSynergyData.int_i4
            endmethod
            method set
            proc
                mSynergyData.int_i4 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer size i8
        ;;; </summary>
        {Range(0,9223372036854775807, ErrorMessage="Integer size i8 must be between 0 and 9223372036854775807. ")}
        public property IntI8, long
            method get
            proc
                mreturn (long)mSynergyData.int_i8
            endmethod
            method set
            proc
                mSynergyData.int_i8 = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[4]
        endmethod

.endregion

    endclass

endnamespace
