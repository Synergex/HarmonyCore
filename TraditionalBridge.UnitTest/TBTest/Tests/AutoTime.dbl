import Json
import Synergex.TestFramework
import Harmony.TraditionalBridge
import System.Text.Json
import TraditionalBridge.Test

namespace TraditionalBridge.UnitTest

    {TestClass}
    public class AutoTime

        {TestCategory("AutoTime")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets structure property based on what is passed in, then writes it
        ;;; </summary>
        public method AutoTimeALin, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":12,"method":"AutoTimeALin","params":[{"ReturnedValue":false},{"PassedValue":{"Remainder":"Remainder"},"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties in passed in structure array, then writes it
        ;;; </summary>
        public method AutoTimeALout, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":13,"method":"AutoTimeALout","params":[{"ReturnedValue":false},{"PassedValue":["","","","",""],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        ;;; <summary>
        ;;; Writes out properties, sets properties, and then writes them out again
        ;;; </summary>
        public method AutoTimeArray, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":14,"method":"AutoTimeArray","params":[{"ReturnedValue":false},{"PassedValue":["","",""],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        ;;; <summary>
        ;;; Writes out properties, sets properties, and then writes them out again
        ;;; </summary>
        public method AutoTimeInOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":15,"method":"AutoTimeINOUT","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        ;;; <summary>
        ;;; Writes out properties in structure
        ;;; </summary>
        public method AutoTimeIn, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":16,"method":"AutoTimeIn","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, then writes them out
        ;;; </summary>
        public method AutoTimeOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":17,"method":"AutoTimeOut","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
    endclass
endnamespace