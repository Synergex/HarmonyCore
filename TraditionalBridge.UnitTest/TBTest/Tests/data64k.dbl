import Json
import Synergex.TestFramework
import Harmony.TraditionalBridge
import System.Text.Json
import TraditionalBridge.Test

namespace TraditionalBridge.UnitTest

    {TestClass}
    public class data64k
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, mem_proc and maps structure to data area, returns 47
        ;;; </summary>
        public method BinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":180,"method":"BinaryArrayTest","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":"12345","DataType":2},{"PassedValue":"","DataType":128},{"PassedValue":"helloworld","DataType":1},{"PassedValue":"","DataType":128},{"PassedValue":"12345.67","DataType":4},{"PassedValue":"","DataType":128},{"PassedValue":"20122","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, mem_proc and maps structure to data area
        ;;; </summary>
        public method inBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":181,"method":"inBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, mem_proc and maps structure to data area
        ;;; </summary>
        public method inHandle, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":182,"method":"inHandle","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Maps structure to data area
        ;;; </summary>
        public method inOutBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":183,"method":"inOutBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Maps structure to data area
        ;;; </summary>
        public method inoutHandle, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":184,"method":"inoutHandle","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Effectively does nothing
        ;;; </summary>
        public method inoutHandle2, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":185,"method":"inoutHandle2","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, mem_proc and maps structure to data area
        ;;; </summary>
        public method outBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":186,"method":"outBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, mem_proc and maps structure to data area. Then writes a file
        ;;; </summary>
        public method outFileBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":187,"method":"outFileBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"helloworld","DataType":1},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, mem_proc and maps structure to data area
        ;;; </summary>
        public method outHandle, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":188,"method":"outHandle","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets properties, mem_proc and maps structure to data area
        ;;; </summary>
        public method twoparmsrtn, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":189,"method":"twoparmsrtn","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128},{"PassedValue":"helloworld","DataType":1}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
    endclass
endnamespace