import Json
import Synergex.TestFramework
import Harmony.TraditionalBridge
import System.Text.Json
import TraditionalBridge.Test

namespace TraditionalBridge.UnitTest

   {TestClass}
    public class Pool

        {TestCategory("Pool")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs greeting from global data section
        ;;; </summary>
        public method getGreeting, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchPool1('{"jsonrpc":"2.0","id":103,"method":"getGreeting","params":[{"ReturnedValue":false},{"PassedValue":"hello","DataType":1}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Pool")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets greeting to global data section
        ;;; </summary>
        public method setGreeting, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchPool1('{"jsonrpc":"2.0","id":104,"method":"setGreeting","params":[{"ReturnedValue":false},{"PassedValue":"hello","DataType":1}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("Pool")}
        {TestMethod}
        ;;; <summary>
        ;;; Writes intialize to TEST:pooltest.log
        ;;; </summary>
        public method Initialize, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchPool2('{"jsonrpc":"2.0","id":105,"method":"Initialize","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("Pool")}
        {TestMethod}
        ;;; <summary>
        ;;; Effectively does nothing
        ;;; </summary>
        public method Cleanup, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchPool2('{"jsonrpc":"2.0","id":106,"method":"Cleanup","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("Pool")}
        {TestMethod}
        ;;; <summary>
        ;;; Effectively does nothing
        ;;; </summary>
        public method Activate, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchPool3('{"jsonrpc":"2.0","id":107,"method":"Activate","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("Pool")}
        {TestMethod}
        ;;; <summary>
        ;;; Effectively does nothing
        ;;; </summary>
        public method Deactivate, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchPool3('{"jsonrpc":"2.0","id":108,"method":"Deactivate","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("Pool")}
        {TestMethod}
        ;;; <summary>
        ;;; Writes to TEST:pooltest.log, returns 1
        ;;; </summary>
        public method CanBePooled, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchPool5('{"jsonrpc":"2.0","id":109,"method":"CanBePooled","params":[{"ReturnedValue":true,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
    endclass
endnamespace