import Json
import Synergex.TestFramework
import Harmony.TraditionalBridge
import System.Text.Json
import TraditionalBridge.Test

namespace TraditionalBridge.UnitTest

    {TestClass}
    public class BinaryTransfer
        
        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Makes a GRFA file?
        ;;; </summary>
        public method CreateGRFAFile, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":190,"method":"CreateGRFAFile","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Deletes the GRFA file under GRFAFILENAME
        ;;; </summary>
        public method DeleteGRFAFile, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":191,"method":"DeleteGRFAFile","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Adds object to array list
        ;;; </summary>
        public method getarraylist, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":192,"method":"getarraylist","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a byte
        ;;; </summary>
        public method getbyte, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":193,"method":"getbyte","params":[{"ReturnedValue":false},{"PassedValue":1,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a byte array
        ;;; </summary>
        public method getbytea, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":194,"method":"getbytea","params":[{"ReturnedValue":false},{"PassedValue":[1],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a structure
        ;;; </summary>
        public method getstruct, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":195,"method":"getstruct","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA": "", "Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        ;{Ignore("dbr.exe crashes by ntdll.dll here")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a structure array
        ;;; </summary>
        public method getstructa, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":196,"method":"getstructa","params":[{"ReturnedValue":false},{"PassedValue":[{"GRFA": "", "Value":""}],"DataType":32}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a uint
        ;;; </summary>
        public method getuint, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":197,"method":"getuint","params":[{"ReturnedValue":false},{"PassedValue":2012,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a uint array
        ;;; </summary>
        public method getuinta, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":198,"method":"getuinta","params":[{"ReturnedValue":false},{"PassedValue":[2012],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a ushort
        ;;; </summary>
        public method getushort, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":199,"method":"getushort","params":[{"ReturnedValue":false},{"PassedValue":12,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Outs a ushort array
        ;;; </summary>
        public method getushorta, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":200,"method":"getushorta","params":[{"ReturnedValue":false},{"PassedValue":[20,12],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Effectively does nothing
        ;;; </summary>
        public method setbytea, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":201,"method":"setbytea","params":[{"ReturnedValue":false},{"PassedValue":[2,0,1,2],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        ;;; <summary>
        ;;; Effectively does nothing
        ;;; </summary>
        public method setushorta, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":202,"method":"setushorta","params":[{"ReturnedValue":false},{"PassedValue":[20,12],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
    endclass
endnamespace