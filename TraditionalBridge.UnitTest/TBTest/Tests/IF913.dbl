import Json
import Synergex.TestFramework
import Harmony.TraditionalBridge
import System.Text.Json
import TraditionalBridge.Test

namespace TraditionalBridge.UnitTest

    {TestClass}
    public class IF913
        
        {TestCategory("Arbitrario")}
        {TestMethod}
        public method ArbitrarioMethodWithStructures, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":2,"method":"Arbitrario.MethodWithStructures","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":[{"GRFA": "", "Value":""}],"DataType":32},{"PassedValue":[],"DataType":1024},{"PassedValue":{"GRFA": "", "Value":""},"DataType":16},{"PassedValue":{"GRFA": "", "Value":""},"DataType":16},{"PassedValue":[],"DataType":32},{"PassedValue":[],"DataType":32},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Arbitrario")}
        {TestMethod}
        public method ArbitrarioOptional, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":3,"method":"arbitrario_optional","params":[{"ReturnedValue":true,"DataType":16},{"PassedValue":9,"DataType":8},{"PassedValue":"World","DataType":1},{"PassedValue":"","DataType":1},{"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.endregion

.region "Get"
        {TestCategory("Get")}
        {TestMethod}
        public method GetAllCustomers, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":4,"method":"GetAllCustomers", "params":[{"ReturnedValue":true,"DataType":64}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Get")}
        {TestMethod}
        public method GetCustomerArray, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":5,"method":"GetCustomerArray", "params":[{"ReturnedValue":true,"DataType":64}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Get")}
        {TestMethod}
        public method GetAllItems, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":6,"method":"GetAllItems", "params":[{"ReturnedValue":true,"DataType":64}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Get")}
        {TestMethod}
        public method GetAllOrders, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":7,"method":"GetAllOrders", "params":[{"ReturnedValue":true,"DataType":64}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Get")}
        {TestMethod}
        public method GetAllVendors, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":8,"method":"GetAllVendors", "params":[{"ReturnedValue":true,"DataType":64}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.endregion

.region "Parameters"
        {TestCategory("Parameters")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method SimpleParameters, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":9,"method":"SimpleParameters","params":[{"ReturnedValue":true,"DataType":16},{"PassedValue":"a","DataType":32},{"PassedValue":"b","DataType":32},{"PassedValue":"c","DataType":32},{"PassedValue":1,"DataType":32},{"PassedValue":2,"DataType":32},{"PassedValue":3,"DataType":32},{"PassedValue":44,"DataType":32},{"PassedValue":55,"DataType":32},{"PassedValue":66,"DataType":32},{"PassedValue":7.7,"DataType":32},{"PassedValue":8.8,"DataType":32},{"PassedValue":9.9,"DataType":32},{"PassedValue":9,"DataType":32},{"PassedValue":8,"DataType":32},{"PassedValue":7,"DataType":32},{"PassedValue":65,"DataType":32},{"PassedValue":43,"DataType":32},{"PassedValue":21,"DataType":32},{"PassedValue":123,"DataType":32},{"PassedValue":456,"DataType":32},{"PassedValue":789,"DataType":32},{"PassedValue":1011,"DataType":32},{"PassedValue":1213,"DataType":32},{"PassedValue":1415,"DataType":32},{"PassedValue":{},"DataType":32},{"PassedValue":{},"DataType":32},{"PassedValue":{},"DataType":32}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Parameters")}
        {TestMethod}
        public method ArrayParameters, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":10,"method":"ArrayParameters","params":[{"ReturnedValue":false},{"PassedValue":[""],"DataType":1024},{"PassedValue":[""],"DataType":1024},{"PassedValue":[""],"DataType":1024},{"PassedValue":[{"GRFA":"","Value":""}],"DataType":32},{"PassedValue":[{"GRFA":"","Value":""}],"DataType":32},{"PassedValue":[{"GRFA":"","Value":""}],"DataType":32}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Parameters")}
        {TestMethod}
        public method ArrayListParameters, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatch('{"jsonrpc":"2.0","id":11,"method":"ArrayListParameters","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.endregion

.region "AutoTime"
        {TestCategory("AutoTime")}
        {TestMethod}
        public method AutoTimeALin, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":12,"method":"AutoTimeALin","params":[{"ReturnedValue":false},{"PassedValue":{"Remainder":"Remainder"},"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        public method AutoTimeALout, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":13,"method":"AutoTimeALout","params":[{"ReturnedValue":false},{"PassedValue":["","","","",""],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        public method AutoTimeArray, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":14,"method":"AutoTimeArray","params":[{"ReturnedValue":false},{"PassedValue":["","",""],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        public method AutoTimeInOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":15,"method":"AutoTimeINOUT","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        public method AutoTimeIn, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":16,"method":"AutoTimeIn","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("AutoTime")}
        {TestMethod}
        public method AutoTimeOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchAutoTime('{"jsonrpc":"2.0","id":17,"method":"AutoTimeOut","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.endregion

.region "Encrypt"
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst1, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":18,"method":"encrypt_tst1","params":[{"ReturnedValue":false},{"PassedValue":"abcde","DataType":1},{"PassedValue":"12345","DataType":2},{"PassedValue":"54321.123","DataType":4},{"PassedValue":1234,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst10, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":19,"method":"encrypt_tst10","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst11, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":20,"method":"encrypt_tst11","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst12, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":21,"method":"encrypt_tst12","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst2, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":22,"method":"encrypt_tst2","params":[{"ReturnedValue":false},{"PassedValue":"12345.43","DataType":4},{"PassedValue":"54321.12345","DataType":4},{"PassedValue":"123.4321","DataType":4},{"PassedValue":"987.65","DataType":4},{"PassedValue":"9876543210","DataType":2},{"PassedValue":"777.7777","DataType":4},{"PassedValue":"98765.4321","DataType":4},{"PassedValue":"12345678","DataType":2},{"PassedValue":"9876543.2","DataType":4},{"PassedValue":"123456789","DataType":4}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst3, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":23,"method":"encrypt_tst3","params":[{"ReturnedValue":false},{"PassedValue":"hello","DataType":1},{"PassedValue":"world","DataType":1},{"PassedValue":"dlrow","DataType":1},{"PassedValue":"olleh","DataType":1}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst4, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":24,"method":"encrypt_tst4","params":[{"ReturnedValue":false},{"PassedValue":"hello","DataType":1},{"PassedValue":1234,"DataType":8},{"PassedValue":"54321","DataType":2},{"PassedValue":"bye","DataType":1},{"PassedValue":"654.321","DataType":4},{"PassedValue":[""],"DataType":1024},{"PassedValue":[""],"DataType":1024},{"PassedValue":[""],"DataType":1024},{"PassedValue":[""],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst5, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":25,"method":"encrypt_tst5","params":[{"ReturnedValue":true,"DataType":1},{"PassedValue":"hello","DataType":1},{"PassedValue":"world","DataType":1}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst6, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":26,"method":"encrypt_tst6","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"hello","DataType":1},{"PassedValue":"world","DataType":1}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst7, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":27,"method":"encrypt_tst7","params":[{"ReturnedValue":false},{"PassedValue":"qwertyuiopasdfghjklzxcvbnm","DataType":1}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst8, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":28,"method":"encrypt_tst8","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("Encrypt")}
        {TestMethod}
        public method encrypt_tst9, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchEncrypt('{"jsonrpc":"2.0","id":29,"method":"encrypt_tst9","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.endregion

.region "IF913"
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofAlphaOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":30,"method":"ALofAlphaOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofAlphas, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":31,"method":"ALofAlphas","params":[{"ReturnedValue":false},{"PassedValue":["","","","",""],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofDecimal, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":32,"method":"ALofDecimal","params":[{"ReturnedValue":false},{"PassedValue":[1,2,3,4,5],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofDecimalOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":33,"method":"ALofDecimalOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofImpDec, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":34,"method":"ALofImpDec","params":[{"ReturnedValue":false},{"PassedValue":[1.1, 2.2, 3.3, 4.4, 5.5],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofImpDecOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":35,"method":"ALofImpDecOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofInt, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":36,"method":"ALofInt","params":[{"ReturnedValue":false},{"PassedValue":[1,2,3,4,5],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofIntOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":37,"method":"ALofIntOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofStr, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":38,"method":"ALofStr","params":[{"ReturnedValue":false},{"PassedValue":[{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""}],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofStrOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":39,"method":"ALofStrOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofString, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":40,"method":"ALofString","params":[{"ReturnedValue":false},{"PassedValue":["","","","",""],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofStringOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":41,"method":"ALofStringOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofStruct1, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":42,"method":"ALofStruct1","params":[{"ReturnedValue":false},{"PassedValue":[{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""}],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method ALofStruct1out, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":43,"method":"ALofStruct1out","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofDateTime, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":44,"method":"AlofDateTime","params":[{"ReturnedValue":false},{"PassedValue":[20000101,20010202,20020303,20030404,20040505],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofDateTimeOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":45,"method":"AlofDateTimeOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofDecLong, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":46,"method":"AlofDecLong","params":[{"ReturnedValue":false},{"PassedValue":[1234567890,1234567890,1234567890,1234567890,1234567890],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofDecLongOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":47,"method":"AlofDecLongOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofDecShort, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":48,"method":"AlofDecShort","params":[{"ReturnedValue":false},{"PassedValue":[1234,5678,9012,3456,7890],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofDecShortOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":49,"method":"AlofDecShortOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofIDDouble, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":50,"method":"AlofIDDouble","params":[{"ReturnedValue":false},{"PassedValue":[12345.67,76543.21,12345.67,89012.34,543.21],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofIDDoubleOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":51,"method":"AlofIDDoubleOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofIntBool, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":52,"method":"AlofIntBool","params":[{"ReturnedValue":false},{"PassedValue":[1,0,1,1,0],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method AlofIntBoolOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":53,"method":"AlofIntBoolOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets variables passed in
        ;;; </summary>
        public method BoolStruct1, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":54,"method":"BoolStruct1","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method BoolStruct2Al, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":55,"method":"BoolStruct2Al","params":[{"ReturnedValue":false},{"PassedValue":[{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""}],"DataType":32}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method BoolStruct3Alout, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":56,"method":"BoolStruct3Alout","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets variables passed in, returns true
        ;;; </summary>
        public method BoolToBool, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":57,"method":"BoolToBool","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":0,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method CoercedStructure, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":58,"method":"CoercedStructure","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA":"","Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method DTALStructureOut, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":59,"method":"DTALStructureOut","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method DTArrayGroupStrs, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":60,"method":"DTArrayGroupStrs","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method DTALStructureIn, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":61,"method":"DTALStructureIn","params":[{"ReturnedValue":false},{"PassedValue":[{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""},{"GRFA":"","Value":""}],"DataType":32}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method DTCollection, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":62,"method":"DTCollection","params":[{"ReturnedValue":false},{"PassedValue":0,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method DTGroupStructs, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":63,"method":"DTGroupStructs","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns datetime 20071030053218
        ;;; </summary>
        public method DateTime14, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":64,"method":"DateTime14","params":[{"ReturnedValue":false},{"PassedValue":"20120221","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns datetime 07123
        ;;; </summary>
        public method Dateyyjjj, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":65,"method":"Dateyyjjj","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"02201","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns datetime 071030
        ;;; </summary>
        public method Dateyymmdd, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":66,"method":"Dateyymmdd","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"022012","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns datetime 2007103
        ;;; </summary>
        public method Dateyyyyjjj, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":67,"method":"Dateyyyyjjj","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"2012201","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns datetime 00000000
        ;;; </summary>
        public method Dateyyyymmdd, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":68,"method":"Dateyyyymmdd","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"20120221","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1 coerce dec to boolean
        ;;; </summary>
        public method DecBool, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":69,"method":"DecBool","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"1","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1 coerce dec to byte
        ;;; </summary>
        public method DecByte, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":70,"method":"DecByte","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"0","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 123456789012 coerce dec to dec
        ;;; </summary>
        public method DecDec, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":71,"method":"DecDec","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"20122012","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1234 coerce dec to int
        ;;; </summary>
        public method DecInt, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":72,"method":"DecInt","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"2012","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12345678 coerce dec to long
        ;;; </summary>
        public method DecLong, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":73,"method":"DecLong","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"20122012","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1 coerce dec to sbyte
        ;;; </summary>
        public method DecSbyte, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":74,"method":"DecSbyte","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"1","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12 coerce dec to short
        ;;; </summary>
        public method DecShort, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":75,"method":"DecShort","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"12","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1234 coerce dec to uint
        ;;; </summary>
        public method DecUint, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":76,"method":"DecUint","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"2012","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12345678 coerce dec to ulong
        ;;; </summary>
        public method DecUlong, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":77,"method":"DecUlong","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"201220122012","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12 coerce dec to ushort
        ;;; </summary>
        public method DecUshort, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":78,"method":"DecUshort","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"20","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1234.56 coerce id to decimal
        ;;; </summary>
        public method IDDecimal, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":79,"method":"IDDecimal","params":[{"ReturnedValue":true,"DataType":4},{"PassedValue":"2012.12","DataType":4}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1234.56 coerce id to double
        ;;; </summary>
        public method IDDouble, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":80,"method":"IDDouble","params":[{"ReturnedValue":true,"DataType":4},{"PassedValue":"2012.12","DataType":4}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1234.56 coerce id to float
        ;;; </summary>
        public method IDFloat, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":81,"method":"IDFloat","params":[{"ReturnedValue":true,"DataType":4},{"PassedValue":"2012.12","DataType":4}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1 coerce int to bool
        ;;; </summary>
        public method IntBool, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":82,"method":"IntBool","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":0,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1 coerce int to byte
        ;;; </summary>
        public method IntByte, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":83,"method":"IntByte","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":1,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1234 coerce int to int
        ;;; </summary>
        public method IntInt, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":84,"method":"IntInt","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":2012,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12345678 coerce int to long
        ;;; </summary>
        public method IntLong, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":85,"method":"IntLong","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":20122012,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1 coerce int to sbyte
        ;;; </summary>
        public method IntSbyte, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":86,"method":"IntSbyte","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":1,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12 coerce int to short
        ;;; </summary>
        public method IntShort, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":87,"method":"IntShort","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":20,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 1234 coerce int to uint
        ;;; </summary>
        public method IntUint, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":88,"method":"IntUint","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":2012,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12345678 coerce int to ulong
        ;;; </summary>
        public method IntUlong, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":89,"method":"IntUlong","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":20122012,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns 12 coerce int to ushort
        ;;; </summary>
        public method IntUshort, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":90,"method":"IntUshort","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":12,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns d14 datetime 20071030053218
        ;;; </summary>
        public method NDateTime14, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":91,"method":"NDateTime14","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"20120212","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns d8 datetime 00000000
        ;;; </summary>
        public method NDateyyyymmdd, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":92,"method":"NDateyyyymmdd","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"20220222","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets variables to DateTimeStr structure
        ;;; </summary>
        public method NullableDTStr, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":93,"method":"NullableDTStr","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA": "", "Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Sets structure variables in array
        ;;; </summary>
        public method NullableDTAry, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":94,"method":"NullableDTAry","params":[{"ReturnedValue":false},{"PassedValue":{"GRFA": "", "Value":""},"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method NullableDTStrAL, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":95,"method":"NullableDTStrAL","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":32}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method NullssAL, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":96,"method":"NullssAL","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":"1","DataType":2},{"PassedValue":"20120212","DataType":2},{"PassedValue":"hello","DataType":512},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns d4 datetime 0532
        ;;; </summary>
        public method Time4, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":97,"method":"Time4","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"2012","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Returns d6 datetime 053227
        ;;; </summary>
        public method Time6, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":98,"method":"Time6","params":[{"ReturnedValue":true,"DataType":2},{"PassedValue":"201221","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method TrueString, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":99,"method":"TrueString","params":[{"ReturnedValue":true,"DataType":512},{"PassedValue":"world","DataType":512}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("IF913")}
        {TestMethod}
        ;;; <summary>
        ;;; Opens TEST:if913.log, writes variables
        ;;; </summary>
        public method TrueStringParmOnly, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchIF913('{"jsonrpc":"2.0","id":100,"method":"TrueStringParmOnly","params":[{"ReturnedValue":true,"DataType":512},{"PassedValue":"hithere","DataType":512}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.region "data64k"
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method BinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":180,"method":"BinaryArrayTest","params":[{"ReturnedValue":true,"DataType":8},{"PassedValue":"12345","DataType":2},{"PassedValue":"","DataType":128},{"PassedValue":"helloworld","DataType":1},{"PassedValue":"","DataType":128},{"PassedValue":"12345.67","DataType":4},{"PassedValue":"","DataType":128},{"PassedValue":"20122","DataType":2}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method inBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":181,"method":"inBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method inHandle, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":182,"method":"inHandle","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method inOutBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":183,"method":"inOutBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method inoutHandle, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":184,"method":"inoutHandle","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method inoutHandle2, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":185,"method":"inoutHandle2","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method outBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":186,"method":"outBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method outFileBinaryArrayTest, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":187,"method":"outFileBinaryArrayTest","params":[{"ReturnedValue":false},{"PassedValue":"helloworld","DataType":1},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method outHandle, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":188,"method":"outHandle","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
        
        {TestCategory("data64k")}
        {Ignore("Missing support for HANDLE")}
        {TestMethod}
        public method twoparmsrtn, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchdata64k('{"jsonrpc":"2.0","id":189,"method":"twoparmsrtn","params":[{"ReturnedValue":false},{"PassedValue":"","DataType":128},{"PassedValue":"helloworld","DataType":1}}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.endregion
        
.region "BinaryTransfer"
        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method CreateGRFAFile, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":190,"method":"CreateGRFAFile","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method DeleteGRFAFile, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":191,"method":"DeleteGRFAFile","params":[{"ReturnedValue":false}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getarraylist, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":192,"method":"getarraylist","params":[{"ReturnedValue":false},{"PassedValue":[],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getbyte, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":193,"method":"getbyte","params":[{"ReturnedValue":false},{"PassedValue":1,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getbytea, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":194,"method":"getbytea","params":[{"ReturnedValue":false},{"PassedValue":[1],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getstruct, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":195,"method":"getstruct","params":[{"ReturnedValue":false},{"PassedValue":[{"GRFA": "", "Value":""}],"DataType":16}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getstructa, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":196,"method":"getstructa","params":[{"ReturnedValue":false},{"PassedValue":[{"GRFA": "", "Value":""}],"DataType":32}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getuint, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":197,"method":"getuint","params":[{"ReturnedValue":false},{"PassedValue":2012,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getuinta, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":198,"method":"getuinta","params":[{"ReturnedValue":false},{"PassedValue":[2012],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getushort, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":199,"method":"getushort","params":[{"ReturnedValue":false},{"PassedValue":12,"DataType":8}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method getushorta, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":200,"method":"getushorta","params":[{"ReturnedValue":false},{"PassedValue":[20,12],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method setbytea, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":201,"method":"setbytea","params":[{"ReturnedValue":false},{"PassedValue":[2,0,1,2],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod

        {TestCategory("BinaryTransfer")}
        {TestMethod}
        public method setushorta, void
            endparams
            record
                dispatchResult, @string
        proc
            dispatchResult = DispatchRunner.RemoveMessageHeader(DispatchRunner.RunDispatchBinaryTransfer('{"jsonrpc":"2.0","id":202,"method":"setushorta","params":[{"ReturnedValue":false},{"PassedValue":[20,12],"DataType":1024}]}'))
            DispatchRunner.EnsureSuccess(dispatchResult)
        endmethod
.endregion

    endclass
endnamespace