# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: 6.0.$(Rev:r)

parameters:
  - name: PublishProjects
    type: object
    default:
      - HarmonyCore.Test
      - Services.Test.CS
      - Services.Test
      - Services.Host

stages:
- stage: build

  displayName: 'Main Build'
  jobs: 
  - job: BuildJob
    workspace:
      clean: all
    pool:
      name: Synergy-10-3-3Build
    strategy:
      maxParallel: 4
      matrix:
#        Debug_x64:
#          Configuration: Debug
#          Platform: x64
        Release_x64:
          Configuration: Release
          Platform: x64
          RID: win-x64
#        Debug_x86:
#          Configuration: Debug
#          Platform: x86
#        Release_x86:
#          Configuration: Release
#          Platform: x86
        # Release_linux:
        #   Configuration: Release
        #   Platform: linux64
        #   RID: linux-x64
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 1
      fetchTags: false
    - task: UseDotNet@2
      displayName: 'Get .NET SDK 7.0.x'
      inputs:
        packageType: 'sdk'
        version: '7.0.x'
    - task: NuGetToolInstaller@1
      displayName: 'Get NuGet 6.x'
      inputs:
        versionSpec: 5.x
        checkLatest: true
    #- task: NuGetCommand@2
    #  displayName: 'NuGet restore'
    #  inputs:
    #    command: 'restore'
    #    restoreSolution: '**/*.sln'
        #feedsToUse: 'select'
        #vstsFeed: '632eef26-b5e5-49d5-83f0-091dbb16477c'
    - task: MSBuild@1
      displayName: 'restore solution'
      inputs:
        solution: '$(HarmonyCoreSln)'
        msbuildArchitecture: 'x64'
        platform: $(Platform)
        configuration: $(Configuration)
        msbuildArguments: '-t:restore'
        logFileVerbosity: diagnostic
        clean: false
    - task: MSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(HarmonyCoreSln)'
        msbuildArchitecture: 'x64'
        platform: $(Platform)
        configuration: $(Configuration)
        logFileVerbosity: diagnostic
        clean: false

    # publish cli tool
    - task: DotNetCoreCLI@2
      condition: and(eq(variables['Platform'], 'x64'), eq(variables['Configuration'], 'Release'))
      displayName: 'Publish HarmonyCore.CliTool'
      inputs:
        command: publish
        publishWebProjects: false
        arguments: '-r=$(RID) -c $(Configuration) -o $(Build.ArtifactStagingDirectory)'
        verbosityPack: Diagnostic
        zipAfterPublish: True
        projects: |
          HarmonyCore.CliTool

    - task: PublishPipelineArtifact@1
      condition: and(eq(variables['Platform'], 'x64'), eq(variables['Configuration'], 'Release'))
      displayName: 'Publish HarmonyCore.CliTool as Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'HarmonyCore.CliTool'

    - task: DeleteFiles@1
      displayName: 'Clean ArtifactStagingDirectory'
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)'
        Contents: '**/*'

    # publish test binaries
    - ${{ each project in parameters.PublishProjects }}:
      - task: DotNetCoreCLI@2
        displayName: 'Publish ${{ project }} Binaries'
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '-r=$(RID) -c $(Configuration) -o $(Build.ArtifactStagingDirectory)/${{ project }}'
          verbosityPack: Diagnostic
          zipAfterPublish: True
          projects: |
            ${{ project }}

    # for linux only build TraditionalBridge.Test in x86 
    - task: MSBuild@1
      displayName: "Build 32 bit TraditionalBridge.Test.dbr"
      condition: and(eq(variables['Platform'], 'linux64'), eq(variables['Configuration'], 'Release'))
      inputs:
        solution: 'TraditionalBridge.Test'
        msbuildArchitecture: 'x64'
        platform: 'x86'
        configuration: 'Release'
      env: 
        TestDirX86: '\x86\'

    # for windows only copy TraditionalBridge.UnitTest/TBTest
    - task: CopyFiles@2
      condition: ne(variables['Platform'], 'linux64')
      displayName: "Copy TraditionalBridge.UnitTest/TBTest"
      inputs:
        SourceFolder: '$(SolutionDir)TraditionalBridge.UnitTest/TBTest'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/TraditionalBridge.UnitTest/TBTest'

    - task: CopyFiles@2
      displayName: "Copy TestDir"
      inputs:
        SourceFolder: '$(SolutionDir)TestDir'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/TestDir'

    - task: CopyFiles@2
      displayName: "Copy SampleData"
      inputs:
        SourceFolder: '$(SolutionDir)SampleData'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/SampleData'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Test Binaries as Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'TestArtifacts$(Configuration)$(Platform)'

    - task: DeleteFiles@1
      displayName: 'Clean ArtifactStagingDirectory'
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)'
        Contents: '**/*'
          
    - task: DotNetCoreCLI@2
      displayName: 'Pack CLI Tool'
      inputs:
        command: 'pack'
        arguments: '-c $(Configuration)'
        projects: |
            **/HarmonyCore.CLITool.csproj

    - task: NuGetCommand@2
      name: 'HarmonyCoreNuget'
      displayName: 'Pack HarmonyCore'
      inputs:
        command: 'pack'
        packagesToPack: '*.nuspec'
        versioningScheme: 'byBuildNumber'
    
    - task: NuGetCommand@2
      condition: and(eq(variables['Platform'], 'x64'), eq(variables['Configuration'], 'Release'))
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/Harmony.*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'HarmonyCore'

    - publish: '$(Build.ArtifactStagingDirectory)/'
      displayName: 'Publish nuget packages'
      artifact: 'NugetPackages$(Configuration)$(Platform)'

  # - job: TestJob
  #   dependsOn: BuildJob
  #   workspace:
  #     clean: all
  #   pool:
  #     name: $(AgentPool)
  #     demands: 
  #       - agent.name -equals $(AgentName)
  #   strategy:
  #     maxParallel: 4
  #     matrix:
  #       Release_x64:
  #         Configuration: Release
  #         Platform: x64
  #         AgentPool: Synergy-10-3-3Build
  #         AgentName: HARMONYDEVMAIN-
  #       Release_linux:
  #        Configuration: Release
  #        Platform: linux64
  #        AgentPool: Default
  #        AgentName: moe64
  #   steps:
  #     - checkout: none

  #     - task: UseDotNet@2
  #       displayName: 'Get .NET SDK 6.0.x'
  #       inputs:
  #         packageType: 'sdk'
  #         version: '6.0.x'

  #     - download: current
  #       displayName: "Download Artifacts"
  #       artifact: 'TestArtifacts$(Configuration)$(Platform)'

  #     # # for testing purposes reuse already published sde artifacts
  #     # - task: DownloadPipelineArtifact@2
  #     #   inputs:
  #     #     buildType: specific
  #     #     project: HarmonyWebServices
  #     #     definition: 31
  #     #     pipelineId: 15541
  #     #     runVersion: specific
  #     #     allowPartiallySucceededBuilds: true
  #     #     artifactName: 'TestArtifacts$(Configuration)$(Platform)'
  #     #     targetPath: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)'

  #     - task: Bash@3
  #       condition: and(eq(variables['Platform'], 'linux64'), eq(variables['Configuration'], 'Release'))
  #       displayName: "Run setsde"
  #       inputs:
  #         targetType: 'inline'
  #         script: |
  #           . setsde
  #           echo "##vso[task.setvariable variable=DBLDIR]$DBLDIR"
  #         workingDirectory: $(Agent.HomeDirectory)

  #     # unzip each project and run test
  #     - ${{ each project in parameters.PublishProjects }}:
  #       - task: ExtractFiles@1
  #         displayName: "Extract ${{ project }}"
  #         inputs:
  #           archiveFilePatterns: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/${{ project }}/*.zip'
  #           destinationFolder: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/${{ project }}'
  #           cleanDestinationFolder: false
  #           overwriteExistingFiles: false

  #     - task: DotNetCoreCLI@2
  #       displayName: 'Run HarmonyCore.Test'
  #       inputs:
  #         command: 'test'
  #         testRunTitle: "HarmonyCore.Test $(Platform)"
  #         arguments: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/HarmonyCore.Test/HarmonyCore.Test.dll'

  #     - task: DotNetCoreCLI@2
  #       displayName: 'Run Services.Test.CS'
  #       inputs:
  #         command: 'test'
  #         testRunTitle: "Services.Test.CS $(Platform)"
  #         arguments: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/Services.Test.CS/Services.Test.CS.dll'

  #     - task: DotNetCoreCLI@2
  #       displayName: 'Run Services.Test'
  #       inputs:
  #         command: 'test'
  #         testRunTitle: "Services.Test $(Platform)"
  #         arguments: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/Services.Test/Services.Test.dll'

  #     # for Windows only copy TraditionalBridge.UnitTest to s folder and run TraditionalBridge.UnitTest
  #     - task: CopyFiles@2
  #       condition: ne(variables['Platform'], 'linux64')
  #       displayName: "Copy TraditionalBridge.UnitTest/TBTest"
  #       inputs:
  #         SourceFolder: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/TraditionalBridge.UnitTest'
  #         Contents: '**'
  #         TargetFolder: '$(Build.SourcesDirectory)/TraditionalBridge.UnitTest'

  #     - task: DotNetCoreCLI@2
  #       condition: ne(variables['Platform'], 'linux64')
  #       displayName: 'Run TraditionalBridge.UnitTest'
  #       inputs:
  #         command: 'test'
  #         testRunTitle: "TraditionalBridge.UnitTest $(Platform)"
  #         arguments: '$(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/TestDir/TraditionalBridge.UnitTest.elb --test-adapter-path $(Pipeline.Workspace)/TestArtifacts$(Configuration)$(Platform)/TestDir/SynergyTraditionalUnitTest.TestAdapter.dll'

  - job: BuildHarmonyCoreProjects
    dependsOn: BuildJob
    workspace:
      clean: all
    pool:
      name: Synergy-10-3-3Build
    strategy:
      maxParallel: 4
      matrix:
        Basic: 
          project: basic
        # Tb:
        #   project: tb
        # TbStruct:
        #   project: tbstruct
    variables:
    - name: clitool
      value: $(Pipeline.Workspace)\HarmonyCore.CliTool\Harmony.Core.CliTool.exe
    steps:
    - checkout: https://github.com/Synergex/HarmonyCoreSamples.git
      clean: true

    - task: CopyFiles@2
      condition: ne(variables.project, 'basic')
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\$(project)'
        Contents: '**'
        TargetFolder: '$(Pipeline.Workspace)\$(project)'

    - task: UseDotNet@2
      displayName: 'Get .NET SDK 7.0.x'
      inputs:
        packageType: 'sdk'
        version: '7.0.x'
  
    - task: CmdLine@2
      displayName: "Install Harmony Core templates"
      inputs:
        script: |
          dotnet new install Harmony.Core.ProjectTemplates

    - task: CmdLine@2
      displayName: "Create new project from a template"
      inputs:
        script: |
          dotnet new harmonycore -o $(project)
        workingDirectory: '$(Pipeline.Workspace)'

    # download clitools
    - download: current
      displayName: "Download Artifacts"
      artifact: 'HarmonyCore.CliTool'

    - task: ExtractFiles@1
      displayName: "Extract HarmonyCore.CliTool"
      inputs:
        archiveFilePatterns: '$(Pipeline.Workspace)/HarmonyCore.CliTool/*.zip'
        destinationFolder: '$(Pipeline.Workspace)/HarmonyCore.CliTool'
        cleanDestinationFolder: false
        overwriteExistingFiles: false

    - task: CmdLine@2
      displayName: "Run harmonycore upgrade-latest"
      inputs:
        script: |
          set solutiondir=$(Pipeline.Workspace)\$(project)
          echo YES| ${{ variables.clitool }} upgrade-latest
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: CmdLine@2
      displayName: "Run harmonycore regen"
      inputs:
        script: |
          set solutiondir=$(Pipeline.Workspace)\$(project)
          ${{ variables.clitool }} regen
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: CmdLine@2
      displayName: "Add Structures"
      inputs:
        script: |
          set solutiondir=$(Pipeline.Workspace)\$(project)
          ${{ variables.clitool }} codegen-add --structure --odata --ef -i CUSTOMERS ITEMS ORDERS ORDER_ITEMS VENDORS
          ${{ variables.clitool }} regen -p
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Add PK generator and StartupCustom to Services.synproj" 
      inputs:
        targetType: 'inline'
        script: |
          $filename =  ".\Services.synproj"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if ($_ -like '*<Compile Include="Startup.dbl" />*')
            {
              $updatedContent += '<Compile Include="PrimaryKeyGenerator.dbl" />'
              $updatedContent += '<Compile Include="StartupCustom.dbl" />'
            }
            $updatedContent += $_
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: CmdLine@2
      condition: ne(variables.project, 'basic')
      displayName: "Add Traditional Bridge"
      inputs:
        script: |
          set solutiondir=$(Pipeline.Workspace)\$(project)
          ${{ variables.clitool }} features --add-tb
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Update host.dbl" 
      inputs:
        targetType: 'inline'
        script: |
          $filename =  ".\host.dbl"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if ($_ -like '*dispatcher = new SuperRoutineDispatcher(MethodDispatcher.GetDispatchers())*')
            {
              $updatedContent += 'dispatcher = new SuperRoutineDispatcher(new RoutineDispatcher[#] { new BridgeMethodsDispatcher() })'
            }
            else
            {
              $updatedContent += $_
            }
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Update platform for TB" 
      inputs:
        targetType: 'inline'
        script: |
          $guid = 'empty'
          $filename = ".\$(project).sln"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if ($_ -like '*TraditionalBridge\TraditionalBridge.synproj*') {	
              $guid = $_ -split ',' | Select-String -Pattern '\{.*\}' -AllMatches | % { $_.Matches } | % { $_.Value } | Select-Object -Last 1
            }
            if ($_ -like "*$guid*" -and ($_ -like "*Any CPU.ActiveCfg*" -or $_ -like "*Any CPU.Build.0*")) {
              $lastIndex = $_.LastIndexOf("Any CPU")
              $replacedplatform = $_.Substring(0, $lastIndex) + "x64" + $_.Substring($lastIndex + "Any CPU".Length)
              $_ = $replacedplatform 
            }
            $updatedContent += $_
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Update output path for TB" 
      inputs:
        targetType: 'inline'
        script: |
          $filename = ".\TraditionalBridge.synproj"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if ($_ -like '*<OutputPath>*') {
                $_ = '<OutputPath>$(SolutionDir)TBEXE\$(Configuration)</OutputPath>'
            }
            if ($_ -like '*<UnevaluatedOutputPath>*') {
                $_ = '<UnevaluatedOutputPath>$(SolutionDir)TBEXE\$(Configuration)</UnevaluatedOutputPath>'
            }
            $updatedContent += $_
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)\TraditionalBridge'

    - task: CmdLine@2
      condition: ne(variables.project, 'basic')
      displayName: "Enable SMC import and run upgrade-latest"
      inputs:
        script: |
          set solutiondir=$(Build.SourcesDirectory)
          %clitool% features --smc $(Pipeline.Workspace)\$(project)\TraditionalBridge\MethodCatalog\MethodDefinitions.xml
          echo run upgrade-latest
          echo YES| %clitool% upgrade-latest
        workingDirectory: '$(Pipeline.Workspace)\$(project)\TraditionalBridge'

    - task: PowerShell@2
      condition: eq(variables.project, 'tb')
      displayName: "Add methods to TraditionalBridge.synproj Tb" 
      inputs:
        targetType: 'inline'
        script: |
          $filename =  ".\TraditionalBridge.synproj"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if ($_ -like '*<Compile Include="Source\host.dbl" />*')
            {
              $updatedContent += '<Compile Include="Source\Methods\AddTwoNumbers.dbl" />'
              $updatedContent += '<Compile Include="Source\Methods\GetEnvironment.dbl" />'
              $updatedContent += '<Compile Include="Source\Methods\GetLogicalName.dbl" />'
            }
            $updatedContent += $_
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)\TraditionalBridge'

    - task: PowerShell@2
      condition: eq(variables.project, 'tbstruct')
      displayName: "Add methods to TraditionalBridge.synproj TbStruct" 
      inputs:
        targetType: 'inline'
        script: |
          $filename =  ".\TraditionalBridge.synproj"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if ($_ -like '*<Compile Include="Source\host.dbl" />*')
            {
              $updatedContent += '<Compile Include="Source\Methods\GetAllCustomers.dbl" />'
              $updatedContent += '<Compile Include="Source\Methods\GetCustomer.dbl" />'
              $updatedContent += '<Compile Include="Source\Methods\ManyCustomers.dbl" />'
              $updatedContent += '<Compile Include="Source\Methods\OneCustomer.dbl" />'
              $updatedContent += '<Compile Include="Source\Methods\ReturnCustomer.dbl" />'
            }
            $updatedContent += $_
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)\TraditionalBridge'

    - task: CmdLine@2
      condition: ne(variables.project, 'basic')
      displayName: "Add BridgeMethods interface"
      inputs:
        script: |
          set solutiondir=$(Build.SourcesDirectory)
          %clitool% codegen-add --interface --webapi -i BridgeMethods
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: PowerShell@2
      condition: eq(variables.project, 'basic')
      displayName: "Set ODATA Options"
      inputs:
        targetType: 'inline'
        script: |
          $options=@'
          ,
          "FullCollectionEndpoints": true,
          "PrimaryKeyEndpoints": true,
          "AlternateKeyEndpoints": true,
          "CollectionCountEndpoints": true,
          "IndividualPropertyEndpoints": true,
          "PutEndpoints": true,
          "PostEndpoints": true,
          "PatchEndpoints": true,
          "DeleteEndpoints": true,
          "ODataSelect": true,
          "ODataFilter": true,
          "ODataOrderBy": true,
          "ODataTop": true,
          "ODataSkip": true,
          "ODataRelations": true,
          "ODataRelationValidation": true,
          "CreateTestFiles": true,
          "GenerateUnitTests": true,
          "DocumentPropertyEndpoints": true,
          "GenerateOData": true
          }
          '@
          $filename = 'Harmony.Core.CodeGen.json'
          $file = Get-Content $filename
          if ($file[$file.length - 1] -eq '}') 
          {
            $file[$file.length - 1] = $options
            $file | Set-Content $filename	
          }
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: CmdLine@2
      condition: eq(variables.project, 'basic')
      displayName: "Add unit tests"
      inputs:
        script: |
          set solutiondir=$(Pipeline.Workspace)\$(project)
          %clitool% features --add-unit-tests
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: CmdLine@2
      displayName: "Run regen -p and upgrade-latest"
      inputs:
        script: |
          set solutiondir=$(Pipeline.Workspace)\$(project)
          %clitool% regen -p
          echo YES| %clitool% upgrade-latest
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Remove BridgeMethodsTestResponses.dbl from TraditionalBridge.synproj" 
      inputs:
        targetType: 'inline'
        script: |
          $filename =  ".\TraditionalBridge.synproj"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if (-not ($_ -like '*<Compile Include="Source/Methods/BridgeMethodsTestResponses.dbl" />*'))
            {
              $updatedContent += $_
            }
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)\TraditionalBridge'

    - task: DotNetCoreCLI@2
      condition: eq(variables.project, 'basic')
      displayName: "Build the project"
      inputs:
        command: 'build'
        projects: '$(Pipeline.Workspace)\$(project)'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      condition: eq(variables.project, 'basic')
      displayName: "Run Services.Test"
      inputs:
        command: 'test'
        projects: '$(Pipeline.Workspace)\$(project)\Services.Test'
        testRunTitle: "Services.Test Basic Solution"
      env:
        SolutionDir: '$(Pipeline.Workspace)\$(project)'

    - task: VSBuild@1
      condition: ne(variables.project, 'basic')
      displayName: "Build the project"
      inputs:
        solution: '$(project).sln'
        configuration: 'Release'
        restoreNugetPackages: true

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Run the host and test the endpoint" 
      inputs:
        targetType: 'inline'
        script: |
          $env:solutiondir="$(Pipeline.Workspace)\$(project)\"
          $env:exedir="$env:solutiondir\tbexe\release"
          $process = start-process powershell '-c', {dotnet run} -passthru -windowstyle hidden
          sleep 40
          $res = curl.exe https://localhost:8086/BridgeMethods/AddTwoNumbers -k -X POST -H "Content-Type: application/json" -d '{ "number1": 1, "number2":2 }'
          taskkill /pid $process.id
          $res
          if ($res -ne '{"result":3.0000000000}') {
            echo Error occured during POST request
            exit -1 
          }
        workingDirectory: '$(Pipeline.Workspace)\$(project)\Services.Host'

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Update JSON to enable Authentication" 
      inputs:
        targetType: 'inline'
        script: |
          $options=@'
          ,
          "Authentication": true,
          "CustomAuthentication": true
          }
          '@
          $filename = 'Harmony.Core.CodeGen.json'
          $file = Get-Content $filename
          if ($file[$file.length - 1] -eq '}') 
          {
            $file[$file.length - 1] = $options
            $file | Set-Content $filename	
          }
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: CmdLine@2
      condition: ne(variables.project, 'basic')
      displayName: "Run regen -p"
      inputs:
        script: |
          set solutiondir=$(Pipeline.Workspace)\$(project)
          %clitool% regen -p
        workingDirectory: '$(Pipeline.Workspace)\$(project)'

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Remove BridgeMethodsTestResponses.dbl from TraditionalBridge.synproj" 
      inputs:
        targetType: 'inline'
        script: |
          $filename =  ".\TraditionalBridge.synproj"
          $updatedContent = @()
          Get-Content -Path $filename | ForEach-Object {
            if (-not ($_ -like '*<Compile Include="Source/Methods/BridgeMethodsTestResponses.dbl" />*'))
            {
              $updatedContent += $_
            }
          }
          $updatedContent | Set-Content $filename
        workingDirectory: '$(Pipeline.Workspace)\$(project)\TraditionalBridge'

    - task: VSBuild@1
      condition: ne(variables.project, 'basic')
      displayName: "Build the project"
      inputs:
        solution: '$(project).sln'
        configuration: 'Release'
        restoreNugetPackages: true

    - task: PowerShell@2
      condition: ne(variables.project, 'basic')
      displayName: "Run the host and test the endpoint AUTH" 
      inputs:
        targetType: 'inline'
        script: |
          $env:solutiondir="$(Pipeline.Workspace)\$(project)\"
          $env:exedir="$env:solutiondir\tbexe\release"
          $process = start-process powershell '-c', {dotnet run} -passthru -windowstyle hidden
          sleep 40
          $token = curl.exe https://localhost:8086/Authentication/GetToken -k -X POST -H "Content-Type: application/json" -d '{ \"Username\": \"username\", \"Password\": \"password\" }'
          $res = curl.exe https://localhost:8086/BridgeMethods/AddTwoNumbers -k -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d '{ "number1": 1, "number2":2 }'
          $res
          if ($res -ne '{"result":3.0000000000}') {
            echo Error occured during POST request
            taskkill /pid $process.id
            exit -1 
          }
          $res = curl.exe https://localhost:8086/BridgeMethods/AddTwoNumbers -k -X POST -H "Content-Type: application/json" -d '{ "number1": 1, "number2":2 }'
          $res
          if ($res -ne $null) {
            echo Error response should be null
            taskkill /pid $process.id
            exit -1 
          }
          $res = curl.exe https://localhost:8086/BridgeMethods/AddTwoNumbers -k -X POST -H "Content-Type: application/json" -H "Authorization: Bearer hello" -d '{ "number1": 1, "number2":2 }'
          $res
          if ($res -ne $null) {
            echo Error response should be null
            taskkill /pid $process.id
            exit -1 
          }
          taskkill /pid $process.id
        workingDirectory: '$(Pipeline.Workspace)\$(project)\Services.Host'