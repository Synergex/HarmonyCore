# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: 3.1.$(Rev:r)

stages:
- stage: build

  displayName: 'Main Build'
  jobs: 
  - job: BuildJob
    workspace:
      clean: all
    pool:
      name: Synergy-10-3-3Build
    strategy:
      maxParallel: 4
      matrix:
#        Debug_x64:
#          Configuration: Debug
#          Platform: x64
        Release_x64:
          Configuration: Release
          Platform: x64
#        Debug_x86:
#          Configuration: Debug
#          Platform: x86
#        Release_x86:
#          Configuration: Release
#          Platform: x86
#        Release_linux:
#          Configuration: Release
#          Platform: linux64
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 5.x
        checkLatest: true
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'select'
    - task: MSBuild@1
      inputs:
        solution: '$(HarmonyCoreSln)'
        msbuildArchitecture: 'x64'
        platform: $(Platform)
        configuration: $(Configuration)
        restoreNugetPackages: true
        logFileVerbosity: diagnostic
        clean: false

#    - publish: '$(Pipeline.Workspace)\\s\\TestDir'
#      displayName: 'Publish Linux TB DBR'
#      condition: and(eq(variables['Platform'], 'linux64'), eq(variables['Configuration'], 'Release'))
#      artifact: TraditionalBridgeDBR

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=RPSMFIL;]$env:SolutionDir\HarmonyCore.Test.Repository\bin\Debug\rpsmain.ism"
          Write-Host "##vso[task.setvariable variable=RPSTFIL;]$env:SolutionDir\HarmonyCore.Test.Repository\bin\Debug\rpstext.ism"
    - task: BatchScript@1
      inputs:
        filename: 'regen.bat'
    - task: DotNetCoreCLI@2
      enabled: false
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        arguments: '-c $(Configuration)'
        projects: |
          HarmonyCore.Test
          Services.Test

#   - task: DotNetCoreCLI@2
#     displayName: 'Publish Linux Test Binaries'
#     condition: and(eq(variables['Platform'], 'linux64'), eq(variables['Configuration'], 'Release'))
#     inputs:
#       command: 'custom'
#       custom: 'publish'
#       publishWebProjects: false
#       arguments: '-r=linux-x64 -c Release'
#       projects: |
#         Services.Host
#         Services.Test
#         HarmonyCore.Test
#       verbosityPack: Diagnostic
#   - task: DotNetCoreCLI@2
#     enabled: true
#     displayName: 'dotnet bug workaround'
#     condition: and(eq(variables['Platform'], 'x64'), eq(variables['Configuration'], 'Release'))
#     inputs:
#       command: 'custom'
#       custom: 'clean'
#       arguments: '-c Release'
#       publishWebProjects: false
#       projects: Services.Host
#       verbosityPack: Diagnostic
#   - task: DotNetCoreCLI@2
#     enabled: true
#     displayName: 'Publish Windows Test Binaries'
#     condition: and(eq(variables['Platform'], 'x64'), eq(variables['Configuration'], 'Release'))
#     inputs:
#       command: 'custom'
#       custom: 'publish'
#       arguments: '-v detailed -r=win7-x64 -c Release'
#       publishWebProjects: false
#       projects: Services.Host
#       verbosityPack: Diagnostic

    - task: NuGetCommand@2
      name: 'HarmonyCoreNuget'
      displayName: 'Pack HarmonyCore'
      inputs:
        command: 'pack'
        packagesToPack: '*.nuspec'
        versioningScheme: 'byBuildNumber'
    - task: NuGetCommand@2
      condition: ne(variables['Build.Reason'], 'PullRequest')
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'HarmonyBuild'

#    - publish: '$(Pipeline.Workspace)\\s\\Services.Host\\bin\\Release\\netcoreapp3.1\\publish'
#      displayName: 'Publish Linux Services.Host Artifact'
#      condition: and(eq(variables['Platform'], 'linux64'), eq(variables['Configuration'], 'Release'))
#      artifact: LinuxWebApp
#    - publish: '$(Pipeline.Workspace)\\s\\Services.Host\\bin\\x64\\Release\\netcoreapp3.1\\win7-x64\\'
#      displayName: 'Publish Windows Services.Host Artifact'
#      condition: and(eq(variables['Platform'], 'x64'), eq(variables['Configuration'], 'Release'))
#      artifact: WindowsWebApp
#    - publish: '$(Pipeline.Workspace)\\s\\Services.Test\\bin\\Release\\netcoreapp3.1\\publish'
#      displayName: 'Publish Linux Services.Test Artifact'
#      condition: and(eq(variables['Platform'], 'linux64'), eq(variables['Configuration'], 'Release'))
#      artifact: LinuxServicesTest
#    - publish: '$(Pipeline.Workspace)\\s\\HarmonyCore.Test\\bin\\Release\\netcoreapp3.1\\publish'
#      displayName: 'Publish Linux HarmonyCore.Test Artifact'
#      condition: and(eq(variables['Platform'], 'linux64'), eq(variables['Configuration'], 'Release'))
#      artifact: LinuxHarmonyCoreTest
    - publish: '$(Build.ArtifactStagingDirectory)/'
      displayName: 'Publish nuget packages'
      artifact: NugetPackages
#  - job: LinuxTest
#    dependsOn: BuildJob
#    pool:
#      name: Linux-test
#    steps:
#      - task: DownloadPipelineArtifact@2
#        inputs:
#          buildType: 'current'
#          artifactName: LinuxServicesTest
#          targetPath: '$(Pipeline.Workspace)/LinuxServicesTest'
#      - task: DownloadPipelineArtifact@2
#        inputs:
#          buildType: 'current'
#          artifactName: LinuxHarmonyCoreTest
#          targetPath: '$(Pipeline.Workspace)/LinuxHarmonyCoreTest'
#      - task: DownloadPipelineArtifact@2
#        inputs:
#          buildType: 'current'
#          artifactName: LinuxWebApp
#          targetPath: '$(Pipeline.Workspace)/LinuxWebApp'
#      - task: DotNetCoreCLI@2
#        inputs:
#          command: 'custom'
#          custom: 'vstest'
#          arguments: 'HarmonyCore.Test.dll'
#          workingDirectory: '$(Pipeline.Workspace)/LinuxHarmonyCoreTest'
#      - task: DotNetCoreCLI@2
#        inputs:
#          command: 'custom'
#          custom: 'vstest'
#          arguments: 'Services.Test.dll'
#          workingDirectory: '$(Pipeline.Workspace)/LinuxHarmonyCoreTest'
