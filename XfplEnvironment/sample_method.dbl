import System.Collections

.region "Misc"
{xfMethod(name="SimpleParameters", interface="SampleXfplEnv", elb="sample_xfpl_env")}
subroutine simple_parameters
	
	;Alpha parameters
	required in    p1, a1
	required out   p2, a1
	required inout p3, a1

	;Small decimal parameters (int)
	required in    p4, d6
	required out   p5, d6
	required inout p6, d6

	;Long decimal parameters (long)
	required in    p7, d12
	required out   p8, d12
	required inout p9, d12

	;Implied decimal parameters
	required in    p10, d6.2
	required out   p11, d6.2
	required inout p12, d6.2

	;Integer parameters (byte)
	required in    p13, i1
	required out   p14, i1
	required inout p15, i1

	;Integer parameters (short)
	required in    p16, i2
	required out   p17, i2
	required inout p18, i2

	;Integer parameters (int)
	required in    p19, i4
	required out   p20, i4
	required inout p21, i4

	;Integer parameters (long)
	required in    p22, i8
	required out   p23, i8
	required inout p24, i8

	;Struct field parameters
	required in    p25, strCustomer
	required out   p26, strCustomer
	required inout p27, strCustomer

	;;Date parameters (YYYYMMDD)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
	required in    p28, d8
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
	required out   p29, d8
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
	required inout p30, d8

	;;Date parameters (YYMMDD)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
	required in    p31, d6
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
	required out   p32, d6
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
	required inout p33, d6

	;;Date parameters (YYYYJJJ)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
	required in    p34, d7
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
	required out   p35, d7
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
	required inout p36, d7

	;;Date parameters (YYJJJ)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
	required in    p37, d5
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
	required out   p38, d5
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
	required inout p39, d5

	;;Time parameters (HHMMSS)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
	required in    p40, d6
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
	required out   p41, d6
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
	required inout p42, d6

	;;Time parameters (HHMM)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
	required in    p43, d4
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
	required out   p44, d4
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
	required inout p45, d4

	;;Timestamp parameters (YYYYMMDDHHMISS)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
	required in    p46, d14
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
	required out   p47, d14
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
	required inout p48, d14

	;;Timestamp parameters (YYYYMMDDHHMISSUUUUUU)
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
	required in    p49, d20
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
	required out   p50, d20
	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
	required inout p51, d20

	;Enum parameters
	required in    p52, METHOD_STATUS
	required out   p53, METHOD_STATUS
	required inout p54, METHOD_STATUS

	;;Handle parameters
	{xfParameter(type=SynType.handle)}
	required in    p55, D_HANDLE
	{xfParameter(type=SynType.handle)}
	required out   p56, D_HANDLE
	{xfParameter(type=SynType.handle)}
	required inout p57, D_HANDLE

	;;Binary handle parameters
	{xfParameter(type=SynType.binaryhandle)}
	required in    p58, D_HANDLE
	{xfParameter(type=SynType.binaryhandle)}
	required out   p59, D_HANDLE
	{xfParameter(type=SynType.binaryhandle)}
	required inout p60, D_HANDLE

proc
	xreturn
endsubroutine

{xfMethod(name="ArrayParameters", interface="SampleXfplEnv", elb="sample_xfpl_env")}
subroutine array_parameters

	;Alpha parameters
	required in    p1, [*]a1
	required out   p2, [*]a1
	required inout p3, [*]a1

;	;Small decimal parameters (int)
;	required in    p4, [*]d6
;	required out   p5, [*]d6
;	required inout p6, [*]d6
;
;	;Long decimal parameters (long)
;	required in    p7, [*]d12
;	required out   p8, [*]d12
;	required inout p9, [*]d12
;
;	;Implied decimal parameters
;	required in    p10, [*]d6.2
;	required out   p11, [*]d6.2
;	required inout p12, [*]d6.2
;
;	;Integer parameters (byte)
;	required in    p13, [*]i1
;	required out   p14, [*]i1
;	required inout p15, [*]i1
;
;	;Integer parameters (short)
;	required in    p16, [*]i2
;	required out   p17, [*]i2
;	required inout p18, [*]i2
;
;	;Integer parameters (int)
;	required in    p19, [*]i4
;	required out   p20, [*]i4
;	required inout p21, [*]i4
;
;	;Integer parameters (long)
;	required in    p22, [*]i8
;	required out   p23, [*]i8
;	required inout p24, [*]i8

	;Struct field parameters
	required in    p25, [*]strCustomer
	required out   p26, [*]strCustomer
	required inout p27, [*]strCustomer

;	;;Date parameters (YYYYMMDD)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
;	required in    p28, [*]d8
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
;	required out   p29, [*]d8
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
;	required inout p30, [*]d8
;
;	;;Date parameters (YYMMDD)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
;	required in    p31, [*]d6
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
;	required out   p32, [*]d6
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
;	required inout p33, [*]d6
;
;	;;Date parameters (YYYYJJJ)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
;	required in    p34, [*]d7
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
;	required out   p35, [*]d7
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
;	required inout p36, [*]d7
;
;	;;Date parameters (YYJJJ)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
;	required in    p37, [*]d5
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
;	required out   p38, [*]d5
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
;	required inout p39, [*]d5
;
;	;;Time parameters (HHMMSS)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
;	required in    p40, [*]d6
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
;	required out   p41, [*]d6
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
;	required inout p42, [*]d6
;
;	;;Time parameters (HHMM)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
;	required in    p43, [*]d4
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
;	required out   p44, [*]d4
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
;	required inout p45, [*]d4
;
;	;;Timestamp parameters (YYYYMMDDHHMISS)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
;	required in    p46, [*]d14
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
;	required out   p47, [*]d14
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.HHMM)}
;	required inout p48, [*]d14
;
;	;;Timestamp parameters (YYYYMMDDHHMISSUUUUUU)
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
;	required in    p49, [*]d20
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
;	required out   p50, [*]d20
;	{xfParameter(ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
;	required inout p51, [*]d20

;	;Enum parameters
;	required in    p52, [*]METHOD_STATUS
;	required out   p53, [*]METHOD_STATUS
;	required inout p54, [*]METHOD_STATUS
;
;	;;Handle parameters
;	{xfParameter(type=SynType.handle)}
;	required in    p55, D_HANDLE
;	{xfParameter(type=SynType.handle)}
;	required out   p56, D_HANDLE
;	{xfParameter(type=SynType.handle)}
;	required inout p57, D_HANDLE
;
;	;;Binary handle parameters
;	{xfParameter(type=SynType.binaryhandle)}
;	required in    p58, D_HANDLE
;	{xfParameter(type=SynType.binaryhandle)}
;	required out   p59, D_HANDLE
;	{xfParameter(type=SynType.binaryhandle)}
;	required inout p60, D_HANDLE

proc
	xreturn
endsubroutine

{xfMethod(name="ArrayListParameters", interface="SampleXfplEnv", elb="sample_xfpl_env")}
subroutine arraylist_parameters

	;Alpha parameters
	{xfParameter(collectionType=xfCollectType.alpha, Length=1)}
	required in    p1, @ArrayList
	{xfParameter(collectionType=xfCollectType.alpha, Length=1)}
	required out   p2, @ArrayList
;	{xfParameter(collectionType=xfCollectType.alpha, Length=1)}
;	required inout p3, @ArrayList

	;Small decimal parameters (int)
	{xfParameter(collectionType=xfCollectType.decimal, Length=6)}
	required in    p4, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal, Length=6)}
	required out   p5, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal, Length=6)}
;	required inout p6, @ArrayList

	;Long decimal parameters (long)
	{xfParameter(collectionType=xfCollectType.decimal, Length=12)}
	required in    p7, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal, Length=12)}
	required out   p8, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal, Length=12)}
;	required inout p9, @ArrayList

	;Implied decimal parameters
	{xfParameter(collectionType=xfCollectType.decimal, Length=6, Precision=2)}
	required in    p10, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal, Length=6, Precision=2)}
	required out   p11, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal, Length=6, Precision=2)}
;	required inout p12, @ArrayList

	;Integer parameters (byte)
	{xfParameter(collectionType=xfCollectType.integer, Length=1)}
	required in    p13, @ArrayList
	{xfParameter(collectionType=xfCollectType.integer, Length=1)}
	required out   p14, @ArrayList
;	{xfParameter(collectionType=xfCollectType.integer, Length=1)}
;	required inout p15, @ArrayList

	;Integer parameters (short)
	{xfParameter(collectionType=xfCollectType.integer, Length=2)}
	required in    p16, @ArrayList
	{xfParameter(collectionType=xfCollectType.integer, Length=2)}
	required out   p17, @ArrayList
;	{xfParameter(collectionType=xfCollectType.integer, Length=2)}
;	required inout p18, @ArrayList

	;Integer parameters (int)
	{xfParameter(collectionType=xfCollectType.integer, Length=4)}
	required in    p19, @ArrayList
	{xfParameter(collectionType=xfCollectType.integer, Length=4)}
	required out   p20, @ArrayList
;	{xfParameter(collectionType=xfCollectType.integer, Length=4)}
;	required inout p21, @ArrayList

	;Integer parameters (long)
	{xfParameter(collectionType=xfCollectType.integer, Length=8)}
	required in    p22, @ArrayList
	{xfParameter(collectionType=xfCollectType.integer, Length=8)}
	required out   p23, @ArrayList
;	{xfParameter(collectionType=xfCollectType.integer, Length=8)}
;	required inout p24, @ArrayList

	;Struct field parameters
	{xfParameter(collectionType=xfCollectType.structure, structure="strCustomer")}
	required in    p25, @ArrayList
	{xfParameter(collectionType=xfCollectType.structure, structure="strCustomer")}
	required out   p26, @ArrayList
;	{xfParameter(collectionType=xfCollectType.structure, structure="strCustomer")}
;	required inout p27, @ArrayList

	;;Date parameters (YYYYMMDD)
	{xfParameter(collectionType=xfCollectType.decimal,Length=8,ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
	required in    p28, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=8,ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
	required out   p29, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=8,ctype=xfType.DateTime,format=xfFormat.YYYYMMDD)}
;	required inout p30, @ArrayList

	;;Date parameters (YYMMDD)
	{xfParameter(collectionType=xfCollectType.decimal,Length=6,ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
	required in    p31, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=6,ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
	required out   p32, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=6,ctype=xfType.DateTime,format=xfFormat.YYMMDD)}
;	required inout p33, @ArrayList

	;;Date parameters (YYYYJJJ)
	{xfParameter(collectionType=xfCollectType.decimal,Length=7,ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
	required in    p34, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=7,ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
	required out   p35, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=7,ctype=xfType.DateTime,format=xfFormat.YYYYJJJ)}
;	required inout p36, @ArrayList

	;;Date parameters (YYJJJ)
	{xfParameter(collectionType=xfCollectType.decimal,Length=5,ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
	required in    p37, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=5,ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
	required out   p38, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=5,ctype=xfType.DateTime,format=xfFormat.YYJJJ)}
;	required inout p39, @ArrayList

	;;Time parameters (HHMMSS)
	{xfParameter(collectionType=xfCollectType.decimal,Length=6,ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
	required in    p40, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=6,ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
	required out   p41, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=6,ctype=xfType.DateTime,format=xfFormat.HHMMSS)}
;	required inout p42, @ArrayList

	;;Time parameters (HHMM)
	{xfParameter(collectionType=xfCollectType.decimal,Length=4,ctype=xfType.DateTime,format=xfFormat.HHMM)}
	required in    p43, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=4,ctype=xfType.DateTime,format=xfFormat.HHMM)}
	required out   p44, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=4,ctype=xfType.DateTime,format=xfFormat.HHMM)}
;	required inout p45, @ArrayList

	;;Timestamp parameters (YYYYMMDDHHMISS)
	{xfParameter(collectionType=xfCollectType.decimal,Length=14,ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
	required in    p46, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=14,ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
	required out   p47, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=14,ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISS)}
;	required inout p48, @ArrayList

	;;Timestamp parameters (YYYYMMDDHHMISSUUUUUU)
	{xfParameter(collectionType=xfCollectType.decimal,Length=20,ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISSUUUUUU)}
	required in    p49, @ArrayList
	{xfParameter(collectionType=xfCollectType.decimal,Length=20,ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISSUUUUUU)}
	required out   p50, @ArrayList
;	{xfParameter(collectionType=xfCollectType.decimal,Length=20,ctype=xfType.DateTime,format=xfFormat.YYYYMMDDHHMISSUUUUUU)}
;	required inout p51, @ArrayList

;	;Enum parameters
;	required in    p52, [*]METHOD_STATUS
;	required out   p53, [*]METHOD_STATUS
;	required inout p54, [*]METHOD_STATUS

;	;;Handle parameters
;	{xfParameter(type=SynType.handle)}
;	required in    p55, D_HANDLE
;	{xfParameter(type=SynType.handle)}
;	required out   p56, D_HANDLE
;	{xfParameter(type=SynType.handle)}
;	required inout p57, D_HANDLE

;	;;Binary handle parameters
;	{xfParameter(type=SynType.binaryhandle)}
;	required in    p58, D_HANDLE
;	{xfParameter(type=SynType.binaryhandle)}
;	required out   p59, D_HANDLE
;	{xfParameter(type=SynType.binaryhandle)}
;	required inout p60, D_HANDLE

proc
	xreturn
endsubroutine

.include "ADDRESS" REPOSITORY ,structure="Address" ,end
.include "PERFSTRUCT" REPOSITORY ,structure="Perfstruct" ,end
{xfMethod(interface="strtests",name="passLargePacket",elb="TEST:testelb",id="passLargePacket")}
subroutine passLargePacket
	{xfParameter(name="ADDRESS",structure="Address")}
	req in      ADDRESS     ,[*]Address             ;;
	{xfParameter(name="PERFSTRUCT",structure="Perfstruct")}
	req in      PERFSTRUCT  ,[*]Perfstruct          ;;
	endparams
;.subroutine passLargePacket
;	p1, [*]a
;	p2, [*]a
.proc
	xreturn
.end

{xfMethod(interface="strtests",name="paramdiff",elb="TEST:testelb",id="paramdiff")}
subroutine paramdiff
	{xfParameter(name="p1",structure="strDbauthor")}
	req inout   p1          ,strDbauthor               ;;
	endparams
;.subroutine paramdiff
;	p1, a
	record auth
		id, a10
		last, a20
		first, a10
.proc
	auth.id = 7
	auth.last = "Jones"
	auth.first = "Fred"
	p1 = auth
	xreturn
.end
.endregion

.region "LrgPktsMethodDispatchers"
{xfMethod(interface="LrgPkts",name="P2StrArysO64k",elb="TEST:lrgpkts",id="P2StrArysO64k")}
subroutine P2StrArysO64k
	{xfParameter(name="ADDRESS",structure="Address")}
	req inout   p1     ,[*]Address             ;;
	{xfParameter(name="PERFSTRUCT",structure="Perfstruct")}
	req inout   p2  ,[*]Perfstruct          ;;
	endparams
;.subroutine P2StrArysO64k
;	p1, [*]a
;	p2, [*]a
.proc
	xreturn
.end

{xfMethod(interface="LrgPkts",name="P3StrAry",elb="TEST:lrgpkts",id="P3StrAry")}
subroutine P3StrAry
	{xfParameter(name="ADDRESS",structure="Address")}
	req inout   p1     ,[*]Address	;;
	endparams
;.subroutine P3StrAry
;	p1, [*]a
.proc
	xreturn
.end

{xfMethod(interface="LrgPkts",name="P4StrAry",elb="TEST:lrgpkts",id="P4StrAry")}
subroutine P4StrAry
	{xfParameter(name="PERFSTRUCT",structure="Perfstruct")}
	req inout   p1  ,[*]Perfstruct          ;;
	{xfParameter(name="ADDRESS",structure="Address")}
	req inout   p2  ,[*]Address             ;;
	endparams
;.subroutine P4STRARY
;	p1, [*]a
;	p2, [*]a
.proc
	xreturn
.end
.endregion

.region "NoParmsMethodDispachers"
{xfMethod(interface="NoParms",name="NoParmsNoRtn",elb="TEST:testelb",id="NoParmsNoRtn")}
.subroutine NoParmsNoRtn
	endparams


.align
	record
		i, 		i4
		chn,		i4
		msg,		a46

.proc
	chn = 207
	open(chn,a,"TEST:NoParms.log")
	writes(chn,"In NoParams with no return ")
	close (chn)
	xreturn

.end
.endregion

.region "Pool1MethodDispatchers"
{xfMethod(interface="Pool1",name="getGreeting",elb="TEST:testelb",id="Pool1_getGreeting")}
{xfMethod(interface="Pool2",name="getGreeting",elb="TEST:testelb",id="Pool2_getGreeting")}
{xfMethod(interface="Pool3",name="getGreeting",elb="TEST:testelb",id="Pool3_getGreeting")}
{xfMethod(interface="Pool4",name="getGreeting",elb="TEST:testelb",id="Pool4_getGreeting")}
{xfMethod(interface="Pool5",name="getGreeting",elb="TEST:testelb",id="Pool5_getGreeting")}
{xfMethod(interface="Pool6",name="getGreeting",elb="TEST:testelb",id="Pool6_getGreeting")}
{xfMethod(interface="syntst",name="getGreeting",elb="TEST:testelb",id="xfpl_getGreeting")}
subroutine getGreeting
	{xfParameter(name="message", length=30)}
	req out     p1     ,a 
	endparams

	global data section gblsect, init
		record s1                                             
			greet, a30
	endglobal

.proc
	p1 = greet
	xreturn
.end

{xfMethod(interface="Pool1",name="setGreeting",elb="TEST:testelb",id="Pool1_setGreeting")}
{xfMethod(interface="Pool2",name="setGreeting",elb="TEST:testelb",id="Pool2_setGreeting")}
{xfMethod(interface="Pool3",name="setGreeting",elb="TEST:testelb",id="Pool3_setGreeting")}
{xfMethod(interface="Pool4",name="setGreeting",elb="TEST:testelb",id="Pool4_setGreeting")}
{xfMethod(interface="Pool5",name="setGreeting",elb="TEST:testelb",id="Pool5_setGreeting")}
{xfMethod(interface="Pool6",name="setGreeting",elb="TEST:testelb",id="Pool6_setGreeting")}
{xfMethod(interface="syntst",name="setGreeting",elb="TEST:testelb",id="xfpl_setGreeting")}
subroutine setGreeting
	{xfParameter(name="message", length=30)}
	req in      p1     ,a
	endparams

	global data section gblsect2, init
		record s1                                             
			greet, a30
	endglobal

.proc
	greet = p1
	xreturn
.end
.endregion

.region "Pool3MethodDispatchers"
{xfMethod(interface="Pool3",name="Activate",elb="TEST:testelb",id="Pool3_activate")}
{xfMethod(interface="Pool6",name="Activate",elb="TEST:testelb",id="Pool6_activate")}
subroutine Activate
	endparams

.proc
	;xcall writeit("TEST:pooltest.log","activate called:")
	xreturn
	xreturn
.end

{xfMethod(interface="Pool3",name="Deactivate",elb="TEST:testelb",id="Pool3_deactivate")}
{xfMethod(interface="Pool6",name="Deactivate",elb="TEST:testelb",id="Pool_deactivate")}
subroutine Deactivate
	endparams

.proc
	;   xcall writeit("TEST:pooltest.log","deactivate called:")
	xreturn
	xreturn
.end
.endregion

.region "Pool4MethodDispatchers"
{xfMethod(interface="Pool2",name="Cleanup",elb="TEST:testelb",id="Pool2_cleanup")}
{xfMethod(interface="Pool3",name="Cleanup",elb="TEST:testelb",id="Pool3_cleanup")}
{xfMethod(interface="Pool4",name="Cleanup",elb="TEST:testelb",id="Pool4_cleanup")}
subroutine Cleanup
	endparams
.proc
	;  xcall writeit("TEST:pooltest.log","cleanup called:")
	xreturn
	xreturn
.end
.endregion

.region "syntstMethodDispachers"
{xfMethod(interface="syntst",name="array21",elb="TEST:testelb",id="array21")}
subroutine array21

	{xfParameter(name="p1")}
	req in      p1          ,a5                     ;;

	{xfParameter(name="p2")}
	req in      p2          ,a5                     ;;

	{xfParameter(name="p3")}
	req in      p3          ,a5                     ;;

	{xfParameter(name="p4")}
	req in      p4          ,a5                     ;;

	{xfParameter(name="p5")}
	req in      p5          ,a5                     ;;

	{xfParameter(name="p6")}
	req in      p6          ,a5                     ;;

	{xfParameter(name="p7")}
	req in      p7          ,a5                     ;;

	{xfParameter(name="p8")}
	req in      p8          ,a5                     ;;

	{xfParameter(name="p9")}
	req in      p9          ,a5                     ;;

	{xfParameter(name="p10")}
	req in      p10         ,a5                     ;;

	{xfParameter(name="p11")}
	req in      p11         ,a5                     ;;

	{xfParameter(name="p12")}
	req in      p12         ,a5                     ;;

	{xfParameter(name="p13")}
	req in      p13         ,a5                     ;;

	{xfParameter(name="p14")}
	req in      p14         ,a5                     ;;

	{xfParameter(name="p15")}
	req in      p15         ,a5                     ;;

	{xfParameter(name="p16")}
	req in      p16         ,a5                     ;;

	{xfParameter(name="p17")}
	req in      p17         ,a5                     ;;

	{xfParameter(name="p18")}
	req in      p18         ,a5                     ;;

	{xfParameter(name="p19")}
	req in      p19         ,a5                     ;;

	{xfParameter(name="p20")}
	req in      p20         ,a5                     ;;

	{xfParameter(name="p21")}
	req inout   p21         ,[*]a7                  ;;

	{xfParameter(name="p22")}
	req in      p22         ,a5                     ;;

	endparams


.proc
	open(3, a, "TEST:testfile")


	writes(3, "array21 called with 22 parameters")

	writes(3, "array21 array 21st parameter")
	writes(3, "  Changing all 3 values to:")
	p21(1) = "AAAAAAA"
	p21(2) = "BBBBBBB"
	p21(3) = "CCCCCCC"
	writes(3, "  element1:" + p21(1))
	writes(3, "  element1:" + p21(2))
	writes(3, "  element1:" + p21(3))

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="artest1",elb="TEST:testelb",id="artest1")}
subroutine artest1

	{xfParameter(name="param1")}
	opt inout   a_alpha1      ,a5                     ;;

	{xfParameter(name="param2")}
	opt inout   a_alpha2      ,a5                     ;;

	{xfParameter(name="param3")}
	opt inout   a_alpha3      ,a5                     ;;

	{xfParameter(name="param4")}
	opt inout   a_alpha4      ,a5                     ;;

	endparams

.define WAITTIME 12
.define FILECHAN 102
	record	
		time	,d6
		fmt	,a8
.proc
	open(FILECHAN, 'o', "TEST:tfunc.log") 
	xcall time(time)
	fmt = time, "XX:XX:XX"
	writes(FILECHAN, "function called. waiting " +
	&	%string(WAITTIME) + " seconds. " + fmt)
.ifdef DBLNET
	System.Threading.Thread.Sleep(WAITTIME)
.else
	xcall wait(WAITTIME, 0001)
.endc
	xcall time(time)
	fmt = time, "XX:XX:XX"
	writes(FILECHAN, "finished waiting at " + fmt)
	close FILECHAN
	a_alpha1 = "back1"
	a_alpha2 = "back2"
	a_alpha3 = "back3"
	a_alpha4 = "back4"
	return
.end

{xfMethod(interface="syntst",name="function_sixteen",elb="TEST:testelb",id="compid0016")}
subroutine function_sixteen

	{xfParameter(name="p1")}
	opt inout   a_alarray          ,[*]a20                 ;;

	endparams

.define LF %char(10)

	record alpha
		alarray,	[6]a20

.proc
	open(3, a, "TEST:testfile")

	writes(3, "function_sixteen called with")
	writes(3, " 1: " + a_alarray)

	alarray[1] = "a;a"
	alarray[2] = "bb;bb"
	alarray[3] = "ccc;ccc"
	alarray[4] = "dddd#dddd"
	alarray[5] = "eeeee#eee;ee"
	alarray[6] = "ff;fff;fff#ff;"

	a_alarray[] = alpha

	writes(3, "function_sixteen returning with")
	writes(3, " 1: " + a_alarray[])

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_nineteen",elb="TEST:testelb",id="compid0019")}
subroutine function_nineteen

	{xfParameter(name="p1")}
	opt inout   a_idec1          ,d14                    ;;

	{xfParameter(name="p2")}
	opt inout   a_idec2          ,d10                    ;;

	{xfParameter(name="p3")}
	opt inout   a_idec3          ,d7                     ;;

	{xfParameter(name="p4")}
	opt inout   a_idec4          ,d10                    ;;

	{xfParameter(name="p5")}
	opt inout   a_idec5          ,d7                     ;;

	{xfParameter(name="p6")}
	opt in      a_idec6          ,d4                     ;;

	{xfParameter(name="p7")}
	opt in      a_idec7          ,d8                     ;;

	endparams
;.subroutine function_nineteen
;       Arguments
;	a_idec1,        n
;	a_idec2,        n
;	a_idec3,        n
;	a_idec4,        n
;	a_idec5,        n
;	a_idec6,        n
;	a_idec7,        n

.define LF %char(10)

	record
		dec1,   d14
		dec2,   d10
		dec3,   d7
		dec4,   d10
		dec5,   d18
		dec6,   d4
		dec7,   d8

.proc
	open(3, a, "TEST:testfile")

	writes(3, "function_nineteen called with")
	writes(3, " 1: " + %string(a_idec1))
	writes(3, " 2: " + %string(a_idec2))
	writes(3, " 3: " + %string(a_idec3))
	writes(3, " 4: " + %string(a_idec4))
	writes(3, " 5: " + %string(a_idec5))
	writes(3, " 6: " + %string(a_idec6))
	writes(3, " 7: " + %string(a_idec7))
	writes(3, "")
	writes(3, "")

	dec1 = 1987654321
	dec2 = -1234567
	dec3 = 2132121
	dec4 = 78765456
	dec5 = 5544332

	a_idec1 = dec1
	a_idec2 = dec2
	a_idec3 = dec3
	a_idec4 = dec4
	a_idec5 = dec5

	writes(3, "function_nineteen returning with")
	writes(3, " 1: " + %string(a_idec1))
	writes(3, " 2: " + %string(a_idec2))
	writes(3, " 3: " + %string(a_idec3))
	writes(3, " 4: " + %string(a_idec4))
	writes(3, " 5: " + %string(a_idec5))
	writes(3, " 6: " + %string(a_idec6))
	writes(3, " 7: " + %string(a_idec7))
	writes(3, "")
	writes(3, "")

	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_twenty",elb="TEST:testelb",id="compid0020")}
subroutine function_twenty

{xfParameter(length=10, name="p1")}
opt inout mismatch  a_idec1          ,n                    ;;

{xfParameter(length=7, name="p2")}
opt inout mismatch   a_idec2          ,n                     ;;

{xfParameter(length=10, name="p3")}
opt inout mismatch   a_idec3          ,n                    ;;

{xfParameter(length=13, name="p4")}
opt inout mismatch   a_idec4          ,n                    ;;

endparams

;.subroutine function_twenty
;       Arguments
;	a_idec1,        n
;	a_idec2,        n
;	a_idec3,        n
;	a_idec4,        n

.define LF %char(10)

record
	alpha1,         a10
	alpha2,         a7
	alpha3,         a10
	alpha4,         a15

.proc
	open(3, a, "TEST:testfile")

	writes(3, "function_twenty called with")
	writes(3, " 1: " + %string(a_idec1))
	writes(3, " 2: " + %string(a_idec2))
	writes(3, " 3: " + %string(a_idec3))
	writes(3, " 4: " + %string(a_idec4))
	writes(3, "")
	writes(3, "")

	alpha1 = "101011"
	alpha2 = "8553.299"
	alpha3 = "455.678"
	alpha4 = "1223334444555"

	a_idec1 = alpha1
	a_idec2 = alpha2
	a_idec3 = alpha3
	a_idec4 = alpha4
	writes(3, " 2: " + %string(a_idec2))
	writes(3, " 3: " + %string(a_idec3))
	writes(3, " 4: " + %string(a_idec4))
	writes(3, "")
	writes(3, "")

	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtytwo",elb="TEST:testelb",id="compid0062")}
subroutine function_sixtytwo

	{xfParameter(name="p1")}
	opt inout   a_int          ,i4                     ;;

	endparams

;.subroutine function_sixtytwo
;	Arguments
;	a_int,  	n

	record
		x,		i2

.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_62 called with")
	writes(3, " 1: " + %string(a_int))

	x = 2;
	a_int = a_int - x;    

	writes(3, "function_62 returning with")
	writes(3, " 1: " + %string(a_int))

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtythree",elb="TEST:testelb",id="compid0063")}
subroutine function_sixtythree

	{xfParameter(name="param1")}
	opt in      a1_int      ,i4                     ;;

	{xfParameter(length=1, name="param2")}
	opt in      a2_int      ,i1                     ;;

	{xfParameter(name="param3")}
	opt in      a3_int      ,i1                     ;;

	endparams


;.subroutine function_sixtythree
;	Arguments
;        a1_int,  	n
;        a2_int,         n 
;        a3_int,         n      

.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_63 called with")
	writes(3, " 1: " + %string(a1_int))
	writes(3, " 2: " + %string(a2_int))
	writes(3, " 3: " + %string(a3_int)) 


	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtyfour",elb="TEST:testelb",id="compid0064")}
subroutine function_sixtyfour
	{xfParameter(name="param1")}
	opt in      a1_int      ,i1                     ;;
	{xfParameter(name="param2")}
	opt in      a2_int      ,i2                     ;;
	{xfParameter(name="param3")}
	opt in      a3_int      ,i4                     ;;
	{xfParameter(name="param4")}
	opt in      a4_int      ,i4                     ;;
	{xfParameter(name="param5")}
	opt in      a5_int      ,i1                     ;;
	{xfParameter(name="param6")}
	opt in      a6_int      ,i1                     ;
	{xfParameter(name="param7")}
	opt in      a7_int      ,i2                     ;
	{xfParameter(name="param8")}
	opt in      a8_int      ,i4                     ;
	{xfParameter(name="param9")}
	opt in      a9_int      ,i4                     ;
	{xfParameter(name="param10")}
	opt in      a10_int     ,i1                     ;
	{xfParameter(name="param11")}
	opt in      a11_int     ,i1                     ;;
	{xfParameter(name="param12")}
	opt in      a12_int     ,i2                     ;;
	{xfParameter(name="param13")}
	opt in      a13_int     ,i4                     ;;
	{xfParameter(name="param14")}
	opt in      a14_int     ,i4                     ;;
	{xfParameter(name="param15")}
	opt in      a15_int     ,i1                     ;;
	endparams

; .subroutine function_sixtyfour
; ;	Arguments
; ;       a1_int,         n 
; ;       a2_int,         n 
; ;       a3_int,         n 
; ;       a4_int,         n 
; ;       a5_int,         n 
;         a6_int,         n
;         a7_int,         n
;         a8_int,         n
;         a9_int,         n
;         a10_int,        n
; ;       a11_int,         n 
; ;       a12_int,         n 
; ;       a13_int,         n 
; ;       a14_int,         n 
; ;       a15_int,         n 

.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_64 called with")
	writes(3, " 1: " + %string(a1_int))
	writes(3, " 2: " + %string(a2_int))
	writes(3, " 3: " + %string(a3_int))
	writes(3, " 4: " + %string(a4_int))
	writes(3, " 5: " + %string(a5_int))
	writes(3, " 6: " + %string(a6_int))
	writes(3, " 7: " + %string(a7_int))
	writes(3, " 8: " + %string(a8_int))
	writes(3, " 9: " + %string(a9_int))
	writes(3, " 10: " + %string(a10_int))
	writes(3, " 11: " + %string(a11_int))
	writes(3, " 12: " + %string(a12_int))
	writes(3, " 13: " + %string(a13_int))
	writes(3, " 14: " + %string(a14_int))
	writes(3, " 15: " + %string(a15_int))
     


	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtyfive",elb="TEST:testelb",id="compid0065")}
subroutine function_sixtyfive

	{xfParameter(name="param1")}
	opt in      a1_int      ,i1                     ;;

	{xfParameter(name="param2")}
	opt in      a2_int      ,i2                     ;;

	{xfParameter(name="param3")}
	opt in      a3_int      ,i4                     ;;

	{xfParameter(name="param4")}
	opt in      a4_int      ,i8                     ;;

	{xfParameter(length=1, name="param5")}
	opt in      a5_int      ,i1                     ;;

	{xfParameter(name="param6")}
	opt in      a6_int      ,i1                     ;;

	{xfParameter(name="param7")}
	opt in      a7_int      ,i2                     ;;

	{xfParameter(name="param8")}
	opt in      a8_int      ,i4                     ;;

	{xfParameter(name="param9")}
	opt in      a9_int      ,i8                     ;;

	{xfParameter(length=1, name="param10")}
	opt in      a10_int     ,i1                     ;;

	{xfParameter(name="param11")}
	opt in      a11_int     ,i1                     ;;

	{xfParameter(name="param12")}
	opt in      a12_int     ,i2                     ;;

	{xfParameter(name="param13")}
	opt in      a13_int     ,i4                     ;;

	{xfParameter(name="param14")}
	opt in      a14_int     ,i8                     ;;

	{xfParameter(length=1, name="param15")}
	opt in      a15_int     ,i1                     ;;

	endparams

;.subroutine function_sixtyfive
;	Arguments
;        a1_int,  	n
;        a2_int,         n 
;        a3_int,         n      
;        a4_int,         n
;        a5_int,         n
;        a6_int,         n
;        a7_int,         n
;        a8_int,         n
;        a9_int,         n
;        a10_int,        n
;        a11_int,        n         
;        a12_int,        n
;        a13_int,        n
;        a14_int,        n
;        a15_int,        n 
.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_65 called with")
	writes(3, " 1: " + %string(a1_int))
	writes(3, " 2: " + %string(a2_int))
	writes(3, " 3: " + %string(a3_int))
	writes(3, " 4: " + %string(a4_int))
	writes(3, " 5: " + %string(a5_int))
	writes(3, " 6: " + %string(a6_int))
	writes(3, " 7: " + %string(a7_int))
	writes(3, " 8: " + %string(a8_int))
	writes(3, " 9: " + %string(a9_int))
	writes(3, " 10: " + %string(a10_int))
	writes(3, " 11: " + %string(a11_int))
	writes(3, " 12: " + %string(a12_int))
	writes(3, " 13: " + %string(a13_int))
	writes(3, " 14: " + %string(a14_int))
	writes(3, " 15: " + %string(a15_int))
     


	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtysix",elb="TEST:testelb",id="compid0066")}
subroutine function_sixtysix

	{xfParameter(length=1, name="param1")}
	opt in      a1_int      ,d1                     ;;

	{xfParameter(name="param2")}
	opt in      a2_int      ,d3                     ;;

	{xfParameter(name="param3")}
	opt in      a3_int      ,d4.2                   ;;

	{xfParameter(name="param4")}
	opt in      a4_int      ,d2.2                   ;;

	{xfParameter(length=1, name="param5")}
	opt in      a5_int      ,d1                     ;;

	{xfParameter(name="param6")}
	opt in      a6_int      ,d3                     ;;

	{xfParameter(name="param7")}
	opt in      a7_int      ,d4.2                   ;;

	{xfParameter(name="param8")}
	opt in      a8_int      ,d2.2                   ;;

	{xfParameter(length=1, name="param9")}
	opt in      a9_int      ,d1                     ;;

	{xfParameter(name="param10")}
	opt in      a10_int     ,d5                     ;;

	{xfParameter(name="param11")}
	opt in      a11_int     ,d6.1                   ;;

	{xfParameter(name="param12")}
	opt in      a12_int     ,d3.3                   ;;

	{xfParameter(length=1, name="param13")}
	opt in      a13_int     ,d1                     ;;

	{xfParameter(name="param14")}
	opt in      a14_int     ,d9                     ;;

	{xfParameter(name="param15")}
	opt in      a15_int     ,d10                    ;;

	{xfParameter(name="param16")}
	opt in      a16_int     ,d7.1                   ;;

	endparams

;.subroutine function_sixtysix
;	Arguments
;        a1_int,  	n
;        a2_int,         n 
;        a3_int,         n      
;        a4_int,         n
;        a5_int,         n
;        a6_int,         n
;        a7_int,         n
;        a8_int,         n
;        a9_int,         n
;        a10_int,        n
;        a11_int,        n         
;        a12_int,        n
;        a13_int,        n
;        a14_int,        n
;        a15_int,        n
;        a16_int,        n
.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_66 called with")
	writes(3, " 1: " + %string(a1_int))
	writes(3, " 2: " + %string(a2_int))
	writes(3, " 3: " + %string(a3_int))
	writes(3, " 4: " + %string(a4_int))
	writes(3, " 5: " + %string(a5_int))
	writes(3, " 6: " + %string(a6_int))
	writes(3, " 7: " + %string(a7_int))
	writes(3, " 8: " + %string(a8_int))
	writes(3, " 9: " + %string(a9_int))
	writes(3, " 10: " + %string(a10_int))
	writes(3, " 11: " + %string(a11_int))
	writes(3, " 12: " + %string(a12_int))
	writes(3, " 13: " + %string(a13_int))
	writes(3, " 14: " + %string(a14_int))
	writes(3, " 15: " + %string(a15_int))
	writes(3, " 16: " + %string(a16_int))
     


	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtyseven",elb="TEST:testelb",id="compid0067")}
subroutine function_sixtyseven

	{xfParameter(length=1, name="param1")}
	opt inout   a1_int      ,a                     ;;

	{xfParameter(length=26, name="param2")}
	opt inout   a2_int      ,a                    ;;

	{xfParameter(length=35, name="param3")}
	opt inout   a3_int      ,a                    ;;

	{xfParameter(length=21, name="param4")}
	opt inout   a4_int      ,a                    ;;

	{xfParameter(name="param5")}
	opt inout   a5_int      ,d1                     ;;

	{xfParameter(name="param6")}
	opt inout   a6_int      ,d6                     ;;

	{xfParameter(name="param7")}
	opt inout   a7_int      ,d7                     ;;

	{xfParameter(name="param8")}
	opt inout   a8_int      ,d4                     ;;

	{xfParameter(name="param9")}
	opt inout   a9_int      ,d1                     ;;

	{xfParameter(name="param10")}
	opt inout   a10_int     ,d9                     ;;

	{xfParameter(name="param11")}
	opt inout   a11_int     ,d10                    ;;

	{xfParameter(name="param12")}
	opt inout   a12_int     ,d7                     ;;

	endparams

;.subroutine function_sixtyseven
;	Arguments
;        a1_int,         a
;        a2_int,         a 
;        a3_int,         a      
;        a4_int,         a
;        a5_int,         n
;        a6_int,         n
;        a7_int,         n
;        a8_int,         n
;        a9_int,         n
;        a10_int,        n
;        a11_int,        n         
;        a12_int,        n
.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_67 called with")
	writes(3, " 1: " + a1_int)
	writes(3, " 2: " + a2_int)
	writes(3, " 3: " + a3_int)
	writes(3, " 4: " + a4_int)
	writes(3, " 5: " + %string(a5_int))
	writes(3, " 6: " + %string(a6_int))
	writes(3, " 7: " + %string(a7_int))
	writes(3, " 8: " + %string(a8_int))
	writes(3, " 9: " + %string(a9_int))
	writes(3, " 10: " + %string(a10_int))
	writes(3, " 11: " + %string(a11_int))
	writes(3, " 12: " + %string(a12_int))
     


	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtyeight",elb="TEST:testelb",id="compid0068")}
subroutine function_sixtyeight

	{xfParameter(name="param1")}
	opt inout   a1_int      ,i4                     ;;

	{xfParameter(name="param2")}
	opt inout   a2_int      ,i1                     ;;

	{xfParameter(name="param3")}
	opt inout   a3_int      ,i2                     ;;

	{xfParameter(name="param4")}
	opt inout   a4_int      ,i4                     ;;

	{xfParameter(name="param5")}
	opt inout   a5_int      ,i4                     ;;

	{xfParameter(name="param6")}
	opt inout   a6_int      ,i4                     ;;

	{xfParameter(name="param7")}
	opt inout   a7_int      ,i1                     ;;

	{xfParameter(name="param8")}
	opt inout   a8_int      ,i2                     ;;

	{xfParameter(name="param9")}
	opt inout   a9_int      ,i4                     ;;

	{xfParameter(name="param10")}
	opt inout   a10_int     ,i4                     ;;

	{xfParameter(length=1, name="param11")}
	opt inout   a11_int     ,i1                     ;;

	{xfParameter(name="param12")}
	opt inout   a12_int     ,i1                     ;;

	{xfParameter(name="param13")}
	opt inout   a13_int     ,i2                     ;;

	{xfParameter(name="param14")}
	opt inout   a14_int     ,i4                     ;;

	{xfParameter(name="param15")}
	opt inout   a15_int     ,i4                     ;;

	{xfParameter(length=1, name="param16")}
	opt inout   a16_int     ,i1                     ;;

	{xfParameter(name="param17")}
	opt inout   a17_int     ,i1                     ;;

	{xfParameter(name="param18")}
	opt inout   a18_int     ,i2                     ;;

	{xfParameter(name="param19")}
	opt inout   a19_int     ,i4                     ;;

	{xfParameter(name="param20")}
	opt inout   a20_int     ,i4                     ;;

	endparams

;.subroutine function_sixtyeight
;	Arguments
;        a1_int,         n
;        a2_int,         n 
;        a3_int,         n      
;        a4_int,         n
;        a5_int,         n
;        a6_int,         n
;        a7_int,         n
;        a8_int,         n
;        a9_int,         n
;        a10_int,        n
;        a11_int,        n         
;        a12_int,        n
;        a13_int,        n
;        a14_int,        n
;        a15_int,        n
;        a16_int,        n
;        a17_int,        n
;        a18_int,        n
;        a19_int,        n
;        a20_int,        n
                
.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_68 called with")
	writes(3, " 1: " + %string(a1_int))
	writes(3, " 2: " + %string(a2_int))
	writes(3, " 3: " + %string(a3_int))
	writes(3, " 4: " + %string(a4_int))
	writes(3, " 5: " + %string(a5_int))
	writes(3, " 6: " + %string(a6_int))
	writes(3, " 7: " + %string(a7_int))
	writes(3, " 8: " + %string(a8_int))
	writes(3, " 9: " + %string(a9_int))
	writes(3, " 10: " + %string(a10_int))
	writes(3, " 11: " + %string(a11_int))
	writes(3, " 12: " + %string(a12_int))
	writes(3, " 13: " + %string(a13_int))
	writes(3, " 14: " + %string(a14_int))
	writes(3, " 15: " + %string(a15_int))
	writes(3, " 16: " + %string(a16_int))
	writes(3, " 17: " + %string(a17_int))
	writes(3, " 18: " + %string(a18_int))
	writes(3, " 19: " + %string(a19_int))
	writes(3, " 20: " + %string(a20_int))

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_sixtynine",elb="TEST:testelb",id="compid0069")}
subroutine function_sixtynine

	{xfParameter(length=1, precision=0, name="param1")}
	opt in      a1_int      ,n                     ;;

	{xfParameter(length=3, precision=3, name="param2")}
	opt in      a2_int      ,d3.3                   ;;

	{xfParameter(length=2, precision=2, name="param3")}
	opt in      a3_int      ,d2.2                   ;;

	{xfParameter(length=3, precision=2, name="param4")}
	opt in      a4_int      ,d3.2                   ;;

	{xfParameter(length=3, precision=0, name="param5")}
	opt in      a5_int      ,d3                     ;;

	{xfParameter(length=1, precision=0, name="param6")}
	opt in      a6_int      ,n                     ;;

	{xfParameter(length=3, precision=0, name="param7")}
	opt in      a7_int      ,d3                     ;;

	{xfParameter(length=2, precision=0, name="param8")}
	opt in      a8_int      ,d2                     ;;

	{xfParameter(length=2, precision=2, name="param9")}
	opt in      a9_int      ,d2.2                   ;;

	{xfParameter(length=1, precision=0, name="param10")}
	opt in      a10_int     ,n                     ;;

	{xfParameter(length=5, precision=3, name="param11")}
	opt in      a11_int     ,d5.3                   ;;

	{xfParameter(length=4, precision=3, name="param12")}
	opt in      a12_int     ,d4.3                   ;;

	{xfParameter(length=4, precision=2, name="param13")}
	opt in      a13_int     ,d4.2                   ;;

	{xfParameter(length=1, precision=0, name="param14")}
	opt in      a14_int     ,d1                     ;;

	endparams

;.subroutine function_sixtynine
;	Arguments
;        a1_int,         n
;        a2_int,         n 
;        a3_int,         n      
;        a4_int,         n
;        a5_int,         n
;        a6_int,         n
;        a7_int,         n
;        a8_int,         n
;        a9_int,         n
;        a10_int,        n
;        a11_int,        n         
;        a12_int,        n     
;        a13_int,        n     
;        a14_int,        n      
                         
.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_69 called with")
	writes(3, " 1: " + %string(a1_int))
	writes(3, " 2: " + %string(a2_int))
	writes(3, " 3: " + %string(a3_int))
	writes(3, " 4: " + %string(a4_int))
	writes(3, " 5: " + %string(a5_int))
	writes(3, " 6: " + %string(a6_int))
	writes(3, " 7: " + %string(a7_int))
	writes(3, " 8: " + %string(a8_int))
	writes(3, " 9: " + %string(a9_int))
	writes(3, " 10: " + %string(a10_int))
	writes(3, " 11: " + %string(a11_int))
	writes(3, " 12: " + %string(a12_int))
	writes(3, " 13: " + %string(a13_int))
	writes(3, " 14: " + %string(a14_int))

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_seventy",elb="TEST:testelb",id="compid0070")}
subroutine function_seventy

	{xfParameter(length=1, name="param1")}
	opt in      a1_int      ,a1                     ;;

	{xfParameter(length=5, name="param2")}
	opt in      a2_int      ,a5                     ;;

	{xfParameter(length=6, name="param3")}
	opt in      a3_int      ,a6                     ;;

	{xfParameter(length=2, name="param4")}
	opt in      a4_int      ,a2                     ;;

	{xfParameter(length=1, name="param5")}
	opt in      a5_int      ,a1                     ;;

	{xfParameter(length=5, name="param6")}
	opt in      a6_int      ,a5                     ;;

	{xfParameter(length=12, name="param7")}
	opt in      a7_int      ,a12                    ;;

	{xfParameter(length=1, name="param8")}
	opt in      a8_int      ,a1                     ;;

	{xfParameter(length=1, name="param9")}
	opt in      a9_int      ,a1                     ;;

	{xfParameter(name="param10")}
	opt in      a10_int     ,a6                     ;;

	{xfParameter(length=18, name="param11")}
	opt in      a11_int     ,a18                    ;;

	{xfParameter(length=4, name="param12")}
	opt in      a12_int     ,a4                     ;;

	endparams

;.subroutine function_seventy
;	Arguments
;        a1_int,         a
;        a2_int,         a 
;        a3_int,         a      
;        a4_int,         a
;        a5_int,         a
;        a6_int,         a
;        a7_int,         a
;        a8_int,         a
;        a9_int,         a
;        a10_int,        a
;        a11_int,        a         
;        a12_int,        a     
                         
.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_70 called with")
	writes(3, " 1: " + a1_int)
	writes(3, " 2: " + a2_int)
	writes(3, " 3: " + a3_int)
	writes(3, " 4: " +  a4_int)
	writes(3, " 5: " +  a5_int)
	writes(3, " 6: " +  a6_int)
	writes(3, " 7: " +  a7_int)
	writes(3, " 8: " +  a8_int)
	writes(3, " 9: " +  a9_int)
	writes(3, " 10: " +  a10_int)
	writes(3, " 11: " +  a11_int)
	writes(3, " 12: " +  a12_int)
        
	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_seventyfour",elb="TEST:testelb",id="compid0074")}
subroutine function_seventyfour

	{xfParameter(length=100, name="param1")}
	opt inout   a_int      ,a

	endparams

;.subroutine function_seventyfour
;	Arguments
;	a_int,  	a

.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_74 called with")
	writes(3, " 1: " + a_int)


	writes(3, "function_74 returning with")
	writes(3, " 1: " + a_int)

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_eighty",elb="TEST:testelb",id="compid0080")}
subroutine function_eighty

	{xfParameter(name="param1")}
	opt in      a_idec1      ,d12.4                  ;;

	{xfParameter(name="param2")}
	opt in      a_idec2      ,d8.4                   ;;

	{xfParameter(name="param3")}
	opt in      a_idec3      ,d4.4                   ;;

	{xfParameter(name="param4")}
	opt in      a_idec4      ,d2.2                   ;;

	{xfParameter(name="param5")}
	opt in      a_idec5      ,d12.4                  ;;

	{xfParameter(name="param6")}
	opt in      a_idec6      ,d8.4                   ;;

	{xfParameter(name="param7")}
	opt in      a_idec7      ,d4.4                   ;;

	{xfParameter(name="param8")}
	opt in      a_idec8      ,d2.2                   ;;

	{xfParameter(name="param9")}
	opt in      a_idec9      ,d12.4                  ;;

	{xfParameter(name="param10")}
	opt in      a_idec10     ,d8.4                   ;;

	{xfParameter(name="param11")}
	opt in      a_idec11     ,d4.4                   ;;

	{xfParameter(name="param12")}
	opt in      a_idec12     ,d2.2                   ;;

	{xfParameter(name="param13")}
	opt in      a_idec13     ,d12.4                  ;;

	{xfParameter(name="param14")}
	opt in      a_idec14     ,d8.4                   ;;

	{xfParameter(name="param15")}
	opt in      a_idec15     ,d4.4                   ;;

	{xfParameter(name="param16")}
	opt in      a_idec16     ,d2.2                   ;;

	endparams

;.subroutine function_eighty
;	Arguments
;	a_idec1,	n
;	a_idec2,	n
;	a_idec3,	n
;	a_idec4,	n
;	a_idec5,	n
;	a_idec6,	n
;	a_idec7,	n
;	a_idec8,	n
;	a_idec9,	n
;	a_idec10,	n
;	a_idec11,	n
;	a_idec12,	n
;	a_idec13,	n
;	a_idec14,	n
;	a_idec15,	n
;	a_idec16,	n

.align
	record
		idec1,		d12.4
		idec2,		d8.4 
		idec3,		d4.4 
		idec4,		d2.2
		idec5,		d12.4
		idec6,		d8.4 
		idec7,		d4.4 
		idec8,		d2.2
		idec9,		d12.4
		idec10,		d8.4 
		idec11,		d4.4 
		idec12,		d2.2
		idec13,		d12.4
		idec14,		d8.4 
		idec15,		d4.4 
		idec16,		d2.2
	

.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")

	idec1 = a_idec1 
	idec2 = a_idec2 
	idec3 = a_idec3 
	idec4 = a_idec4 
	idec5 = a_idec5 
	idec6 = a_idec6 
	idec7 = a_idec7 
	idec8 = a_idec8 
	idec9 = a_idec9 
	idec10 = a_idec10
	idec11 = a_idec11
	idec12 = a_idec12
	idec13 = a_idec13
	idec14 = a_idec14
	idec15 = a_idec15
	idec16 = a_idec16

	writes(3, "function_eighty called with")
	writes(3, " 1: " + %string(a_idec1))
	writes(3, " 2: " + %string(a_idec2))
	writes(3, " 3: " + %string(a_idec3))
	writes(3, " 4: " + %string(a_idec4))
	writes(3, " 5: " + %string(a_idec5))
	writes(3, " 6: " + %string(a_idec6))
	writes(3, " 7: " + %string(a_idec7))
	writes(3, " 8: " + %string(a_idec8))
	writes(3, " 9: " + %string(a_idec9))
	writes(3, " 10: " + %string(a_idec10))
	writes(3, " 11: " + %string(a_idec11))
	writes(3, " 12: " + %string(a_idec12))
	writes(3, " 13: " + %string(a_idec13))
	writes(3, " 14: " + %string(a_idec14))
	writes(3, " 15: " + %string(a_idec15))
	writes(3, " 16: " + %string(a_idec16))

	writes(3, "function_eighty no return data")

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_ninetyone",elb="TEST:testelb",id="compid0091")}
subroutine function_ninetyone
	{xfParameter(name="p1")}
	in		a_int		,i4
	endparams

;.subroutine function_ninetyone
;	Arguments
;	^val(a_int),  	i4
.align
	record
		x,   i4
         
         
.proc

	open(3, a, "TEST:testfile")


	writes(3, "function_91 called with")
	writes(3, " 1: " + %string(a_int))

	x = a_int 
	writes(3, "returning x: " + %string(x))
	x = a_int - 1234567889 
	writes(3, "function_91 returning with")
	writes(3, " 1: " + %string(x))

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
	

.end

{xfMethod(interface="syntst",name="function_ninetytwo",elb="TEST:testelb",id="compid0092")}
subroutine function_ninetytwo
	{xfParameter(name="p1")}
.ifdef DBLNET
	inout	a_int	,i4
.else
	inout   ^REF(a_int)    ,i4
.endc
	endparams

;.subroutine function_ninetytwo
;       Arguments
;.ifdef DBLNET
;	a_int	,i4
;.else
;	^ref(a_int),    i4
;.endc

	record
		x,   i4
.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_92 called with")
	writes(3, " 1: " + %string(a_int))

	x = a_int * 2 
	writes(3, "returning x: " + %string(x))
	a_int = a_int - 1234567889 
	writes(3, "function_92 returning with")
	writes(3, " 1: " + %string(a_int))

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_onehundredandone",elb="TEST:testelb",id="compid0101")}
subroutine function_onehundredandone

	{xfParameter(length=25, name="param1")}
	opt in      a1_int      ,a                    ;;

	{xfParameter(length=5, name="p2")}
	opt in      a2_int      ,a                     ;;

	{xfParameter(length=6, name="param3")}
	opt in      a3_int      ,a                     ;;

	{xfParameter(length=2, name="param4")}
	opt in      a4_int      ,a                     ;;

	{xfParameter(length=24, name="param5")}
	opt in      a5_int      ,a                    ;;

	{xfParameter(length=5, name="param6")}
	opt in      a6_int      ,a                     ;;

	{xfParameter(length=12, name="param7")}
	opt in      a7_int      ,a                    ;;

	{xfParameter(length=4, name="x")}
	opt in      a8_int      ,a                     ;;

	{xfParameter(length=25, name="param9")}
	opt in      a9_int      ,a                    ;;

	{xfParameter(length=6, name="param10")}
	opt in      a10_int     ,a                     ;;

	{xfParameter(length=18, name="param11")}
	opt in      a11_int     ,a                    ;;

	{xfParameter(length=4, name="param12")}
	opt in      a12_int     ,a                     ;;

	endparams

;.subroutine function_onehundredandone
;       Arguments
;	a1_int,         a
;	a2_int,         a 
;	a3_int,         a      
;	a4_int,         a
;	a5_int,         a
;	a6_int,         a
;	a7_int,         a
;	a8_int,         a
;	a9_int,         a
;	a10_int,        a
;	a11_int,        a         
;	a12_int,        a     
			 
.define LF %char(10)

.proc
	open(3, a, "TEST:testfile")


	writes(3, "function_101 called with")
	if (%passed (a1_int)) 
		writes(3, " 1: " + a1_int)
	if (%passed (a2_int)) 
		writes(3, " 2: " + a2_int)
	if (%passed (a3_int)) 
		writes(3, " 3: " + a3_int)
	if (%passed (a4_int)) 
		writes(3, " 4: " +  a4_int)
	if (%passed (a5_int)) 
		writes(3, " 5: " +  a5_int)
	if (%passed (a6_int)) 
		writes(3, " 6: " +  a6_int)
	if (%passed (a7_int)) 
		writes(3, " 7: " +  a7_int)
	if (%passed (a8_int)) 
		writes(3, " 8: " +  a8_int)
	if (%passed (a9_int)) 
		writes(3, " 9: " +  a9_int)
	if (%passed (a10_int)) 
		writes(3, " 10: " +  a10_int)
	if (%passed (a11_int)) 
		writes(3, " 11: " +  a11_int)
	if (%passed (a12_int)) 
		writes(3, " 12: " +  a12_int)
	
	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="function_onehundredandfour",elb="TEST:testelb",id="compid0104")}
subroutine function_onehundredandfour

	{xfParameter(length=1, name="param1")}
	opt in      a1_int      ,a                     ;;

	{xfParameter(length=5, name="param2")}
	opt in      a2_int      ,a5                     ;;

	{xfParameter(length=6, name="param3")}
	opt in      a3_int      ,a6                     ;;

	{xfParameter(length=2, name="param4")}
	opt in      a4_int      ,a2                     ;;

	{xfParameter(length=1, name="param5")}
	opt in      a5_int      ,a                     ;;

	{xfParameter(length=5, name="param6")}
	opt in      a6_int      ,a5                     ;;

	{xfParameter(length=12, name="param7")}
	opt in      a7_int      ,a12                    ;;

	{xfParameter(length=4, name="param8")}
	opt in      a8_int      ,a4                     ;;

	{xfParameter(length=1, name="param9")}
	opt in      a9_int      ,a                     ;;

	{xfParameter(length=6, name="param10")}
	opt in      a10_int     ,a6                     ;;

	{xfParameter(length=18, name="param11")}
	opt in      a11_int     ,a18                    ;;

	{xfParameter(length=4, name="param12")}
	opt in      a12_int     ,a4                     ;;

	endparams

;.subroutine function_onehundredandfour
;       Arguments
;	a1_int,         a
;	a2_int,         a 
;	a3_int,         a      
;	a4_int,         a
;	a5_int,         a
;	a6_int,         a
;	a7_int,         a
;	a8_int,         a
;	a9_int,         a
;	a10_int,        a
;	a11_int,        a         
;	a12_int,        a     
			 
proc
	open(3, a, "TEST:testfile")


	writes(3, "function_104 called with")
	if (%passed (a1_int)) 
		writes(3, " 1: " + a1_int)
	if (%passed (a2_int)) 
		writes(3, " 2: " + a2_int)
	if (%passed (a3_int)) 
		writes(3, " 3: " + a3_int)
	if (%passed (a4_int)) 
		writes(3, " 4: " +  a4_int)
	if (%passed (a5_int)) 
		writes(3, " 5: " +  a5_int)
	if (%passed (a6_int)) 
		writes(3, " 6: " +  a6_int)
	if (%passed (a7_int)) 
		writes(3, " 7: " +  a7_int)
	if (%passed (a8_int)) 
		writes(3, " 8: " +  a8_int)
	if (%passed (a9_int)) 
		writes(3, " 9: " +  a9_int)
	if (%passed (a10_int)) 
		writes(3, " 10: " +  a10_int)
	if (%passed (a11_int)) 
		writes(3, " 11: " +  a11_int)
	if (%passed (a12_int)) 
		writes(3, " 12: " +  a12_int)
	
	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="elb_not_found",elb="TEST:testelb",id="elb_not_found")}
subroutine elb_not_found
proc
	xreturn
end

;;  A fatal routine divide by zero
.subroutine isfatal

	record
		fld1	,d5
		fld2	,d5
		result	,d5

.proc
	clear fld1, fld2, result
	fld2 = 2000
	result = fld2 / fld1
	xreturn
.end

{xfMethod(interface="syntst",name="hello",elb="TEST:testelb",id="hello_routine")}
subroutine hello
	{xfParameter(length=20, name="name")}
	req in      a_name        ,a
	{xfParameter(length=30, name="message")}
	req inout   a_message     ,a
	endparams

;.subroutine hello
;	Arguments
;	a_name		,a	
;	a_message	,a

	record
		HELLO	,a6	,"Hello "
		NONAME,a30	,"No name passed "

.proc
	if ( a_name) then
		a_message = %atrim(HELLO + a_name)
	else
		a_message = NONAME
	xreturn
.end

{xfMethod(interface="syntst",name="missingFromElb",elb="TEST:testelb",id="missingFromElb")}
subroutine missingFromElb
proc
	xreturn
end

{xfMethod(interface="syntst",name="msc_arytst_dec",elb="TEST:testelb",id="msc_ary_dec")}
subroutine msc_arytst_dec
	{xfParameter(length=5, name="p1")}
	req inout   a_decary          ,[*]d5 
	endparams
;.subroutine msc_arytst_dec
;	Arguments
;	a_decary	,[*]n	

	record dec
		ary		,[5]d5

.align
	record
		ndx		,i4
	
.proc

	ary[1] = 55555
	ary[2] = 4444
	ary[3] = 333
	ary[4] = 22
	ary[5] = 1
	for ndx from 1 thru 5 by 1
		a_decary[ndx] = ary[ndx]

;;	sleep 120

	xreturn
	
.end

{xfMethod(interface="syntst",name="msc_arytst_imp",elb="TEST:testelb",id="msc_ary_imp")}
subroutine msc_arytst_imp
	{xfParameter(length=10, precision=3, name="p1")}
	req inout   a_impary          ,[*]d10.3   
	endparams
;.subroutine msc_arytst_imp
;	Arguments
;	a_impary	,[*]n	

	record imp
		ary		,[5]d10.3

.align
	record
		ndx		,i4
	
.proc

	ary[1] = 0.12
	ary[2] = 3333.44
	ary[3] = 555555.667
	ary[4] = 7777777.888
	ary[5] = 65656.89
	for ndx from 1 thru 5 by 1
		a_impary[ndx] = ary[ndx]
	xreturn
	
.end

{xfMethod(interface="syntst",name="msc_arytst_int",elb="TEST:testelb",id="msc_ary_int")}
subroutine msc_arytst_int
	{xfParameter(length=4, name="p1")}
	req inout   a_intary   ,[*]i4     
	endparams

;.subroutine msc_arytst_int
;	Arguments
;	a_intary	,[*]n	

	record int
		ary		,[5]i4

.align
	record
		ndx		,i4
	
.proc

	ary[1] = 999999999
	ary[2] = 88888888
	ary[3] = 7777777
	ary[4] = 666666
	ary[5] = 55555
	for ndx from 1 thru 5 by 1
		a_intary[ndx] = ary[ndx]
	xreturn
	
.end

{xfMethod(interface="syntst",name="msc_arytst_str",elb="TEST:testelb",id="msc_ary_str")}
subroutine msc_arytst_str
	{xfParameter(length=20, name="p1")}
	req inout   a_strary          ,[*]a20  
	endparams

;.subroutine msc_arytst_str
;	Arguments
;	a_strary	,[*]a	

	record str
		ary		,[20]a5

.align
	record
		ndx		,i4
	
.proc

	ary[1] = 'a'
	ary[2] = "bb"
	ary[3] = "ccc"
	ary[4] = "dddd"
	ary[5] = "eeeee"
	for ndx from 1 thru 5 by 1
		a_strary[ndx] = ary[ndx]
	xreturn
	
.end

{xfMethod(interface="syntst",name="not_in_elb",elb="TEST:testelb",id="not_in_elb")}
subroutine not_in_elb
	{xfParameter(length=5, name="parm1")}
	required in p1, d5
proc
	xreturn
end

{xfMethod(interface="syntst",name="null2122",elb="TEST:testelb",id="null2122")}
subroutine null2122
	{xfParameter(length=5, name="p1")}
	required inout p1, a5
	{xfParameter(length=5, name="p2")}
	required inout p2, a5
	{xfParameter(length=5, name="p3")}
	required inout p3, a5
	{xfParameter(length=5, name="p4")}
	required inout p4, a5
	{xfParameter(length=5, name="p5")}
	required inout p5, a5
	{xfParameter(length=5, name="p6")}
	required inout p6, a5
	{xfParameter(length=5, name="p7")}
	required inout p7, a5
	{xfParameter(length=5, name="p8")}
	required inout p8, a5
	{xfParameter(length=5, name="p9")}
	required inout p9, a5
	{xfParameter(length=5, name="p10")}
	required inout p10, a5
	{xfParameter(length=5, name="p11")}
	required inout p11, a5
	{xfParameter(length=5, name="p12")}
	required inout p12, a5
	{xfParameter(length=5, name="p13")}
	required inout p13, a5
	{xfParameter(length=5, name="p14")}
	required inout p14, a5
	{xfParameter(length=5, name="p15")}
	required inout p15, a5
	{xfParameter(length=5, name="p16")}
	required inout p16, a5
	{xfParameter(length=5, name="p17")}
	required inout p17, a5
	{xfParameter(length=5, name="p18")}
	required inout p18, a5
	{xfParameter(length=5, name="p19")}
	required inout p19, a5
	{xfParameter(length=5, name="p20")}
	required inout p20, a5
	{xfParameter(length=5, name="p21")}
	required inout p21, a5
	{xfParameter(length=5, name="p22")}
	required inout p22, a5
	{xfParameter(length=5, name="p23")}
	required inout p23, a5
proc
	xreturn
end

{xfMethod(interface="syntst",name="optional22",elb="TEST:testelb",id="optional22")}
subroutine optional22

	{xfParameter(name="p1")}
	req inout   p1          ,a5                     ;;

	{xfParameter(name="p2")}
	req inout   p2          ,a5                     ;;

	{xfParameter(name="p3")}
	req inout   p3          ,a5                     ;;

	{xfParameter(name="p4")}
	req inout   p4          ,a5                     ;;

	{xfParameter(name="p5")}
	req inout   p5          ,a5                     ;;

	{xfParameter(name="p6")}
	req inout   p6          ,a5                     ;;

	{xfParameter(name="p7")}
	req inout   p7          ,a5                     ;;

	{xfParameter(name="p8")}
	req inout   p8          ,a5                     ;;

	{xfParameter(name="p9")}
	req inout   p9          ,a5                     ;;

	{xfParameter(name="p10")}
	req inout   p10         ,a5                     ;;

	{xfParameter(name="p11")}
	req inout   p11         ,a5                     ;;

	{xfParameter(name="p12")}
	req inout   p12         ,a5                     ;;

	{xfParameter(name="p13")}
	req inout   p13         ,a5                     ;;

	{xfParameter(name="p14")}
	req inout   p14         ,a5                     ;;

	{xfParameter(name="p15")}
	req inout   p15         ,a5                     ;;

	{xfParameter(name="p16")}
	req inout   p16         ,a5                     ;;

	{xfParameter(name="p17")}
	req inout   p17         ,a5                     ;;

	{xfParameter(name="p18")}
	req inout   p18         ,a5                     ;;

	{xfParameter(name="p19")}
	req inout   p19         ,a5                     ;;

	{xfParameter(name="p20")}
	req inout   p20         ,a5                     ;;

	{xfParameter(name="p21")}
	req inout   p21         ,a5                     ;;

	{xfParameter(name="p22")}
	opt inout   p22         ,a5                     ;;

	{xfParameter(name="p23")}
	req inout   p23         ,a5                     ;;

	endparams

;.subroutine optional22
;	Arguments
;	p1,  	a
;	p2,  	a
;	p3,  	a
;	p4,  	a
;	p5,  	a
;	p6,  	a
;	p7,  	a
;	p8,  	a
;	p9,  	a
;	p10,  	a
;	p11,	a
;	p12,	a
;	p13,	a
;	p14,	a
;	p15,	a
;	p16,	a
;	p17,	a
;	p18,	a
;	p19,	a
;	p20,	a
;	p21,	a
;	p22,	a
;	p23,	a


.proc
	open(3, a, "TEST:testfile")


	writes(3, "optional22 called with 23 parameters")

	writes(3, "optional22 optional 22nd parameter")
	if (%passed(p22)) then
		writes(3, " 22: passed")
	else
		writes(3, " 22: not passed")

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="parm40",elb="TEST:testelb",id="parm40")}
subroutine parm40

	{xfParameter(name="p1")}
	req inout   p1          ,a5                     ;;

	{xfParameter(name="p2")}
	req in      p2          ,a5                     ;;

	{xfParameter(name="p3")}
	req inout   p3          ,a5                     ;;

	{xfParameter(name="p4")}
	req in      p4          ,a5                     ;;

	{xfParameter(name="p5")}
	req inout   p5          ,a5                     ;;

	{xfParameter(name="p6")}
	req in      p6          ,a5                     ;;

	{xfParameter(name="p7")}
	req inout   p7          ,a5                     ;;

	{xfParameter(name="p8")}
	req in      p8          ,a5                     ;;

	{xfParameter(name="p9")}
	req inout   p9          ,a5                     ;;

	{xfParameter(name="p10")}
	req in      p10         ,a5                     ;;

	{xfParameter(name="p11")}
	req inout   p11         ,d10                    ;;

	{xfParameter(name="p12")}
	req in      p12         ,d10                    ;;

	{xfParameter(name="p13")}
	req inout   p13         ,d10                    ;;

	{xfParameter(name="p14")}
	req in      p14         ,d10                    ;;

	{xfParameter(name="p15")}
	req inout   p15         ,d10                    ;;

	{xfParameter(name="p16")}
	req in      p16         ,d10                    ;;

	{xfParameter(name="p17")}
	req inout   p17         ,d10                    ;;

	{xfParameter(name="p18")}
	req in      p18         ,d10                    ;;

	{xfParameter(name="p19")}
	req inout   p19         ,d10                    ;;

	{xfParameter(name="p20")}
	req in      p20         ,d10                    ;;

	{xfParameter(name="p21")}
	req inout   p21         ,d5.2                   ;;

	{xfParameter(name="p22")}
	req in      p22         ,d5.2                   ;;

	{xfParameter(name="p23")}
	req inout   p23         ,d5.2                   ;;

	{xfParameter(name="p24")}
	req in      p24         ,d5.2                   ;;

	{xfParameter(name="p25")}
	req inout   p25         ,d5.2                   ;;

	{xfParameter(name="p26")}
	req in      p26         ,d5.2                   ;;

	{xfParameter(name="p27")}
	req inout   p27         ,d5.2                   ;;

	{xfParameter(name="p28")}
	req in      p28         ,d5.2                   ;;

	{xfParameter(name="p29")}
	req inout   p29         ,d5.2                   ;;

	{xfParameter(name="p30")}
	req in      p30         ,d5.2                   ;;

	{xfParameter(name="p31")}
	req inout   p31         ,i1                     ;;

	{xfParameter(name="p32")}
	req in      p32         ,i1                     ;;

	{xfParameter(name="p33")}
	req inout   p33         ,i1                     ;;

	{xfParameter(name="p34")}
	req in      p34         ,i2                     ;;

	{xfParameter(name="p35")}
	req inout   p35         ,i2                     ;;

	{xfParameter(name="p36")}
	req in      p36         ,i2                     ;;

	{xfParameter(name="p37")}
	req inout   p37         ,i4                     ;;

	{xfParameter(name="p38")}
	req in      p38         ,i4                     ;;

	{xfParameter(name="p39")}
	req inout   p39         ,i4                     ;;

	{xfParameter(name="p40")}
	req in      p40         ,i4                     ;;

	endparams
;.subroutine parm40
;	Arguments
;	p1,  	a
;	p2,  	a
;	p3,  	a
;	p4,  	a
;	p5,  	a
;	p6,  	a
;	p7,  	a
;	p8,  	a
;	p9,  	a
;	p10,  	a
;	p11,  	n
;	p12,  	n
;	p13,  	n
;	p14,  	n
;	p15,  	n
;	p16,  	n
;	p17,  	n
;	p18,  	n
;	p19,  	n
;	p20,  	n
;	p21,  	n
;	p22,  	n
;	p23,  	n
;	p24,  	n
;	p25,  	n
;	p26,  	n
;	p27,  	n
;	p28,  	n
;	p29,  	n
;	p30,  	n
;        p31,    i
;        p32,    i
;        p33,    i
;        p34,    i
;        p35,    i
;        p36,    i
;        p37,    i
;        p38,    i
;        p39,    i
;        p40,    i

.proc
	open(3, a, "TEST:testfile")


	writes(3, "parm40 called with 40 parameters")

	writes(3, "parm40 changing values 9,19,29,39 with")
	p9 = "ZZZZZ"
	writes(3, " 9: " + p9) 
	p19 = 5555555555
	writes(3, " 19: " + %string(p19)) 
	p29 = 333.33
	writes(3, " 29: " + %string(p29)) 
	p39 = 11111111
	writes(3, " 39: " + %string(p39)) 

	writes(3, "")
	writes(3, "")
	close 3
	xreturn
.end

{xfMethod(interface="syntst",name="passstring",elb="TEST:testelb",id="passstring")}
subroutine passstring
	{xfParameter(name="p1", length=65535)}
	req in      p1          ,a	;(in)
	{xfParameter(name="p2", length=65535)}
	req out     p2          ,a	;(out)
	{xfParameter(name="p3", length=65535)}
	req inout   p3          ,a	;(inout)
	endparams

.proc
	p2 = p1
	xreturn
.end

{xfMethod(interface="syntst",name="uninitParams",elb="TEST:testelb",id="uninitParams")}
subroutine uninitParams
	{xfParameter(name="p1")}
	opt out     p1          ,a5                     ;;
	{xfParameter(name="p2")}
	opt out     p2          ,d3                     ;;
	{xfParameter(name="p3")}
	opt out     p3          ,d3.1                   ;;
	{xfParameter(name="p4")}
	opt out     p4          ,i4                     ;;
	endparams
.proc
	xreturn
.end
.endregion

.region "V93IFMethodDispachers"
{xfMethod(interface="V93IF",name="BinArrayStr",elb="TEST:V93ELB",id="BinArrayStr")}
subroutine BinArrayStr
	{xfParameter(name="BINARYTEST",structure="strBinarytest")}
	required in p1, strBinarytest
proc
	xreturn
end
.endregion
