import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Context
import System.Threading.Tasks
import Microsoft.AspNetCore.Builder
import Microsoft.AspNetCore.Http
import Microsoft.Extensions.DependencyInjection
import Microsoft.AspNetCore.Mvc.Filters

namespace Harmony.AspNetCore.Context

	;;this interface gets used if the context needs to be in the middleware pipeline rather than just dependency injected into the controller
	public interface IContextMiddleware
		method InvokeMiddlware, @Task
			context, @HttpContext
			next, @Func<Task>
		endmethod
	endinterface

    public class EagerContextMiddlewareAttribute extends Attribute implements IAsyncResourceFilter
        public ContextType, @Type

        public method EagerContextMiddlewareAttribute
            contextType, @Type
        proc
            this.ContextType = contextType
        endmethod

        public method OnResourceExecutionAsync, @Task 
            context, @ResourceExecutingContext 
			next, @ResourceExecutionDelegate 
        proc
            data internalMiddleware = ^typeof(EagerContextMiddlewareInternal<>).MakeGenericType(ContextType)
            data innerFilter = ^as(Activator.CreateInstance(internalMiddleware), @IAsyncResourceFilter)
            mreturn innerFilter.OnResourceExecutionAsync(context, next)
        endmethod
    endclass


    public class EagerContextMiddlewareInternal<T(IContextBase, class)> implements IAsyncResourceFilter
        public async method OnResourceExecutionAsync, @Task 
            context, @ResourceExecutingContext 
			next, @ResourceExecutionDelegate 
        proc
            data factory = context.HttpContext.RequestServices.GetService<IContextFactory<T>>()
            data contextFactoryProvider, @ContextFactoryServiceProvider<T>
            contextFactoryProvider = new ContextFactoryServiceProvider<T>() { InnerProvider = context.HttpContext.RequestServices, Context = context.HttpContext, Factory = factory }

            data madeContext = await Factory.MakeContextAsync(contextFactoryProvider.InnerProvider)
            contextFactoryProvider.Value = madeContext

            try
            begin
                context.HttpContext.RequestServices = contextFactoryProvider
                await next()
            end
            finally
            begin
                ;;reset the request services to the original provider
                context.HttpContext.RequestServices = contextFactoryProvider.InnerProvider
                if(contextFactoryProvider.Context != ^null && contextFactoryProvider.Value != ^null)
                begin
                    Factory.ReturnContext(contextFactoryProvider.Value)
                end
            end
            endtry

        endmethod
    endclass

    public class ContextFactoryServiceProvider<T(IContextBase, class)> implements IServiceProvider, IDisposable
        public InnerProvider, @IServiceProvider
        public Context, @HttpContext
        public Factory, @IContextFactory<T>
        public SessionId, @string
        public Value, T
        public virtual method GetService, @object
            serviceType, @Type 
            endparams
        proc
            if(serviceType == ^typeof(T)) then
            begin
                if(Value == ^null)
                    Value = Factory.MakeContext(this)
                mreturn Value
            end
            else
                mreturn InnerProvider.GetService(serviceType)
        endmethod
			
        public virtual method Dispose, void
            endparams
        proc
            if(InnerProvider .is. IDisposable)
                ((@IDisposable)InnerProvider).Dispose()
            if(Value .is. IDisposable)
                ((@IDisposable)Value).Dispose()
        endmethod
    endclass


	;;allow the user to specify routes where this context should be applied
	;;maybe insert it at the service provider level
	;;if the context is thread isolated we need to transition threads in the middlware
	;;if the context is free threaded we just need to grab one from a pool
	;;if the context is thread safe its really just a singleton grab the one
	;;if the context is process isolated grab one from the pool
	;;if the context is sticky, run the request through the context pool to allow it to either bind or make a new context
	public static class ContextBaseMiddlewareHelper

		class ContextFactoryHoist<T(IContextBase, class)>
			public Factory, @ContextFactory<T>
			public IsEager, boolean
			public IsSticky, boolean
			public async method InvokeMiddlware, @Task
				context, @HttpContext
				next, @Func<Task>
			proc
				data contextFactoryProvider, @ContextFactoryServiceProvider<T>
				data sessionId = IsSticky ? context.Session.GetString(^typeof(T).Name + "FactorySession") : ""
				if(IsSticky && String.IsNullOrEmpty(sessionId))
				begin
					sessionId = Guid.NewGuid().ToString()
					context.Session.SetString(^typeof(T).Name + "FactorySession", sessionId)
				end

				context.RequestServices = contextFactoryProvider = new ContextFactoryServiceProvider<T>() { InnerProvider = context.RequestServices, Context = context, Factory = Factory, SessionId = sessionId }

				if(IsEager)
				begin
					data madeContext, T
					madeContext = await Factory.MakeContextAsync(sessionId, contextFactoryProvider.InnerProvider)
					contextFactoryProvider.Value = madeContext
					if(madeContext .is. IThreadStickyContext)
					begin
						await ((@IThreadStickyContext)madeContext).TransitionThread()
					end
				end

				try
				begin
					await next()
				end
				finally
				begin
					if(contextFactoryProvider.Context != ^null && contextFactoryProvider.Value != ^null)
					begin
						Factory.ReturnContext(contextFactoryProvider.Value)
					end
				end
				endtry
			endmethod
		endclass

		public static extension method UseContext<T(IContextBase, class)>, @IApplicationBuilder 
			builder, @IApplicationBuilder
			factory, @ContextFactory<T>
		proc
			data hoist = new ContextFactoryHoist<T>() { IsEager = false, IsSticky = factory.IsSessionSticky, Factory = factory}
			builder.Use(hoist.InvokeMiddlware)
			mreturn builder
		endmethod

		;;this creates the context async inside the middleware process instead of blocking DI
		public static extension method UseEagerContext<T(IContextBase, class)>, @IApplicationBuilder 
			builder, @IApplicationBuilder
			factory, @ContextFactory<T>
		proc
			data hoist = new ContextFactoryHoist<T>() { IsEager = true, IsSticky = factory.IsSessionSticky, Factory = factory}
			builder.Use(hoist.InvokeMiddlware)
			mreturn builder
        endmethod

        

        public static extension method AddContextPool<T(IContextBase, class)>, @IServiceCollection 
            services, @IServiceCollection 
        proc
            services.AddScoped<PoolLease<T>, PoolLease<T>>()
            services.AddScoped<T>(RouteServiceLease<T>)
            mreturn services
        endmethod

        private static method RouteServiceLease<T(IContextBase, class)>, T
            sp, @IServiceProvider
        proc
            data poolLease = sp.GetService<PoolLease<T>>()
            mreturn poolLease.Instance
        endmethod


	endclass
    class PoolLease<T(IContextBase, class)> implements IDisposable
        public Instance, T
        public Factory, @IContextFactory<T>
        public method PoolLease
            factory, @IContextFactory<T>
            sp, @IServiceProvider
        proc
            this.Factory = factory
            this.Instance = factory.MakeContext(sp)
        endmethod
            
        public virtual method Dispose, void
            endparams
        proc
            Factory.ReturnContext(Instance)
        endmethod
    endclass
endnamespace
