;;*****************************************************************************
;;
;; Title:       TestcarMetaData.dbl
;;
;; Description: Defines meta data associated with a Testcar model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    ;;; <summary>
    ;;; Global structure representing a Testcar record.
    ;;; </summary>
    .include "TESTCAR" repository, public structure="strTestcar", end

    ;;; <summary>
    ;;; Exposes metadata relating to the Testcar model class.
    ;;; </summary>
    public partial class TestcarMetadata extends DataObjectMetadataBase

        ;; Define custom property formatters

        ;;; <summary>
        ;;; Constructs an new TestcarMetadata object.
        ;;; </summary>
        public method TestcarMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "TESTCAR"
            RPSStructureSize = ^size(strTestcar)

            ;; Define fields
            AddFieldInfo("Id", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("Name", "ALPHA", 20, 7, 0, false)
            AddFieldInfo("Lotid", "DECIMAL", 6, 27, 0, false)
            AddFieldInfo("Owner1", "DECIMAL", 6, 33, 0, false)
            AddFieldInfo("Owner2", "DECIMAL", 6, 39, 0, false)
            AddFieldInfo("Owner3", "DECIMAL", 6, 45, 0, false)

            ;; Define relations
            AddFieldInfo("REL_Testcarlot", "DATAOBJECT", 0, 0, 0, false)
            AddFieldInfo("REL_Testcarowner1", "DATAOBJECT", 0, 0, 0, false)
            AddFieldInfo("REL_Testcarowner2", "DATAOBJECT", 0, 0, 0, false)
            AddFieldInfo("REL_Testcarowner3", "DATAOBJECT", 0, 0, 0, false)

            ;; Define all fields that are associated wity key segments
            AddKeyInfo(0, "Id")
            AddKeyInfo(1, "Lotid")
            AddKeyInfo(2, "Owner1")
            AddKeyInfo(3, "Owner2")
            AddKeyInfo(4, "Owner3")

            ;; Define the composition of access keys

            data Carid_KeyParts = new FieldDataDefinition[1]
            Carid_KeyParts[1] = GetFieldByName("Id")
            AddFieldInfo("KEY_CARID", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Carid_KeyParts)

            data Lotid_KeyParts = new FieldDataDefinition[1]
            Lotid_KeyParts[1] = GetFieldByName("Lotid")
            AddFieldInfo("KEY_LOTID", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Lotid_KeyParts)

            data Ownerid1_KeyParts = new FieldDataDefinition[1]
            Ownerid1_KeyParts[1] = GetFieldByName("Owner1")
            AddFieldInfo("KEY_OWNERID1", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Ownerid1_KeyParts)

            data Ownerid2_KeyParts = new FieldDataDefinition[1]
            Ownerid2_KeyParts[1] = GetFieldByName("Owner2")
            AddFieldInfo("KEY_OWNERID2", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Ownerid2_KeyParts)

            data Ownerid3_KeyParts = new FieldDataDefinition[1]
            Ownerid3_KeyParts[1] = GetFieldByName("Owner3")
            AddFieldInfo("KEY_OWNERID3", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Ownerid3_KeyParts)


            ;;If we have an InitializeCustomFields method then call it.
            InitializeCustomFields()

        endmethod

        ;;; <summary>
        ;;; Returns a new Testcar object containing data from a record and a GRFA.
        ;;; The related data properties (REL_Testcarlot, REL_Testcarowner1, REL_Testcarowner2 and REL_Testcarowner3) will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Testcar object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new Testcar(dataArea, grfa)
        endmethod

        ;;; <summary>
        ;;; Returns a new Testcar object containing data from a record and a GRFA.
        ;;; The related data properties (REL_Testcarlot, REL_Testcarowner1, REL_Testcarowner2 and REL_Testcarowner3) will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Testcar object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties (REL_Testcarlot, REL_Testcarowner1, REL_Testcarowner2 and REL_Testcarowner3) to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newTestcar = new Testcar(dataArea, grfa)
            UpdateExistingJoin(newTestcar, joinedObjects)
            mreturn newTestcar
        endmethod
        
        public override method UpdateExistingJoin, void
            required in existing, @DataObjectBase
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            UpdateExistingJoin((@Testcar)existing, joinedObjects)
        endmethod

        public method UpdateExistingJoin, void
            required in existing, @Testcar
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data joinedObject, KeyValuePair<String, Object>
            foreach joinedObject in joinedObjects
            begin
                using joinedObject.Key select
                ("REL_Testcarlot"),
                begin
                    if(existing.REL_Testcarlot == ^null)
                    begin
                        existing.REL_Testcarlot = (@Testcarlot)joinedObject.Value
                    end
                end
                ("REL_Testcarowner1"),
                begin
                    if(existing.REL_Testcarowner1 == ^null)
                    begin
                        existing.REL_Testcarowner1 = (@Testcarowner1)joinedObject.Value
                    end
                end
                ("REL_Testcarowner2"),
                begin
                    if(existing.REL_Testcarowner2 == ^null)
                    begin
                        existing.REL_Testcarowner2 = (@Testcarowner2)joinedObject.Value
                    end
                end
                ("REL_Testcarowner3"),
                begin
                    if(existing.REL_Testcarowner3 == ^null)
                    begin
                        existing.REL_Testcarowner3 = (@Testcarowner3)joinedObject.Value
                    end
                end
                endusing
            end
        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                Id, D6
            endrecord
            stack record key1
                Lotid, D6
            endrecord
            stack record key2
                Owner1, D6
            endrecord
            stack record key3
                Owner2, D6
            endrecord
            stack record key4
                Owner3, D6
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.Id, "Id", parts))<6 && segValueLength>0)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            (1),
            begin
                if((segValueLength=KeyValueHelper(key1.Lotid, "Lotid", parts))<6 && segValueLength>0)
                    mreturn key1(1:startPos+segValueLength)
                mreturn key1
            end
            (2),
            begin
                if((segValueLength=KeyValueHelper(key2.Owner1, "Owner1", parts))<6 && segValueLength>0)
                    mreturn key2(1:startPos+segValueLength)
                mreturn key2
            end
            (3),
            begin
                if((segValueLength=KeyValueHelper(key3.Owner2, "Owner2", parts))<6 && segValueLength>0)
                    mreturn key3(1:startPos+segValueLength)
                mreturn key3
            end
            (4),
            begin
                if((segValueLength=KeyValueHelper(key4.Owner3, "Owner3", parts))<6 && segValueLength>0)
                    mreturn key4(1:startPos+segValueLength)
                mreturn key4
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in TestcarMetadata.FormatKeyLiteral",keyNumber))

        endmethod

        ;;;<summary>
        ;;; Provide a partial method to allow for initialization of custom fields.
        ;;;</summary>
        private partial method InitializeCustomFields, void

        endmethod

    endclass

endnamespace
