;;*****************************************************************************
;;
;; Title:       Testcar.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure TESTCAR and from the data file DAT:testcar.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Testcar extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strTestcar
        private mOriginalSynergyData, strTestcar
        protected mGlobalRFA  ,a10

        private static sMetadata, @TestcarMetadata

.region "Constructors"

        static method Testcar
        proc
            sMetadata = new TestcarMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Testcar), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Testcar
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Testcar
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Car ID
        ;;; </summary>
        {Key}
        {Range(0,999999, ErrorMessage="Car ID must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Name of car
        ;;; </summary>
        {StringLength(20, ErrorMessage="Name of car cannot exceed 20 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Name, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Car lot ID
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Car lot ID must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Lotid, int
            method get
            proc
                mreturn (int)mSynergyData.lotid
            endmethod
            method set
            proc
                mSynergyData.lotid = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Car owner 1
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Car owner 1 must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Owner1, int
            method get
            proc
                mreturn (int)mSynergyData.owner1
            endmethod
            method set
            proc
                mSynergyData.owner1 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Car owner 2
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Car owner 2 must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Owner2, int
            method get
            proc
                mreturn (int)mSynergyData.owner2
            endmethod
            method set
            proc
                mSynergyData.owner2 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Car owner 3
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Car owner 3 must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Owner3, int
            method get
            proc
                mreturn (int)mSynergyData.owner3
            endmethod
            method set
            proc
                mSynergyData.owner3 = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[6]
        endmethod

.endregion

.region "Relationships to other entities"

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; TESTCAR.LOTID (one) --> (one) --> (many) TESTCARLOT.ID
        ;;; </summary>
        public readwrite property REL_Testcarlot, @Testcarlot

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; TESTCAR.OWNERID1 (one) --> (one) --> (many) TESTCAROWNER1.OWNERID
        ;;; </summary>
        public readwrite property REL_Testcarowner1, @Testcarowner1

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; TESTCAR.OWNERID2 (one) --> (one) --> (many) TESTCAROWNER2.OWNERID
        ;;; </summary>
        public readwrite property REL_Testcarowner2, @Testcarowner2

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; TESTCAR.OWNERID3 (one) --> (one) --> (many) TESTCAROWNER3.OWNERID
        ;;; </summary>
        public readwrite property REL_Testcarowner3, @Testcarowner3

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data for relations
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;No relation validation if the record is being deleted
            if (vType == ValidationType.Delete)
                mreturn

            ;;Get an instance of IDataObjectProvider
            data dataObjectProvider, @IDataObjectProvider, sp.GetService<IDataObjectProvider>()

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 1 (REL_Testcarlot)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 2 (REL_Testcarowner1)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 3 (REL_Testcarowner2)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 4 (REL_Testcarowner3)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;If we have a ValidateCustom method, call it

            ValidateCustom(vType,sp)

        endmethod


        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        {IgnoreDataMember}
        public property KEY_CARID, string
            method get
            proc
                mreturn Id.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_LOTID, string
            method get
            proc
                mreturn Lotid.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_OWNERID1, string
            method get
            proc
                mreturn Owner1.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_OWNERID2, string
            method get
            proc
                mreturn Owner2.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_OWNERID3, string
            method get
            proc
                mreturn Owner3.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

.endregion

    endclass

endnamespace
