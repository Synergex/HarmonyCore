;;*****************************************************************************
;;
;; Title:       CustomerNoteMetaData.dbl
;;
;; Description: Defines meta data associated with a CustomerNote model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    ;;; <summary>
    ;;; Global structure representing a CustomerNote record.
    ;;; </summary>
    .include "CUSTOMER_NOTES" repository, public structure="strCustomerNote", end

    ;;; <summary>
    ;;; Exposes metadata relating to the CustomerNote model class.
    ;;; </summary>
    public partial class CustomerNoteMetadata extends DataObjectMetadataBase

        ;; Define custom property formatters

        ;;; <summary>
        ;;; Constructs an new CustomerNoteMetadata object.
        ;;; </summary>
        public method CustomerNoteMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "CUSTOMER_NOTES"
            RPSStructureSize = ^size(strCustomerNote)

            ;; Define fields
            AddFieldInfo("CustomerNumber", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("NoteNumber", "DECIMAL", 3, 7, 0, false)
            AddFieldInfo("NoteText", "ALPHA", 30720, 10, 0, false)

            ;; Define relations
            AddFieldInfo("REL_Customer", "DATAOBJECT", 0, 0, 0, false)

            ;; Define all fields that are associated wity key segments
            AddKeyInfo(0, "CustomerNumber")

            ;; Define the composition of access keys

            data CustomerNumber_KeyParts = new FieldDataDefinition[1]
            CustomerNumber_KeyParts[1] = GetFieldByName("CustomerNumber")
            AddFieldInfo("KEY_CUSTOMER_NUMBER", "COMPOSITE", 0, 0, 0, false, ^null, ^null, CustomerNumber_KeyParts)


            ;;If we have an InitializeCustomFields method then call it.
            InitializeCustomFields()

        endmethod

        ;;; <summary>
        ;;; Returns a new CustomerNote object containing data from a record and a GRFA.
        ;;; The related data properties (REL_Customer) will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new CustomerNote object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new CustomerNote(dataArea, grfa)
        endmethod

        ;;; <summary>
        ;;; Returns a new CustomerNote object containing data from a record and a GRFA.
        ;;; The related data properties (REL_Customer) will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new CustomerNote object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties (REL_Customer) to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newCustomerNote = new CustomerNote(dataArea, grfa)
            data joinedObject, KeyValuePair<String, Object>
            foreach joinedObject in joinedObjects
            begin
                using joinedObject.Key select
                ("REL_Customer"),
                    newCustomerNote.REL_Customer = (@Customer)joinedObject.Value
                endusing
            end

            mreturn newCustomerNote

        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                CustomerNumber, D6
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.CustomerNumber, "CustomerNumber", parts))<6 && segValueLength>0)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in CustomerNoteMetadata.FormatKeyLiteral",keyNumber))

        endmethod

        ;;;<summary>
        ;;; Provide a partial method to allow for initialization of custom fields.
        ;;;</summary>
        private partial method InitializeCustomFields, void

        endmethod

    endclass

endnamespace
