;;*****************************************************************************
;;
;; Title:       DbContext.dbl
;;
;; Description: OData DbContext class
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.EF.Extensions
import Microsoft.EntityFrameworkCore
import System.Collections.Generic
import System.Linq.Expressions
import Services.Models

namespace Services.Models

    ;;; <summary>
    ;;;
    ;;; </summary>
    public partial class DbContext extends Microsoft.EntityFrameworkCore.DbContext

        ;;; <summary>
        ;;; Construct a new DbContext.
        ;;; </summary>
        public method DbContext
            options, @DbContextOptions<DbContext>
            endparams
            parent(options)
        proc

        endmethod

        ;;; <summary>
        ;;; Exposes Customer data.
        ;;; </summary>
        public readwrite property Customers, @DbSet<Customer>

        ;;; <summary>
        ;;; Exposes CustomerNote data.
        ;;; </summary>
        public readwrite property CustomerNotes, @DbSet<CustomerNote>

        ;;; <summary>
        ;;; Exposes Item data.
        ;;; </summary>
        public readwrite property Items, @DbSet<Item>

        ;;; <summary>
        ;;; Exposes Order data.
        ;;; </summary>
        public readwrite property Orders, @DbSet<Order>

        ;;; <summary>
        ;;; Exposes OrderItem data.
        ;;; </summary>
        public readwrite property OrderItems, @DbSet<OrderItem>

        ;;; <summary>
        ;;; Exposes Vendor data.
        ;;; </summary>
        public readwrite property Vendors, @DbSet<Vendor>

        ;;; <summary>
        ;;; Exposes CustomerEx data.
        ;;; </summary>
        public readwrite property CustomerExs, @DbSet<CustomerEx>

        ;;; <summary>
        ;;; Exposes Nonuniquepk data.
        ;;; </summary>
        public readwrite property Nonuniquepks, @DbSet<Nonuniquepk>

        ;;; <summary>
        ;;; Exposes Differentpk data.
        ;;; </summary>
        public readwrite property Differentpks, @DbSet<Differentpk>

        ;;; <summary>
        ;;; Exposes Testcar data.
        ;;; </summary>
        public readwrite property Testcars, @DbSet<Testcar>

        ;;; <summary>
        ;;; Exposes Testcarlot data.
        ;;; </summary>
        public readwrite property Testcarlots, @DbSet<Testcarlot>

        ;;; <summary>
        ;;; Exposes Testcarowner1 data.
        ;;; </summary>
        public readwrite property Testcarowner1s, @DbSet<Testcarowner1>

        ;;; <summary>
        ;;; Exposes Testcarowner2 data.
        ;;; </summary>
        public readwrite property Testcarowner2s, @DbSet<Testcarowner2>

        ;;; <summary>
        ;;; Exposes Testcarowner3 data.
        ;;; </summary>
        public readwrite property Testcarowner3s, @DbSet<Testcarowner3>

        ;;; <summary>
        ;;;
        ;;; </summary>
        protected override method OnModelCreating, void
            parm, @ModelBuilder
        proc
            parm.Ignore(^typeof(AlphaDesc))
            parm.Ignore(^typeof(DataObjectMetadataBase))

.region "Composite key definitions"

            ;;Entities with a single primary key segment have the key declared to EF via a
            ;;{Key} attribute on the appropriate property in the data model, but only one {key}
            ;;attribute can be used in a class, so keys with multiple segments are defined
            ;;using the "Fluent API" here.

            parm.Entity<OrderItem>().HasKey("OrderNumber","ItemNumber")

.endregion

.region "Tag filtering"

            ;;This code will currently only work for tags with:
            ;;   a single "field .operator. value" expression
            ;;   multiple "field .operator. value" expressions connected by AND operators
            ;;   multiple "field .operator. value" expressions connected by OR operators
            ;;
            ;;The code will not work for multi-part tags that use a combination of AND and OR operators

            data tagExpressions, @List<Tuple<Expression,TagConnector>>

.endregion

.region "Entity Relationships"

            ;;--------------------------------------
            ;; Relationships from CUSTOMER

            ;; CUSTOMER.CUSTOMER_NUMBER (one) --> (many) --> (one) ORDER.CUSTOMER_NUMBER
            ;;    Type          : D
            ;;    From segments : CUSTOMER_NUMBER(D6) 
            ;;    To segments   : CUSTOMER_NUMBER(D6) 

            parm.AddOneToManyToOneRelation<Customer, Order>("REL_CustomerOrders", "KEY_CUSTOMER_NUMBER", "REL_Customer", "KEY_CUSTOMER_NUMBER")
            ;; CUSTOMER.FAVORITE_ITEM (one) --> (one) ITEM.ITEM_NUMBER
            ;;    Type          : C
            ;;    From segments : FAVORITE_ITEM(D6) 
            ;;    To segments   : ITEM_NUMBER(D6) 

            parm.AddOneToOneRelation<Customer, Item>("REL_CustomerFavoriteItem", "KEY_FAVORITE_ITEM", "KEY_ITEM_NUMBER")
            ;; CUSTOMER.CUSTOMER_NUMBER (one) --> (many) --> (one) CUSTOMER_NOTE.CUSTOMER_NUMBER
            ;;    Type          : D
            ;;    From segments : CUSTOMER_NUMBER(D6) 
            ;;    To segments   : CUSTOMER_NUMBER(D6) 

            parm.AddOneToManyToOneRelation<Customer, CustomerNote>("REL_CustomerNotes", "KEY_CUSTOMER_NUMBER", "REL_Customer", "KEY_CUSTOMER_NUMBER")
             ;; CUSTOMER.CUSTOMER_NUMBER (one) --> (one) --> (one) CUSTOMER_EX.PRIMARY
             ;;    Type          : B
             ;;    From segments : CUSTOMER_NUMBER(D6) 
             ;;    To segments   : CUSTOMERID(D6) 

             parm.AddOneToOneToOneRelation<Customer, CustomerEx>("REL_CustomerEx", "KEY_CUSTOMER_NUMBER", "REL_Customer", "KEY_PRIMARY")
             ;; CUSTOMER.CUSTOMER_NUMBER (one) --> (one) --> (one) DIFFERENTPK.ID
             ;;    Type          : B
             ;;    From segments : CUSTOMER_NUMBER(D6) 
             ;;    To segments   : ID(D6) 

             parm.AddOneToOneToOneRelation<Customer, Differentpk>("REL_Differentpk", "KEY_CUSTOMER_NUMBER", "REL_Customer", "KEY_ID")
            ;;--------------------------------------
            ;; Relationships from CUSTOMER_NOTE

             ;; CUSTOMER_NOTE.CUSTOMER_NUMBER (many) --> (one) --> (many) CUSTOMER.CUSTOMER_NUMBER
             ;;    Type          : A
             ;;    From segments : CUSTOMER_NUMBER(D6) 
             ;;    To segments   : CUSTOMER_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<CustomerNote, Customer>("REL_Customer", "KEY_CUSTOMER_NUMBER", "REL_CustomerNotes", "KEY_CUSTOMER_NUMBER")
            ;;--------------------------------------
            ;; Relationships from ITEM

             ;; ITEM.VENDOR_NUMBER (many) --> (one) --> (many) VENDOR.VENDOR_NUMBER
             ;;    Type          : A
             ;;    From segments : VENDOR_NUMBER(D6) 
             ;;    To segments   : VENDOR_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<Item, Vendor>("REL_Vendor", "KEY_VENDOR_NUMBER", "REL_Items", "KEY_VENDOR_NUMBER")
            ;; ITEM.ITEM_NUMBER (one) --> (many) --> (one) ORDER_ITEM.ITEM_ORDERED
            ;;    Type          : D
            ;;    From segments : ITEM_NUMBER(D6) 
            ;;    To segments   : ITEM_ORDERED(D6) 

            parm.AddOneToManyToOneRelation<Item, OrderItem>("REL_OrderItems", "KEY_ITEM_NUMBER", "REL_Item", "KEY_ITEM_ORDERED")
            ;;--------------------------------------
            ;; Relationships from ORDER

            ;; ORDER.ORDER_NUMBER (one) --> (many) --> (one) ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM
            ;;    Type          : D
            ;;    From segments : ORDER_NUMBER(D6) 
            ;;    To segments   : ORDER_NUMBER(D6) 

            parm.AddOneToManyToOneRelation<Order, OrderItem>("REL_OrderItems", "KEY_ORDER_NUMBER", "REL_Order", "KEY_ORDER_NUMBER_AND_LINE_ITEM")
             ;; ORDER.CUSTOMER_NUMBER (many) --> (one) --> (many) CUSTOMER.CUSTOMER_NUMBER
             ;;    Type          : A
             ;;    From segments : CUSTOMER_NUMBER(D6) 
             ;;    To segments   : CUSTOMER_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<Order, Customer>("REL_Customer", "KEY_CUSTOMER_NUMBER", "REL_CustomerOrders", "KEY_CUSTOMER_NUMBER")
            ;;--------------------------------------
            ;; Relationships from ORDER_ITEM

             ;; ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM (many) --> (one) --> (many) ORDER.ORDER_NUMBER
             ;;    Type          : A
             ;;    From segments : ORDER_NUMBER(D6) 
             ;;    To segments   : ORDER_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<OrderItem, Order>("REL_Order", "KEY_ORDER_NUMBER_AND_LINE_ITEM", "REL_OrderItems", "KEY_ORDER_NUMBER")
             ;; ORDER_ITEM.ITEM_ORDERED (many) --> (one) --> (many) ITEM.ITEM_NUMBER
             ;;    Type          : A
             ;;    From segments : ITEM_ORDERED(D6) 
             ;;    To segments   : ITEM_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<OrderItem, Item>("REL_Item", "KEY_ITEM_ORDERED", "REL_OrderItems", "KEY_ITEM_NUMBER")
            ;;--------------------------------------
            ;; Relationships from VENDOR

            ;; VENDOR.VENDOR_NUMBER (one) --> (many) --> (one) ITEM.VENDOR_NUMBER
            ;;    Type          : D
            ;;    From segments : VENDOR_NUMBER(D6) 
            ;;    To segments   : VENDOR_NUMBER(D6) 

            parm.AddOneToManyToOneRelation<Vendor, Item>("REL_Items", "KEY_VENDOR_NUMBER", "REL_Vendor", "KEY_VENDOR_NUMBER")
            ;;--------------------------------------
            ;; Relationships from CUSTOMER_EX

             ;; CUSTOMER_EX.PRIMARY (one) --> (one) --> (one) CUSTOMER.CUSTOMER_NUMBER
             ;;    Type          : B
             ;;    From segments : CUSTOMERID(D6) 
             ;;    To segments   : CUSTOMER_NUMBER(D6) 

             parm.AddOneToOneToOneRelation<CustomerEx, Customer>("REL_Customer", "KEY_PRIMARY", "REL_CustomerEx", "KEY_CUSTOMER_NUMBER")
            ;;--------------------------------------
            ;; Relationships from DIFFERENTPK

             ;; DIFFERENTPK.ID (one) --> (one) --> (one) CUSTOMER.CUSTOMER_NUMBER
             ;;    Type          : B
             ;;    From segments : ID(D6) 
             ;;    To segments   : CUSTOMER_NUMBER(D6) 

             parm.AddOneToOneToOneRelation<Differentpk, Customer>("REL_Customer", "KEY_ID", "REL_Differentpk", "KEY_CUSTOMER_NUMBER")
            ;;--------------------------------------
            ;; Relationships from TESTCAR

             ;; TESTCAR.LOTID (many) --> (one) --> (many) TESTCARLOT.ID
             ;;    Type          : A
             ;;    From segments : LOTID(D6) 
             ;;    To segments   : ID(D6) 

             parm.AddOneToOneToManyRelation<Testcar, Testcarlot>("REL_Testcarlot", "KEY_LOTID", "REL_Testcars", "KEY_ID")
             ;; TESTCAR.OWNERID1 (many) --> (one) --> (many) TESTCAROWNER1.OWNERID
             ;;    Type          : A
             ;;    From segments : OWNER1(D6) 
             ;;    To segments   : ID(D6) 

             parm.AddOneToOneToManyRelation<Testcar, Testcarowner1>("REL_Testcarowner1", "KEY_OWNERID1", "REL_Testcars", "KEY_OWNERID")
             ;; TESTCAR.OWNERID2 (many) --> (one) --> (many) TESTCAROWNER2.OWNERID
             ;;    Type          : A
             ;;    From segments : OWNER2(D6) 
             ;;    To segments   : ID(D6) 

             parm.AddOneToOneToManyRelation<Testcar, Testcarowner2>("REL_Testcarowner2", "KEY_OWNERID2", "REL_Testcars", "KEY_OWNERID")
             ;; TESTCAR.OWNERID3 (many) --> (one) --> (many) TESTCAROWNER3.OWNERID
             ;;    Type          : A
             ;;    From segments : OWNER3(D6) 
             ;;    To segments   : ID(D6) 

             parm.AddOneToOneToManyRelation<Testcar, Testcarowner3>("REL_Testcarowner3", "KEY_OWNERID3", "REL_Testcars", "KEY_OWNERID")
            ;;--------------------------------------
            ;; Relationships from TESTCARLOT

            ;; TESTCARLOT.ID (one) --> (many) --> (one) TESTCAR.LOTID
            ;;    Type          : D
            ;;    From segments : ID(D6) 
            ;;    To segments   : LOTID(D6) 

            parm.AddOneToManyToOneRelation<Testcarlot, Testcar>("REL_Testcars", "KEY_ID", "REL_Testcarlot", "KEY_LOTID")
            ;;--------------------------------------
            ;; Relationships from TESTCAROWNER1

            ;; TESTCAROWNER1.OWNERID (one) --> (many) --> (one) TESTCAR.OWNERID1
            ;;    Type          : D
            ;;    From segments : ID(D6) 
            ;;    To segments   : OWNER1(D6) 

            parm.AddOneToManyToOneRelation<Testcarowner1, Testcar>("REL_Testcars", "KEY_OWNERID", "REL_Testcarowner1", "KEY_OWNERID1")
            ;;--------------------------------------
            ;; Relationships from TESTCAROWNER2

            ;; TESTCAROWNER2.OWNERID (one) --> (many) --> (one) TESTCAR.OWNERID2
            ;;    Type          : D
            ;;    From segments : ID(D6) 
            ;;    To segments   : OWNER2(D6) 

            parm.AddOneToManyToOneRelation<Testcarowner2, Testcar>("REL_Testcars", "KEY_OWNERID", "REL_Testcarowner2", "KEY_OWNERID2")
            ;;--------------------------------------
            ;; Relationships from TESTCAROWNER3

            ;; TESTCAROWNER3.OWNERID (one) --> (many) --> (one) TESTCAR.OWNERID3
            ;;    Type          : D
            ;;    From segments : ID(D6) 
            ;;    To segments   : OWNER3(D6) 

            parm.AddOneToManyToOneRelation<Testcarowner3, Testcar>("REL_Testcars", "KEY_OWNERID", "REL_Testcarowner3", "KEY_OWNERID3")
.endregion

            ;;-----------------------------------------------
            ;;If we have a OnModelCreatingCustom method, call it

            OnModelCreatingCustom(parm)

            ;;-----------------------------------------------
            ;;All done, call the code in our base class

            parent.OnModelCreating(parm)

        endmethod

        ;;Declare the OnModelCreatingCustom partial method
        ;;This method can be implemented in a partial class to provide custom code
        partial static method OnModelCreatingCustom, void
            builder, @ModelBuilder
        endmethod

    endclass

endnamespace