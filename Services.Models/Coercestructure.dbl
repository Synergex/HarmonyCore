;;*****************************************************************************
;;
;; Title:       Coercestructure.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure COERCESTRUCTURE.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Coercestructure extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strCoercestructure
        private mOriginalSynergyData, strCoercestructure
        protected mGlobalRFA  ,a10

        private static sMetadata, @CoercestructureMetadata

.region "Constructors"

        static method Coercestructure
        proc
            sMetadata = new CoercestructureMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Coercestructure), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Coercestructure
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Coercestructure
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999999, ErrorMessage=" must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decint, int
            method get
            proc
                mreturn (int)mSynergyData.decint
            endmethod
            method set
            proc
                mSynergyData.decint = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9, ErrorMessage=" must be between 0 and 9. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decbool, int
            method get
            proc
                mreturn (int)mSynergyData.decbool
            endmethod
            method set
            proc
                mSynergyData.decbool = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9, ErrorMessage=" must be between 0 and 9. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decbyte, int
            method get
            proc
                mreturn (int)mSynergyData.decbyte
            endmethod
            method set
            proc
                mSynergyData.decbyte = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99, ErrorMessage=" must be between 0 and 99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decshort, int
            method get
            proc
                mreturn (int)mSynergyData.decshort
            endmethod
            method set
            proc
                mSynergyData.decshort = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999999999, ErrorMessage=" must be between 0 and 9999999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Declong, long
            method get
            proc
                mreturn (long)mSynergyData.declong
            endmethod
            method set
            proc
                mSynergyData.declong = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9, ErrorMessage=" must be between 0 and 9. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decsbyte, int
            method get
            proc
                mreturn (int)mSynergyData.decsbyte
            endmethod
            method set
            proc
                mSynergyData.decsbyte = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999, ErrorMessage=" must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decuint, int
            method get
            proc
                mreturn (int)mSynergyData.decuint
            endmethod
            method set
            proc
                mSynergyData.decuint = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99, ErrorMessage=" must be between 0 and 99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decushort, int
            method get
            proc
                mreturn (int)mSynergyData.decushort
            endmethod
            method set
            proc
                mSynergyData.decushort = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999999999, ErrorMessage=" must be between 0 and 9999999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Deculong, long
            method get
            proc
                mreturn (long)mSynergyData.deculong
            endmethod
            method set
            proc
                mSynergyData.deculong = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property Decdatetime, DateTime
            method get
            proc
                mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.decdatetime, ^null, "YYYYMMDD", ^null)
            endmethod
            method set
            proc
            SynergyConverter.ConvertBack(value, mSynergyData.decdatetime, "YYYYMMDD", ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property Nulldatetime, Nullable<DateTime>
            method get
            proc
                mreturn (Nullable<DateTime>)SynergyDecimalDateConverter.Convert(mSynergyData.nulldatetime, ^null, "YYYYMMDD", ^null)
            endmethod
            method set
            proc
            SynergyConverter.ConvertBack(value, mSynergyData.nulldatetime, "YYYYMMDD", ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999.99, ErrorMessage=" must be between 0 and 99999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Iddecimal, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.iddecimal, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.iddecimal = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999.99, ErrorMessage=" must be between 0 and 99999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Iddouble, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.iddouble, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.iddouble = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999.99, ErrorMessage=" must be between 0 and 99999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Idfloat, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.idfloat, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.idfloat = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage=" must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intint, int
            method get
            proc
                mreturn (int)mSynergyData.intint
            endmethod
            method set
            proc
                mSynergyData.intint = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,127, ErrorMessage=" must be between 0 and 127. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intbool, int
            method get
            proc
                mreturn (int)mSynergyData.intbool
            endmethod
            method set
            proc
                mSynergyData.intbool = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,127, ErrorMessage=" must be between 0 and 127. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intbyte, int
            method get
            proc
                mreturn (int)mSynergyData.intbyte
            endmethod
            method set
            proc
                mSynergyData.intbyte = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,32767, ErrorMessage=" must be between 0 and 32767. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intshort, int
            method get
            proc
                mreturn (int)mSynergyData.intshort
            endmethod
            method set
            proc
                mSynergyData.intshort = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9223372036854775807, ErrorMessage=" must be between 0 and 9223372036854775807. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intlong, long
            method get
            proc
                mreturn (long)mSynergyData.intlong
            endmethod
            method set
            proc
                mSynergyData.intlong = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,127, ErrorMessage=" must be between 0 and 127. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intsbyte, int
            method get
            proc
                mreturn (int)mSynergyData.intsbyte
            endmethod
            method set
            proc
                mSynergyData.intsbyte = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage=" must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intuint, int
            method get
            proc
                mreturn (int)mSynergyData.intuint
            endmethod
            method set
            proc
                mSynergyData.intuint = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,32767, ErrorMessage=" must be between 0 and 32767. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intushort, int
            method get
            proc
                mreturn (int)mSynergyData.intushort
            endmethod
            method set
            proc
                mSynergyData.intushort = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9223372036854775807, ErrorMessage=" must be between 0 and 9223372036854775807. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intulong, long
            method get
            proc
                mreturn (long)mSynergyData.intulong
            endmethod
            method set
            proc
                mSynergyData.intulong = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[23]
        endmethod

.endregion

    endclass

endnamespace
