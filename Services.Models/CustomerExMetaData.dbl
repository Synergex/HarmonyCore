;;*****************************************************************************
;;
;; Title:       CustomerExMetaData.dbl
;;
;; Description: Defines meta data associated with a CustomerEx model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    ;;; <summary>
    ;;; Global structure representing a CustomerEx record.
    ;;; </summary>
    .include "CUSTOMER_EX" repository, public structure="strCustomerEx", end

    ;;; <summary>
    ;;; Exposes metadata relating to the CustomerEx model class.
    ;;; </summary>
    public partial class CustomerExMetadata extends DataObjectMetadataBase

        ;; Define custom property formatters

        ;;; <summary>
        ;;; Constructs an new CustomerExMetadata object.
        ;;; </summary>
        public method CustomerExMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "CUSTOMER_EX"
            RPSStructureSize = ^size(strCustomerEx)

            ;; Define fields
            AddFieldInfo("Customerid", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("Extradata", "ALPHA", 128, 7, 0, false)

            ;; Define relations
            AddFieldInfo("REL_Customer", "DATAOBJECT", 0, 0, 0, false)

            ;; Define all fields that are associated wity key segments
            AddKeyInfo(0, "Customerid")

            ;; Define the composition of access keys

            data Primary_KeyParts = new FieldDataDefinition[1]
            Primary_KeyParts[1] = GetFieldByName("Customerid")
            AddFieldInfo("KEY_PRIMARY", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Primary_KeyParts)


            ;;If we have an InitializeCustomFields method then call it.
            InitializeCustomFields()

        endmethod

        ;;; <summary>
        ;;; Returns a new CustomerEx object containing data from a record and a GRFA.
        ;;; The related data properties () will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new CustomerEx object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new CustomerEx(dataArea, grfa)
        endmethod

        ;;; <summary>
        ;;; Returns a new CustomerEx object containing data from a record and a GRFA.
        ;;; The related data properties () will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new CustomerEx object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties () to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newCustomerEx = new CustomerEx(dataArea, grfa)
            UpdateExistingJoin(newCustomerEx, joinedObjects)
            mreturn newCustomerEx
        endmethod
        
        public override method UpdateExistingJoin, void
            required in existing, @DataObjectBase
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            UpdateExistingJoin((@CustomerEx)existing, joinedObjects)
        endmethod

        public method UpdateExistingJoin, void
            required in existing, @CustomerEx
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data joinedObject, KeyValuePair<String, Object>
            foreach joinedObject in joinedObjects
            begin
                using joinedObject.Key select
                ("REL_Customer"),
                begin
                    if(existing.REL_Customer == ^null)
                    begin
                        existing.REL_Customer = (@Customer)joinedObject.Value
                    end
                end
                endusing
            end
        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                Customerid, D6
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.Customerid, "Customerid", parts))<6 && segValueLength>0)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in CustomerExMetadata.FormatKeyLiteral",keyNumber))

        endmethod

        ;;;<summary>
        ;;; Provide a partial method to allow for initialization of custom fields.
        ;;;</summary>
        private partial method InitializeCustomFields, void

        endmethod

    endclass

endnamespace
