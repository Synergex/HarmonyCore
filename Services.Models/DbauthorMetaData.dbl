;;*****************************************************************************
;;
;; Title:       DbauthorMetaData.dbl
;;
;; Description: Defines meta data associated with a Dbauthor model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    ;;; <summary>
    ;;; Global structure representing a Dbauthor record.
    ;;; </summary>
    .include "DBAUTHOR" repository, public structure="strDbauthor", end

    ;;; <summary>
    ;;; Exposes metadata relating to the Dbauthor model class.
    ;;; </summary>
    public partial class DbauthorMetadata extends DataObjectMetadataBase

        ;; Define custom property formatters

        ;;; <summary>
        ;;; Constructs an new DbauthorMetadata object.
        ;;; </summary>
        public method DbauthorMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "DBAUTHOR"
            RPSStructureSize = ^size(strDbauthor)

            ;; Define fields
            AddFieldInfo("Authorid", "ALPHA", 10, 1, 0, false)
            AddFieldInfo("LastName", "ALPHA", 20, 11, 0, false)
            AddFieldInfo("FirstName", "ALPHA", 10, 31, 0, false)

            ;; Define all fields that are associated wity key segments
            AddKeyInfo(0, "Authorid")
            AddKeyInfo(1, "LastName")

            ;; Define the composition of access keys

            data Authorid_KeyParts = new FieldDataDefinition[1]
            Authorid_KeyParts[1] = GetFieldByName("Authorid")
            AddFieldInfo("KEY_AUTHORID", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Authorid_KeyParts)

            data LastName_KeyParts = new FieldDataDefinition[1]
            LastName_KeyParts[1] = GetFieldByName("LastName")
            AddFieldInfo("KEY_LAST_NAME", "COMPOSITE", 0, 0, 0, false, ^null, ^null, LastName_KeyParts)


            ;;If we have an InitializeCustomFields method then call it.
            InitializeCustomFields()

        endmethod

        ;;; <summary>
        ;;; Returns a new Dbauthor object containing data from a record and a GRFA.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Dbauthor object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new Dbauthor(dataArea, grfa)
        endmethod

        ;;; <summary>
        ;;; Returns a new Dbauthor object containing data from a record and a GRFA.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Dbauthor object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newDbauthor = new Dbauthor(dataArea, grfa)
            UpdateExistingJoin(newDbauthor, joinedObjects)
            mreturn newDbauthor
        endmethod
        
        public override method UpdateExistingJoin, void
            required in existing, @DataObjectBase
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            UpdateExistingJoin((@Dbauthor)existing, joinedObjects)
        endmethod

        public method UpdateExistingJoin, void
            required in existing, @Dbauthor
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                Authorid, A10
            endrecord
            stack record key1
                LastName, A20
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.Authorid, "Authorid", parts))<10 && segValueLength>0)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            (1),
            begin
                if((segValueLength=KeyValueHelper(key1.LastName, "LastName", parts))<20 && segValueLength>0)
                    mreturn key1(1:startPos+segValueLength)
                mreturn key1
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in DbauthorMetadata.FormatKeyLiteral",keyNumber))

        endmethod

        ;;;<summary>
        ;;; Provide a partial method to allow for initialization of custom fields.
        ;;;</summary>
        private partial method InitializeCustomFields, void

        endmethod

    endclass

endnamespace
