;;*****************************************************************************
;;
;; Title:       Strtest19.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure STRTEST19.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Strtest19 extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strStrtest19
        private mOriginalSynergyData, strStrtest19
        protected mGlobalRFA  ,a10

        private static sMetadata, @Strtest19Metadata

.region "Constructors"

        static method Strtest19
        proc
            sMetadata = new Strtest19Metadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Strtest19), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Strtest19
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Strtest19
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Alpha 10 field
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha 10 field cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str19Al10, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str19_al10, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str19_al10 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal 5
        ;;; </summary>
        {Range(0,99999, ErrorMessage="Decimal 5 must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str19Grp1Str19Gp1de5, int
            method get
            proc
                mreturn (int)mSynergyData.str19_grp1.str19_gp1de5
            endmethod
            method set
            proc
                mSynergyData.str19_grp1.str19_gp1de5 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; alpha 6
        ;;; </summary>
        {StringLength(6, ErrorMessage="alpha 6 cannot exceed 6 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str19Grp1Str19Gp1al6, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str19_grp1.str19_gp1al6, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str19_grp1.str19_gp1al6 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; alpha 5
        ;;; </summary>
        {StringLength(5, ErrorMessage="alpha 5 cannot exceed 5 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str19Grp2Str19Gp2al5, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str19_grp2.str19_gp2al5, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str19_grp2.str19_gp2al5 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999, ErrorMessage=" must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str19Grp2Str19Gp2de5, int
            method get
            proc
                mreturn (int)mSynergyData.str19_grp2.str19_gp2de5
            endmethod
            method set
            proc
                mSynergyData.str19_grp2.str19_gp2de5 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Implied decimap 5.2
        ;;; </summary>
        {Range(0,999.99, ErrorMessage="Implied decimap 5.2 must be between 0 and 999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str19Grp2Str19Gp2id5, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.str19_grp2.str19_gp2id5, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.str19_grp2.str19_gp2id5 = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[6]
        endmethod

.endregion

    endclass

endnamespace
