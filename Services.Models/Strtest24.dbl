;;*****************************************************************************
;;
;; Title:       Strtest24.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure STRTEST24.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Strtest24 extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strStrtest24
        private mOriginalSynergyData, strStrtest24
        protected mGlobalRFA  ,a10

        private static sMetadata, @Strtest24Metadata

.region "Constructors"

        static method Strtest24
        proc
            sMetadata = new Strtest24Metadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Strtest24), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Strtest24
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Strtest24
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; decimal 5
        ;;; </summary>
        {Range(0,99999, ErrorMessage="decimal 5 must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp1Str23De5, int
            method get
            proc
                mreturn (int)mSynergyData.strgp1.str23_de5
            endmethod
            method set
            proc
                mSynergyData.strgp1.str23_de5 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(5, ErrorMessage=" cannot exceed 5 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp1Str23Alary1, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.strgp1.str23_alary[1], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.strgp1.str23_alary[1] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(5, ErrorMessage=" cannot exceed 5 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp1Str23Alary2, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.strgp1.str23_alary[2], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.strgp1.str23_alary[2] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(5, ErrorMessage=" cannot exceed 5 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp1Str23Alary3, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.strgp1.str23_alary[3], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.strgp1.str23_alary[3] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999999, ErrorMessage=" must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp1Str23De6, int
            method get
            proc
                mreturn (int)mSynergyData.strgp1.str23_de6
            endmethod
            method set
            proc
                mSynergyData.strgp1.str23_de6 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999.99, ErrorMessage=" must be between 0 and 999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str23Id5, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.str23_id5, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.str23_id5 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(10, ErrorMessage=" cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp2Str23Al10, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.strgp2.str23_al10, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.strgp2.str23_al10 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Array of de 5 1
        ;;; </summary>
        {Range(0,99999, ErrorMessage="Array of de 5 1 must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp2Str23Deary1, int
            method get
            proc
                mreturn (int)mSynergyData.strgp2.str23_deary[1]
            endmethod
            method set
            proc
                mSynergyData.strgp2.str23_deary[1] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Array of de 5 2
        ;;; </summary>
        {Range(0,99999, ErrorMessage="Array of de 5 2 must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp2Str23Deary2, int
            method get
            proc
                mreturn (int)mSynergyData.strgp2.str23_deary[2]
            endmethod
            method set
            proc
                mSynergyData.strgp2.str23_deary[2] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Array of de 5 3
        ;;; </summary>
        {Range(0,99999, ErrorMessage="Array of de 5 3 must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp2Str23Deary3, int
            method get
            proc
                mreturn (int)mSynergyData.strgp2.str23_deary[3]
            endmethod
            method set
            proc
                mSynergyData.strgp2.str23_deary[3] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Group three
        ;;; </summary>
        {StringLength(20, ErrorMessage="Group three cannot exceed 20 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp2Strgp3, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.strgp2.strgp3, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.strgp2.strgp3 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999999, ErrorMessage=" must be between 0 and 9999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Strgp2Str23De7, int
            method get
            proc
                mreturn (int)mSynergyData.strgp2.str23_de7
            endmethod
            method set
            proc
                mSynergyData.strgp2.str23_de7 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; alpha 20
        ;;; </summary>
        {StringLength(20, ErrorMessage="alpha 20 cannot exceed 20 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str23Al20, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str23_al20, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str23_al20 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[13]
        endmethod

.endregion

    endclass

endnamespace
