;;*****************************************************************************
;;
;; Title:       DifferentpkMetaData.dbl
;;
;; Description: Defines meta data associated with a Differentpk model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    ;;; <summary>
    ;;; Global structure representing a Differentpk record.
    ;;; </summary>
    .include "DIFFERENTPK" repository, public structure="strDifferentpk", end

    ;;; <summary>
    ;;; Exposes metadata relating to the Differentpk model class.
    ;;; </summary>
    public partial class DifferentpkMetadata extends DataObjectMetadataBase

        ;; Define custom property formatters
        private mDatepkFormatter, @ILiteralFormatter, new SynergyDecimalDateConverter.LiteralFormatter("FORMAT:YYYYMMDD")
        private mTimepkFormatter, @ILiteralFormatter, new SynergyDecimalDateConverter.LiteralFormatter("FORMAT:HHMM")

        ;;; <summary>
        ;;; Constructs an new DifferentpkMetadata object.
        ;;; </summary>
        public method DifferentpkMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "DIFFERENTPK"
            RPSStructureSize = ^size(strDifferentpk)

            ;; Define fields
            AddFieldInfo("Id", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("Alphapk", "ALPHA", 4, 7, 0, false)
            AddFieldInfo("Decimalpk", "DECIMAL", 4, 11, 0, false)
            AddFieldInfo("Intergerpk", "INTEGER", 4, 15, 0, false)
            AddFieldInfo("Datepk", "DATE", 8, 19, 0, false, mDatepkFormatter)
            AddFieldInfo("Timepk", "TIME", 6, 27, 0, false, mTimepkFormatter)
            AddFieldInfo("Booleanpk", "BOOLEAN", 4, 33, 0, false)

            ;; Define relations
            AddFieldInfo("REL_Customer", "DATAOBJECT", 0, 0, 0, false)

            ;; Define all fields that are associated wity key segments
            AddKeyInfo(0, "Id")
            AddKeyInfo(1, "Id")
            AddKeyInfo(2, "Alphapk")
            AddKeyInfo(3, "Decimalpk")
            AddKeyInfo(4, "Intergerpk")
            AddKeyInfo(5, "Datepk")
            AddKeyInfo(6, "Timepk")
            AddKeyInfo(7, "Booleanpk")

            ;; Define the composition of access keys

            data Id_KeyParts = new FieldDataDefinition[1]
            Id_KeyParts[1] = GetFieldByName("Id")
            AddFieldInfo("KEY_ID", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Id_KeyParts)

            data Id2_KeyParts = new FieldDataDefinition[1]
            Id2_KeyParts[1] = GetFieldByName("Id")
            AddFieldInfo("KEY_ID2", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Id2_KeyParts)

            data Alphapk_KeyParts = new FieldDataDefinition[1]
            Alphapk_KeyParts[1] = GetFieldByName("Alphapk")
            AddFieldInfo("KEY_ALPHAPK", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Alphapk_KeyParts)

            data Decimalpk_KeyParts = new FieldDataDefinition[1]
            Decimalpk_KeyParts[1] = GetFieldByName("Decimalpk")
            AddFieldInfo("KEY_DECIMALPK", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Decimalpk_KeyParts)

            data Intergerpk_KeyParts = new FieldDataDefinition[1]
            Intergerpk_KeyParts[1] = GetFieldByName("Intergerpk")
            AddFieldInfo("KEY_INTERGERPK", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Intergerpk_KeyParts)

            data Datepk_KeyParts = new FieldDataDefinition[1]
            Datepk_KeyParts[1] = GetFieldByName("Datepk")
            AddFieldInfo("KEY_DATEPK", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Datepk_KeyParts)

            data Timepk_KeyParts = new FieldDataDefinition[1]
            Timepk_KeyParts[1] = GetFieldByName("Timepk")
            AddFieldInfo("KEY_TIMEPK", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Timepk_KeyParts)

            data Booleanpk_KeyParts = new FieldDataDefinition[1]
            Booleanpk_KeyParts[1] = GetFieldByName("Booleanpk")
            AddFieldInfo("KEY_BOOLEANPK", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Booleanpk_KeyParts)


            ;;If we have an InitializeCustomFields method then call it.
            InitializeCustomFields()

        endmethod

        ;;; <summary>
        ;;; Returns a new Differentpk object containing data from a record and a GRFA.
        ;;; The related data properties () will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Differentpk object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new Differentpk(dataArea, grfa)
        endmethod

        ;;; <summary>
        ;;; Returns a new Differentpk object containing data from a record and a GRFA.
        ;;; The related data properties () will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Differentpk object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties () to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newDifferentpk = new Differentpk(dataArea, grfa)
            UpdateExistingJoin(newDifferentpk, joinedObjects)
            mreturn newDifferentpk
        endmethod
        
        public override method UpdateExistingJoin, void
            required in existing, @DataObjectBase
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            UpdateExistingJoin((@Differentpk)existing, joinedObjects)
        endmethod

        public method UpdateExistingJoin, void
            required in existing, @Differentpk
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data joinedObject, KeyValuePair<String, Object>
            foreach joinedObject in joinedObjects
            begin
                using joinedObject.Key select
                ("REL_Customer"),
                begin
                    if(existing.REL_Customer == ^null)
                    begin
                        existing.REL_Customer = (@Customer)joinedObject.Value
                    end
                end
                endusing
            end
        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                Id, D6
            endrecord
            stack record key1
                Id, D6
            endrecord
            stack record key2
                Alphapk, A4
            endrecord
            stack record key3
                Decimalpk, D4
            endrecord
            stack record key4
                Intergerpk, I4
            endrecord
            stack record key5
                Datepk, D8
            endrecord
            stack record key6
                Timepk, D6
            endrecord
            stack record key7
                Booleanpk, BOOLEAN
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.Id, "Id", parts))<6 && segValueLength>0)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            (1),
            begin
                if((segValueLength=KeyValueHelper(key1.Id, "Id", parts))<6 && segValueLength>0)
                    mreturn key1(1:startPos+segValueLength)
                mreturn key1
            end
            (2),
            begin
                if((segValueLength=KeyValueHelper(key2.Alphapk, "Alphapk", parts))<4 && segValueLength>0)
                    mreturn key2(1:startPos+segValueLength)
                mreturn key2
            end
            (3),
            begin
                if((segValueLength=KeyValueHelper(key3.Decimalpk, "Decimalpk", parts))<4 && segValueLength>0)
                    mreturn key3(1:startPos+segValueLength)
                mreturn key3
            end
            (4),
            begin
                if((segValueLength=KeyValueHelper(key4.Intergerpk, "Intergerpk", parts))<4 && segValueLength>0)
                    mreturn key4(1:startPos+segValueLength)
                mreturn key4
            end
            (5),
            begin
                if((segValueLength=KeyValueHelper(key5.Datepk, "Datepk", parts, mDatepkFormatter))<8 && segValueLength>0)
                    mreturn key5(1:startPos+segValueLength)
                mreturn key5
            end
            (6),
            begin
                if((segValueLength=KeyValueHelper(key6.Timepk, "Timepk", parts, mTimepkFormatter))<6 && segValueLength>0)
                    mreturn key6(1:startPos+segValueLength)
                mreturn key6
            end
            (7),
            begin
                if((segValueLength=KeyValueHelper(key7.Booleanpk, "Booleanpk", parts))<4 && segValueLength>0)
                    mreturn key7(1:startPos+segValueLength)
                mreturn key7
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in DifferentpkMetadata.FormatKeyLiteral",keyNumber))

        endmethod

        ;;;<summary>
        ;;; Provide a partial method to allow for initialization of custom fields.
        ;;;</summary>
        private partial method InitializeCustomFields, void

        endmethod

    endclass

endnamespace
