;;*****************************************************************************
;;
;; Title:       Item.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure ITEMS and from the data file DAT:items.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Item extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strItem
        private mOriginalSynergyData, strItem

        private static sMetadata, @ItemMetadata

.region "Constructors"

        static method Item
        proc
            sMetadata = new ItemMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Item), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Item
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Item
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Item number
        ;;; </summary>
        {Key}
        {Required(ErrorMessage="Item number is required. ")}
        {Range(1,999999, ErrorMessage="Item number must be between 1 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property ItemNumber, int
            method get
            proc
                mreturn (int)mSynergyData.item_number
            endmethod
            method set
            proc
                mSynergyData.item_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Vendor number
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Vendor number must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property VendorNumber, int
            method get
            proc
                mreturn (int)mSynergyData.vendor_number
            endmethod
            method set
            proc
                mSynergyData.vendor_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Size in gallons
        ;;; </summary>
        {Required(ErrorMessage="Size in gallons is required. ")}
        {Range(1,999, ErrorMessage="Size in gallons must be between 1 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Size, int
            method get
            proc
                mreturn (int)mSynergyData.size
            endmethod
            method set
            proc
                mSynergyData.size = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Common name
        ;;; </summary>
        {Required(ErrorMessage="Common name is required. ")}
        {StringLength(30, ErrorMessage="Common name cannot exceed 30 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property CommonName, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.common_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.common_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Latin name
        ;;; </summary>
        {StringLength(30, ErrorMessage="Latin name cannot exceed 30 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property LatinName, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.latin_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.latin_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Hardiness zone code
        ;;; </summary>
        {Range(0,9, ErrorMessage="Hardiness zone code must be between 0 and 9. ")}
        {Newtonsoft.Json.JsonProperty}
        public property ZoneCode, int
            method get
            proc
                mreturn (int)mSynergyData.zone_code
            endmethod
            method set
            proc
                mSynergyData.zone_code = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Type code
        ;;; </summary>
        {Range(1,2, ErrorMessage="Type code must be between 1 and 2. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Type, int
            method get
            proc
                mreturn (int)mSynergyData.type
            endmethod
            method set
            proc
                mSynergyData.type = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Flowering?
        ;;; </summary>
        {StringLength(1, ErrorMessage="Flowering? cannot exceed 1 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Flowering, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.flowering, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.flowering = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Flower color
        ;;; </summary>
        {StringLength(6, ErrorMessage="Flower color cannot exceed 6 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property FlowerColor, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.flower_color, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.flower_color = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Shape
        ;;; </summary>
        {StringLength(10, ErrorMessage="Shape cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Shape, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.shape, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.shape = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Maximum height (in inches)
        ;;; </summary>
        {Range(0,999, ErrorMessage="Maximum height (in inches) must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property MaxHeight, int
            method get
            proc
                mreturn (int)mSynergyData.max_height
            endmethod
            method set
            proc
                mSynergyData.max_height = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Maximum width (in inches)
        ;;; </summary>
        {Range(0,999, ErrorMessage="Maximum width (in inches) must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property MaxWidth, int
            method get
            proc
                mreturn (int)mSynergyData.max_width
            endmethod
            method set
            proc
                mSynergyData.max_width = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Water requirements
        ;;; </summary>
        {StringLength(4, ErrorMessage="Water requirements cannot exceed 4 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property WaterRequirement, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.water_requirement, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.water_requirement = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Sun requirements
        ;;; </summary>
        {StringLength(6, ErrorMessage="Sun requirements cannot exceed 6 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property SunRequirement, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.sun_requirement, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.sun_requirement = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Bin/aisle
        ;;; </summary>
        {StringLength(3, ErrorMessage="Bin/aisle cannot exceed 3 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property BinLocation, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.bin_location, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.bin_location = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Qty on hand
        ;;; </summary>
        {Range(-999999,999999, ErrorMessage="Qty on hand must be between -999999 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property QtyOnHand, int
            method get
            proc
                mreturn (int)mSynergyData.qty_on_hand
            endmethod
            method set
            proc
                mSynergyData.qty_on_hand = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Qty allocated
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Qty allocated must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property QtyAllocated, int
            method get
            proc
                mreturn (int)mSynergyData.qty_allocated
            endmethod
            method set
            proc
                mSynergyData.qty_allocated = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Qty on order
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Qty on order must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property QtyOnOrder, int
            method get
            proc
                mreturn (int)mSynergyData.qty_on_order
            endmethod
            method set
            proc
                mSynergyData.qty_on_order = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Reorder point
        ;;; </summary>
        {Range(0,999999, ErrorMessage="Reorder point must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property ReorderLevel, int
            method get
            proc
                mreturn (int)mSynergyData.reorder_level
            endmethod
            method set
            proc
                mSynergyData.reorder_level = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Unit price
        ;;; </summary>
        {Range(0,99999.99, ErrorMessage="Unit price must be between 0 and 99999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property UnitPrice, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.unit_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.unit_price = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Item cost
        ;;; </summary>
        {Range(0,99999.99, ErrorMessage="Item cost must be between 0 and 99999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property CostPrice, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.cost_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.cost_price = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[21]
        endmethod

.endregion

.region "Relationships to other entities"

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; ITEM.VENDOR_NUMBER (one) --> (one) --> (many) VENDOR.VENDOR_NUMBER
        ;;; </summary>
        public readwrite property REL_Vendor, @Vendor

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type D)
        ;;; ITEM.ITEM_NUMBER (one) <-> (many) ORDER_ITEM.ITEM_ORDERED
        ;;; </summary>
        public readwrite property REL_OrderItems, @ICollection<OrderItem>

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data for relations
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;No relation validation if the record is being deleted
            if (vType == ValidationType.Delete)
                mreturn

            ;;Get an instance of IDataObjectProvider
            data dataObjectProvider, @IDataObjectProvider, sp.GetService<IDataObjectProvider>()

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 1 (REL_Vendor)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 2 (REL_OrderItems)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;If we have a ValidateCustom method, call it

            ValidateCustom(vType,sp)

        endmethod


        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ITEM_NUMBER, string, ""
        public readonly property KEY_ITEM_NUMBER, string, ""

        private _KEY_VENDOR_NUMBER, string, ""
        public readonly property KEY_VENDOR_NUMBER, string, ""

        private _KEY_COLOR, string, ""
        public readonly property KEY_COLOR, string, ""

        private _KEY_SIZE, string, ""
        public readonly property KEY_SIZE, string, ""

        private _KEY_NAME, string, ""
        public readonly property KEY_NAME, string, ""

.endregion

    endclass

endnamespace
