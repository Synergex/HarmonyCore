;;*****************************************************************************
;;
;; Title:       Strtest16.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure STRTEST16.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Strtest16 extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strStrtest16
        private mOriginalSynergyData, strStrtest16
        protected mGlobalRFA  ,a10

        private static sMetadata, @Strtest16Metadata

.region "Constructors"

        static method Strtest16
        proc
            sMetadata = new Strtest16Metadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Strtest16), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Strtest16
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Strtest16
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Decimal array 1
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 1 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decary1, int
            method get
            proc
                mreturn (int)mSynergyData.decary[1]
            endmethod
            method set
            proc
                mSynergyData.decary[1] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 2
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 2 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decary2, int
            method get
            proc
                mreturn (int)mSynergyData.decary[2]
            endmethod
            method set
            proc
                mSynergyData.decary[2] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 3
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 3 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decary3, int
            method get
            proc
                mreturn (int)mSynergyData.decary[3]
            endmethod
            method set
            proc
                mSynergyData.decary[3] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 4
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 4 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decary4, int
            method get
            proc
                mreturn (int)mSynergyData.decary[4]
            endmethod
            method set
            proc
                mSynergyData.decary[4] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 5
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 5 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decary5, int
            method get
            proc
                mreturn (int)mSynergyData.decary[5]
            endmethod
            method set
            proc
                mSynergyData.decary[5] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 1
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 1 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Alpary1, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alpary[1], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alpary[1] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 2
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 2 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Alpary2, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alpary[2], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alpary[2] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 3
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 3 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Alpary3, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alpary[3], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alpary[3] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 4
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 4 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Alpary4, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alpary[4], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alpary[4] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 5
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 5 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Alpary5, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alpary[5], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alpary[5] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Implied decimal array 1
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage="Implied decimal array 1 must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Impary1, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.impary[1], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.impary[1] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Implied decimal array 2
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage="Implied decimal array 2 must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Impary2, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.impary[2], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.impary[2] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Implied decimal array 3
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage="Implied decimal array 3 must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Impary3, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.impary[3], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.impary[3] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Implied decimal array 4
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage="Implied decimal array 4 must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Impary4, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.impary[4], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.impary[4] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Implied decimal array 5
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage="Implied decimal array 5 must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Impary5, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.impary[5], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.impary[5] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer array 1
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="Integer array 1 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intary1, int
            method get
            proc
                mreturn (int)mSynergyData.intary[1]
            endmethod
            method set
            proc
                mSynergyData.intary[1] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer array 2
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="Integer array 2 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intary2, int
            method get
            proc
                mreturn (int)mSynergyData.intary[2]
            endmethod
            method set
            proc
                mSynergyData.intary[2] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer array 3
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="Integer array 3 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intary3, int
            method get
            proc
                mreturn (int)mSynergyData.intary[3]
            endmethod
            method set
            proc
                mSynergyData.intary[3] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer array 4
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="Integer array 4 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intary4, int
            method get
            proc
                mreturn (int)mSynergyData.intary[4]
            endmethod
            method set
            proc
                mSynergyData.intary[4] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer array 5
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="Integer array 5 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intary5, int
            method get
            proc
                mreturn (int)mSynergyData.intary[5]
            endmethod
            method set
            proc
                mSynergyData.intary[5] = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[20]
        endmethod

.endregion

    endclass

endnamespace
