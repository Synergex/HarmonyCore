;;*****************************************************************************
;;
;; Title:       Differentpk.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure DIFFERENTPK and from the data file DAT:differentpk.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Differentpk extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strDifferentpk
        private mOriginalSynergyData, strDifferentpk
        protected mGlobalRFA  ,a10

        private static sMetadata, @DifferentpkMetadata

.region "Constructors"

        static method Differentpk
        proc
            sMetadata = new DifferentpkMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Differentpk), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Differentpk
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Differentpk
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; ID
        ;;; </summary>
        {Key}
        {Range(0,9999, ErrorMessage="ID must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha PK
        ;;; </summary>
        {StringLength(4, ErrorMessage="Alpha PK cannot exceed 4 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Alphapk, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alphapk, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alphapk = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal PK
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal PK must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Decimalpk, int
            method get
            proc
                mreturn (int)mSynergyData.decimalpk
            endmethod
            method set
            proc
                mSynergyData.decimalpk = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Integer PK
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="Integer PK must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Intergerpk, int
            method get
            proc
                mreturn (int)mSynergyData.intergerpk
            endmethod
            method set
            proc
                mSynergyData.intergerpk = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Date PK
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property Datepk, DateTime
            method get
            proc
                data formatString = "YYYYMMDD"
                mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.datepk, ^null, formatString, ^null)
            endmethod
            method set
            proc
                data formatString = "YYYYMMDD"
                mSynergyData.datepk = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, formatString, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Time PK
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property Timepk, DateTime
            method get
            proc
                mreturn Convert.ToDateTime(%string(mSynergyData.timepk,"XX:XX:XX"))
            endmethod
            method set
            proc
                mSynergyData.timepk = (value.Hour * 10000) + (value.Minute * 100) + value.Second
            endmethod
        endproperty

        ;;; <summary>
        ;;; Boolean PK
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property Booleanpk, boolean
            method get
            proc
                mreturn (boolean)mSynergyData.booleanpk
            endmethod
            method set
            proc
                mSynergyData.booleanpk = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
			method get
			proc
                mreturn mGlobalRFA
			endmethod
			method set
			proc
                mGlobalRFA = value
			endmethod
		endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[7]
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        {IgnoreDataMember}
        public property KEY_ID, string
            method get
            proc
                mreturn Id.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_ALPHAPK, string
            method get
            proc
                mreturn Alphapk.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_DECIMALPK, string
            method get
            proc
                mreturn Decimalpk.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_INTERGERPK, string
            method get
            proc
                mreturn Intergerpk.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_DATEPK, string
            method get
            proc
                mreturn Datepk.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_TIMEPK, string
            method get
            proc
                mreturn Timepk.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

        {IgnoreDataMember}
        public property KEY_BOOLEANPK, string
            method get
            proc
                mreturn Booleanpk.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

.endregion

    endclass

endnamespace
