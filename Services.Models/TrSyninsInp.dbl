;;*****************************************************************************
;;
;; Title:       TrSyninsInp.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure TR_SYNINS_INP.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class TrSyninsInp extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strTrSyninsInp
        private mOriginalSynergyData, strTrSyninsInp
        protected mGlobalRFA  ,a10

        private static sMetadata, @TrSyninsInpMetadata

.region "Constructors"

        static method TrSyninsInp
        proc
            sMetadata = new TrSyninsInpMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(TrSyninsInp), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method TrSyninsInp
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method TrSyninsInp
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(255, ErrorMessage=" cannot exceed 255 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property SoftwareArea, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.software_area, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.software_area = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(255, ErrorMessage=" cannot exceed 255 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property DataArea, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.data_area, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.data_area = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(255, ErrorMessage=" cannot exceed 255 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property CdataArea, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.cdata_area, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.cdata_area = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(3, ErrorMessage=" cannot exceed 3 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property WebsiteCode, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.website_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.website_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(5, ErrorMessage=" cannot exceed 5 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property DestinationCode, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.destination_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.destination_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(6, ErrorMessage=" cannot exceed 6 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property WebProductCode, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.web_product_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.web_product_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999, ErrorMessage=" must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Duration, int
            method get
            proc
                mreturn (int)mSynergyData.duration
            endmethod
            method set
            proc
                mSynergyData.duration = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999, ErrorMessage=" must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property InsuranceAdults, int
            method get
            proc
                mreturn (int)mSynergyData.insurance_adults
            endmethod
            method set
            proc
                mSynergyData.insurance_adults = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999, ErrorMessage=" must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property InsuranceChildren, int
            method get
            proc
                mreturn (int)mSynergyData.insurance_children
            endmethod
            method set
            proc
                mSynergyData.insurance_children = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999, ErrorMessage=" must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property InsuranceSeniors, int
            method get
            proc
                mreturn (int)mSynergyData.insurance_seniors
            endmethod
            method set
            proc
                mSynergyData.insurance_seniors = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999, ErrorMessage=" must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property InsuranceInfants, int
            method get
            proc
                mreturn (int)mSynergyData.insurance_infants
            endmethod
            method set
            proc
                mSynergyData.insurance_infants = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[11]
        endmethod

.endregion

    endclass

endnamespace
