;;*****************************************************************************
;;
;; Title:       Order.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure ORDERS and from the data file DAT:orders.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Order extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strOrder
        private mOriginalSynergyData, strOrder

        private static sMetadata, @OrderMetadata

.region "Constructors"

        static method Order
        proc
            sMetadata = new OrderMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Order), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Order
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Order
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Order number
        ;;; </summary>
        {Key}
        {Required(ErrorMessage="Order number is required. ")}
        {Range(1,999999, ErrorMessage="Order number must be between 1 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property OrderNumber, int
            method get
            proc
                mreturn (int)mSynergyData.order_number
            endmethod
            method set
            proc
                mSynergyData.order_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customer number
        ;;; </summary>
        {Required(ErrorMessage="Customer number is required. ")}
        {Range(1,999999, ErrorMessage="Customer number must be between 1 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property CustomerNumber, int
            method get
            proc
                mreturn (int)mSynergyData.customer_number
            endmethod
            method set
            proc
                mSynergyData.customer_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Order placed by
        ;;; </summary>
        {Required(ErrorMessage="Order placed by is required. ")}
        {StringLength(25, ErrorMessage="Order placed by cannot exceed 25 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property PlacedBy, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.placed_by, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.placed_by = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customer order reference
        ;;; </summary>
        {StringLength(25, ErrorMessage="Customer order reference cannot exceed 25 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property CustomerReference, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.customer_reference, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.customer_reference = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Payment terms code
        ;;; </summary>
        {StringLength(2, ErrorMessage="Payment terms code cannot exceed 2 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property PaymentTermsCode, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.payment_terms_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.payment_terms_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Date ordered
        ;;; </summary>
        {Required(ErrorMessage="Date ordered is required. ")}
        {Newtonsoft.Json.JsonProperty}
        public property DateOrdered, DateTime
            method get
            proc
                data formatString = "YYYYMMDD"
                mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.date_ordered, ^null, formatString, ^null)
            endmethod
            method set
            proc
                data formatString = "YYYYMMDD"
                mSynergyData.date_ordered = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, formatString, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Date order completed
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property DateCompleted, DateTime
            method get
            proc
                data formatString = "YYYYMMDD"
                mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.date_completed, ^null, formatString, ^null)
            endmethod
            method set
            proc
                data formatString = "YYYYMMDD"
                mSynergyData.date_completed = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, formatString, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[7]
        endmethod

.endregion

.region "Relationships to other entities"

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type D)
        ;;; ORDER.ORDER_NUMBER (one) <-> (many) ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM
        ;;; </summary>
        public readwrite property REL_OrderItems, @ICollection<OrderItem>

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; ORDER.CUSTOMER_NUMBER (one) --> (one) --> (many) CUSTOMER.CUSTOMER_NUMBER
        ;;; </summary>
        public readwrite property REL_Customer, @Customer

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data for relations
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;No relation validation if the record is being deleted
            if (vType == ValidationType.Delete)
                mreturn

            ;;Get an instance of IDataObjectProvider
            data dataObjectProvider, @IDataObjectProvider, sp.GetService<IDataObjectProvider>()

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 1 (REL_OrderItems)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 2 (REL_Customer)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;If we have a ValidateCustom method, call it

            ValidateCustom(vType,sp)

        endmethod


        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ORDER_NUMBER, string, ""
        public readonly property KEY_ORDER_NUMBER, string, ""

        private _KEY_CUSTOMER_NUMBER, string, ""
        public readonly property KEY_CUSTOMER_NUMBER, string, ""

        private _KEY_DATE_ORDERED, string, ""
        public readonly property KEY_DATE_ORDERED, string, ""

        private _KEY_DATE_COMPLETED, string, ""
        public readonly property KEY_DATE_COMPLETED, string, ""

.endregion

    endclass

endnamespace
