;;*****************************************************************************
;;
;; Title:       CoercestructureMetaData.dbl
;;
;; Description: Defines meta data associated with a Coercestructure model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    ;;; <summary>
    ;;; Global structure representing a Coercestructure record.
    ;;; </summary>
    .include "COERCESTRUCTURE" repository, public structure="strCoercestructure", end

    ;;; <summary>
    ;;; Exposes metadata relating to the Coercestructure model class.
    ;;; </summary>
    public partial class CoercestructureMetadata extends DataObjectMetadataBase

        ;; Define custom property formatters
        private mDecdatetimeFormatter, @ILiteralFormatter, new SynergyDecimalDateConverter.LiteralFormatter("YYYYMMDD")
        private mNulldatetimeFormatter, @ILiteralFormatter, new SynergyDecimalDateConverter.LiteralFormatter("YYYYMMDD")

        ;;; <summary>
        ;;; Constructs an new CoercestructureMetadata object.
        ;;; </summary>
        public method CoercestructureMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "COERCESTRUCTURE"
            RPSStructureSize = ^size(strCoercestructure)

            ;; Define fields
            AddFieldInfo("Decint", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("Decbool", "BOOLEAN", 1, 7, 0, false)
            AddFieldInfo("Decbyte", "BYTE", 1, 8, 0, false)
            AddFieldInfo("Decshort", "SHORT", 2, 9, 0, false)
            AddFieldInfo("Declong", "LONG", 10, 11, 0, false)
            AddFieldInfo("Decsbyte", "SBYTE", 1, 21, 0, false)
            AddFieldInfo("Decuint", "UINTEGER", 5, 22, 0, false)
            AddFieldInfo("Decushort", "SHORT", 2, 27, 0, false)
            AddFieldInfo("Deculong", "LONG", 10, 29, 0, false)
            AddFieldInfo("Decdatetime", "DATE", 8, 39, 0, false, mDecdatetimeFormatter)
            AddFieldInfo("Nulldatetime", "NULLABLEDATETIME", 8, 47, 0, false, mNulldatetimeFormatter)
            AddFieldInfo("Iddecimal", "IMPLIED", 7, 55, 02, false)
            AddFieldInfo("Iddouble", "DOUBLE", 7, 62, 02, false)
            AddFieldInfo("Idfloat", "FLOAT", 7, 69, 02, false)
            AddFieldInfo("Intint", "INTEGER", 4, 76, 0, false)
            AddFieldInfo("Intbool", "BOOLEAN", 1, 80, 0, false)
            AddFieldInfo("Intbyte", "BYTE", 1, 81, 0, false)
            AddFieldInfo("Intshort", "SHORT", 2, 82, 0, false)
            AddFieldInfo("Intlong", "LONG", 8, 84, 0, false)
            AddFieldInfo("Intsbyte", "SBYTE", 1, 92, 0, false)
            AddFieldInfo("Intuint", "UINTEGER", 4, 93, 0, false)
            AddFieldInfo("Intushort", "SHORT", 2, 97, 0, false)
            AddFieldInfo("Intulong", "LONG", 8, 99, 0, false)

            ;; Define all fields that are associated wity key segments

            ;; Define the composition of access keys


            ;;If we have an InitializeCustomFields method then call it.
            InitializeCustomFields()

        endmethod

        ;;; <summary>
        ;;; Returns a new Coercestructure object containing data from a record and a GRFA.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Coercestructure object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new Coercestructure(dataArea, grfa)
        endmethod

        ;;; <summary>
        ;;; Returns a new Coercestructure object containing data from a record and a GRFA.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Coercestructure object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newCoercestructure = new Coercestructure(dataArea, grfa)
            UpdateExistingJoin(newCoercestructure, joinedObjects)
            mreturn newCoercestructure
        endmethod
        
        public override method UpdateExistingJoin, void
            required in existing, @DataObjectBase
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            UpdateExistingJoin((@Coercestructure)existing, joinedObjects)
        endmethod

        public method UpdateExistingJoin, void
            required in existing, @Coercestructure
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in CoercestructureMetadata.FormatKeyLiteral",keyNumber))

        endmethod

        ;;;<summary>
        ;;; Provide a partial method to allow for initialization of custom fields.
        ;;;</summary>
        private partial method InitializeCustomFields, void

        endmethod

    endclass

endnamespace
