;;*****************************************************************************
;;
;; Title:       Strtest14.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure STRTEST14.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Strtest14 extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strStrtest14
        private mOriginalSynergyData, strStrtest14
        protected mGlobalRFA  ,a10

        private static sMetadata, @Strtest14Metadata

.region "Constructors"

        static method Strtest14
        proc
            sMetadata = new Strtest14Metadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Strtest14), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Strtest14
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Strtest14
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; The company code
        ;;; </summary>
        {Range(0,999, ErrorMessage="The company code must be between 0 and 999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property ReckeyCompanyCode, int
            method get
            proc
                mreturn (int)mSynergyData.reckey.company_code
            endmethod
            method set
            proc
                mSynergyData.reckey.company_code = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Product ID number
        ;;; </summary>
        {Range(0,9999999, ErrorMessage="Product ID number must be between 0 and 9999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property ReckeyProdId, int
            method get
            proc
                mreturn (int)mSynergyData.reckey.prod_id
            endmethod
            method set
            proc
                mSynergyData.reckey.prod_id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(30, ErrorMessage=" cannot exceed 30 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property ProdName, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.prod_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.prod_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Item cost
        ;;; </summary>
        {Range(0,999999.99, ErrorMessage="Item cost must be between 0 and 999999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Cost, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.cost, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.cost = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; warerhouse number
        ;;; </summary>
        {Range(0,99, ErrorMessage="warerhouse number must be between 0 and 99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property LocGrpWhrs, int
            method get
            proc
                mreturn (int)mSynergyData.loc_grp.whrs
            endmethod
            method set
            proc
                mSynergyData.loc_grp.whrs = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(6, ErrorMessage=" cannot exceed 6 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property LocGrpIlegrp, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.loc_grp.ilegrp, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.loc_grp.ilegrp = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999999, ErrorMessage=" must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property LocGrpCount, int
            method get
            proc
                mreturn (int)mSynergyData.loc_grp.count
            endmethod
            method set
            proc
                mSynergyData.loc_grp.count = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; comments
        ;;; </summary>
        {StringLength(50, ErrorMessage="comments cannot exceed 50 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Comment, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.comment, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.comment = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[8]
        endmethod

.endregion

    endclass

endnamespace
