;;*****************************************************************************
;;
;; Title:       CustomerEx.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure CUSTOMER_EX and from the data file DAT:CUSTOMER_EX.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class CustomerEx extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strCustomerEx
        private mOriginalSynergyData, strCustomerEx
        protected mGlobalRFA  ,a10

        private static sMetadata, @CustomerExMetadata

.region "Constructors"

        static method CustomerEx
        proc
            sMetadata = new CustomerExMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(CustomerEx), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method CustomerEx
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method CustomerEx
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Key}
        {Range(0,999999, ErrorMessage=" must be between 0 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Customerid, int
            method get
            proc
                mreturn (int)mSynergyData.customerid
            endmethod
            method set
            proc
                mSynergyData.customerid = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(128, ErrorMessage=" cannot exceed 128 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Extradata, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.extradata, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.extradata = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
			method get
			proc
                mreturn mGlobalRFA
			endmethod
			method set
			proc
                mGlobalRFA = value
			endmethod
		endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[2]
        endmethod

.endregion

.region "Relationships to other entities"

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type B)
        ;;; CUSTOMER_EX.PRIMARY (one) --> (one) --> (one) CUSTOMER.CUSTOMER_NUMBER
        ;;; </summary>
        public readwrite property REL_Customer, @Customer

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data for relations
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;No relation validation if the record is being deleted
            if (vType == ValidationType.Delete)
                mreturn

            ;;Get an instance of IDataObjectProvider
            data dataObjectProvider, @IDataObjectProvider, sp.GetService<IDataObjectProvider>()

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 1 (REL_Customer)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;If we have a ValidateCustom method, call it

            ValidateCustom(vType,sp)

        endmethod


        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        {IgnoreDataMember}
        public property KEY_PRIMARY, string
            method get
            proc
                mreturn Customerid.ToString()
                
            endmethod
            method set
            proc
                
            endmethod
        endproperty

.endregion

    endclass

endnamespace
