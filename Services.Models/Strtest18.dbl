;;*****************************************************************************
;;
;; Title:       Strtest18.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure STRTEST18.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection
import System.Runtime.Serialization

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Strtest18 extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strStrtest18
        private mOriginalSynergyData, strStrtest18
        protected mGlobalRFA  ,a10

        private static sMetadata, @Strtest18Metadata

.region "Constructors"

        static method Strtest18
        proc
            sMetadata = new Strtest18Metadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Strtest18), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Strtest18
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Strtest18
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(10, ErrorMessage=" cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Al10, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str18_al10, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_al10 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 1
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 1 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Decary1, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_decary[1]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_decary[1] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 2
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 2 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Decary2, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_decary[2]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_decary[2] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 3
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 3 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Decary3, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_decary[3]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_decary[3] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 4
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 4 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Decary4, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_decary[4]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_decary[4] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal array 5
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Decimal array 5 must be between 0 and 9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Decary5, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_decary[5]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_decary[5] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 1
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 1 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Alpary1, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str18_str1.str18_alpary[1], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_alpary[1] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 2
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 2 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Alpary2, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str18_str1.str18_alpary[2], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_alpary[2] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 3
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 3 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Alpary3, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str18_str1.str18_alpary[3], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_alpary[3] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 4
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 4 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Alpary4, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str18_str1.str18_alpary[4], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_alpary[4] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha array 5
        ;;; </summary>
        {StringLength(10, ErrorMessage="Alpha array 5 cannot exceed 10 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Alpary5, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.str18_str1.str18_alpary[5], ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_alpary[5] = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage=" must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Impary1, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.str18_str1.str18_impary[1], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_impary[1] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage=" must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Impary2, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.str18_str1.str18_impary[2], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_impary[2] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage=" must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Impary3, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.str18_str1.str18_impary[3], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_impary[3] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage=" must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Impary4, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.str18_str1.str18_impary[4], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_impary[4] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999.99, ErrorMessage=" must be between 0 and 9999.99. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Impary5, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.str18_str1.str18_impary[5], ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_impary[5] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; integer array 1
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="integer array 1 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Intary1, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_intary[1]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_intary[1] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; integer array 2
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="integer array 2 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Intary2, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_intary[2]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_intary[2] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; integer array 3
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="integer array 3 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Intary3, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_intary[3]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_intary[3] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; integer array 4
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="integer array 4 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Intary4, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_intary[4]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_intary[4] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; integer array 5
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage="integer array 5 must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18Str1Str18Intary5, int
            method get
            proc
                mreturn (int)mSynergyData.str18_str1.str18_intary[5]
            endmethod
            method set
            proc
                mSynergyData.str18_str1.str18_intary[5] = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Decimal 7 digits
        ;;; </summary>
        {Range(0,9999999, ErrorMessage="Decimal 7 digits must be between 0 and 9999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Str18De7, int
            method get
            proc
                mreturn (int)mSynergyData.str18_de7
            endmethod
            method set
            proc
                mSynergyData.str18_de7 = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[22]
        endmethod

.endregion

    endclass

endnamespace
