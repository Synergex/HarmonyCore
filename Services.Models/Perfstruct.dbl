;;*****************************************************************************
;;
;; Title:       Perfstruct.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure PERFSTRUCT.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Perfstruct extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strPerfstruct
        private mOriginalSynergyData, strPerfstruct
        protected mGlobalRFA  ,a10

        private static sMetadata, @PerfstructMetadata

.region "Constructors"

        static method Perfstruct
        proc
            sMetadata = new PerfstructMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Perfstruct), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Perfstruct
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Perfstruct
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {StringLength(20, ErrorMessage=" cannot exceed 20 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Alpha20, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.alpha_20, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.alpha_20 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99999, ErrorMessage=" must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Dec5, int
            method get
            proc
                mreturn (int)mSynergyData.dec_5
            endmethod
            method set
            proc
                mSynergyData.dec_5 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,999999999999999, ErrorMessage=" must be between 0 and 999999999999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Dec15, long
            method get
            proc
                mreturn (long)mSynergyData.dec_15
            endmethod
            method set
            proc
                mSynergyData.dec_15 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,99.9, ErrorMessage=" must be between 0 and 99.9. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Idec31, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.idec_31, ^null, "DECIMALPLACES#1", ^null)
            endmethod
            method set
            proc
                mSynergyData.idec_31 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9999999999.9999, ErrorMessage=" must be between 0 and 9999999999.9999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Idec144, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.idec_144, ^null, "DECIMALPLACES#4", ^null)
            endmethod
            method set
            proc
                mSynergyData.idec_144 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,127, ErrorMessage=" must be between 0 and 127. ")}
        {Newtonsoft.Json.JsonProperty}
        public property I1, int
            method get
            proc
                mreturn (int)mSynergyData.i_1
            endmethod
            method set
            proc
                mSynergyData.i_1 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,32767, ErrorMessage=" must be between 0 and 32767. ")}
        {Newtonsoft.Json.JsonProperty}
        public property I2, int
            method get
            proc
                mreturn (int)mSynergyData.i_2
            endmethod
            method set
            proc
                mSynergyData.i_2 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,2147483647, ErrorMessage=" must be between 0 and 2147483647. ")}
        {Newtonsoft.Json.JsonProperty}
        public property I4, int
            method get
            proc
                mreturn (int)mSynergyData.i_4
            endmethod
            method set
            proc
                mSynergyData.i_4 = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; 
        ;;; </summary>
        {Range(0,9223372036854775807, ErrorMessage=" must be between 0 and 9223372036854775807. ")}
        {Newtonsoft.Json.JsonProperty}
        public property I8, long
            method get
            proc
                mreturn (long)mSynergyData.i_8
            endmethod
            method set
            proc
                mSynergyData.i_8 = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

        public override property GlobalRFA, [#]byte
            method get
            proc
                mreturn mGlobalRFA
            endmethod
            method set
            proc
                mGlobalRFA = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[9]
        endmethod

.endregion

    endclass

endnamespace
