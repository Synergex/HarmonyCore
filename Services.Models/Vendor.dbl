;;*****************************************************************************
;;
;; Title:       Vendor.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure VENDORS and from the data file DAT:vendors.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    {Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)}
    public partial class Vendor extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strVendor
        private mOriginalSynergyData, strVendor

        private static sMetadata, @VendorMetadata

.region "Constructors"

        static method Vendor
        proc
            sMetadata = new VendorMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Vendor), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Vendor
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Vendor
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Vendor number
        ;;; </summary>
        {Key}
        {Required(ErrorMessage="Vendor number is required. ")}
        {Range(1,999999, ErrorMessage="Vendor number must be between 1 and 999999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property VendorNumber, int
            method get
            proc
                mreturn (int)mSynergyData.vendor_number
            endmethod
            method set
            proc
                mSynergyData.vendor_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Vendor name
        ;;; </summary>
        {Required(ErrorMessage="Vendor name is required. ")}
        {StringLength(30, ErrorMessage="Vendor name cannot exceed 30 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Name, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Street address
        ;;; </summary>
        {StringLength(25, ErrorMessage="Street address cannot exceed 25 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Street, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.street, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.street = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; City
        ;;; </summary>
        {StringLength(20, ErrorMessage="City cannot exceed 20 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property City, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.city, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.city = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; State
        ;;; </summary>
        {StringLength(2, ErrorMessage="State cannot exceed 2 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property State, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.state, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.state = (A)SynergyAlphaConverter.ConvertBack(value.ToUpper(), ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Zip Code
        ;;; </summary>
        {Range(0,99999, ErrorMessage="Zip Code must be between 0 and 99999. ")}
        {Newtonsoft.Json.JsonProperty}
        public property ZipCode, int
            method get
            proc
                mreturn (int)mSynergyData.zip_code
            endmethod
            method set
            proc
                mSynergyData.zip_code = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Contact name
        ;;; </summary>
        {StringLength(25, ErrorMessage="Contact name cannot exceed 25 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property Contact, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.contact, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.contact = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Phone number
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property Phone, String
            method get
            proc
                mreturn %string(mSynergyData.phone,"(XXX) XXX-XXXX")
            endmethod
            method set
            proc
                mSynergyData.phone = SynergyDecimalConverter.ConvertBack(value,"(XXX) XXX-XXXX")
            endmethod
        endproperty

        ;;; <summary>
        ;;; Fax number
        ;;; </summary>
        {Newtonsoft.Json.JsonProperty}
        public property Fax, String
            method get
            proc
                mreturn %string(mSynergyData.fax,"(XXX) XXX-XXXX")
            endmethod
            method set
            proc
                mSynergyData.fax = SynergyDecimalConverter.ConvertBack(value,"(XXX) XXX-XXXX")
            endmethod
        endproperty

        ;;; <summary>
        ;;; Payment terms code
        ;;; </summary>
        {StringLength(2, ErrorMessage="Payment terms code cannot exceed 2 characters. ")}
        {Newtonsoft.Json.JsonProperty}
        public property PaymentTermsCode, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.payment_terms_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.payment_terms_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[10]
        endmethod

.endregion

.region "Relationships to other entities"

        {Newtonsoft.Json.JsonProperty(DefaultValueHandling=DefaultValueHandling.Ignore)}
        ;;; <summary>
        ;;; Relationship (Type D)
        ;;; VENDOR.VENDOR_NUMBER (one) <-> (many) ITEM.VENDOR_NUMBER
        ;;; </summary>
        public readwrite property REL_Items, @ICollection<Item>

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data for relations
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;No relation validation if the record is being deleted
            if (vType == ValidationType.Delete)
                mreturn

            ;;Get an instance of IDataObjectProvider
            data dataObjectProvider, @IDataObjectProvider, sp.GetService<IDataObjectProvider>()

            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation 1 (REL_Items)

            ;;Validation mode: None

            ;;--------------------------------------------------------------------------------
            ;;If we have a ValidateCustom method, call it

            ValidateCustom(vType,sp)

        endmethod


        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_VENDOR_NUMBER, string, ""
        public readonly property KEY_VENDOR_NUMBER, string, ""

        private _KEY_STATE, string, ""
        public readonly property KEY_STATE, string, ""

        private _KEY_ZIP, string, ""
        public readonly property KEY_ZIP, string, ""

        private _KEY_PAYMENT_TERMS, string, ""
        public readonly property KEY_PAYMENT_TERMS, string, ""

.endregion

    endclass

endnamespace
