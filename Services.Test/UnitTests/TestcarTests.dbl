;;*****************************************************************************
;;
;; Title:       TestcarTests.dbl
;;
;; Description: Unit tests for the operations defined in TestcarsController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models
import System.Linq

namespace Services.Test.UnitTests

    {TestClass}
    public partial class TestcarTests

        ;;------------------------------------------------------------
        ;;Get all Testcars

        {TestMethod}
        {TestCategory("Testcar Tests - Read All")}
        public method GetAllTestcars, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/Testcars").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcars, @ODataTestcarsMultiple, JsonConvert.DeserializeObject<ODataTestcarsMultiple>(result)
            Assert.AreEqual(testcars.Value.Count,TestConstants.Instance.GetTestcars_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcars and expand relation REL_Testcarlot

        {TestMethod}
        {TestCategory("Testcar Tests - Read All")}
        public method GetAllTestcars_Expand_REL_Testcarlot, void
        proc
            data uri = "/odata/v1/Testcars?$expand=REL_Testcarlot"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcars and expand relation REL_Testcarowner1

        {TestMethod}
        {TestCategory("Testcar Tests - Read All")}
        public method GetAllTestcars_Expand_REL_Testcarowner1, void
        proc
            data uri = "/odata/v1/Testcars?$expand=REL_Testcarowner1"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcars and expand relation REL_Testcarowner2

        {TestMethod}
        {TestCategory("Testcar Tests - Read All")}
        public method GetAllTestcars_Expand_REL_Testcarowner2, void
        proc
            data uri = "/odata/v1/Testcars?$expand=REL_Testcarowner2"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcars and expand relation REL_Testcarowner3

        {TestMethod}
        {TestCategory("Testcar Tests - Read All")}
        public method GetAllTestcars_Expand_REL_Testcarowner3, void
        proc
            data uri = "/odata/v1/Testcars?$expand=REL_Testcarowner3"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcars and expand all relations

        {TestMethod}
        {TestCategory("Testcar Tests - Read All")}
        public method GetAllTestcars_Expand_All, void
        proc
            data uri = "/odata/v1/Testcars?$expand=REL_Testcarlot,REL_Testcarowner1,REL_Testcarowner2,REL_Testcarowner3"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by primary key

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Primary Key")}
        public method GetOneTestcar, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Id={1})","",TestConstants.Instance.GetTestcar_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcar, @ODataTestcarSingle, JsonConvert.DeserializeObject<ODataTestcarSingle>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by primary key and expand relation REL_Testcarlot

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Primary Key")}
        public method GetOneTestcar_Expand_REL_Testcarlot, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Id={1})?$expand=REL_Testcarlot","",TestConstants.Instance.GetTestcar_Expand_REL_Testcarlot_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcar, @ODataTestcarSingle, JsonConvert.DeserializeObject<ODataTestcarSingle>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by primary key and expand relation REL_Testcarowner1

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Primary Key")}
        public method GetOneTestcar_Expand_REL_Testcarowner1, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Id={1})?$expand=REL_Testcarowner1","",TestConstants.Instance.GetTestcar_Expand_REL_Testcarowner1_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcar, @ODataTestcarSingle, JsonConvert.DeserializeObject<ODataTestcarSingle>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by primary key and expand relation REL_Testcarowner2

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Primary Key")}
        public method GetOneTestcar_Expand_REL_Testcarowner2, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Id={1})?$expand=REL_Testcarowner2","",TestConstants.Instance.GetTestcar_Expand_REL_Testcarowner2_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcar, @ODataTestcarSingle, JsonConvert.DeserializeObject<ODataTestcarSingle>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by primary key and expand relation REL_Testcarowner3

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Primary Key")}
        public method GetOneTestcar_Expand_REL_Testcarowner3, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Id={1})?$expand=REL_Testcarowner3","",TestConstants.Instance.GetTestcar_Expand_REL_Testcarowner3_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcar, @ODataTestcarSingle, JsonConvert.DeserializeObject<ODataTestcarSingle>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by primary key and expand all relations

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Primary Key")}
        public method GetOneTestcar_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Id={1})?$expand=REL_Testcarlot,REL_Testcarowner1,REL_Testcarowner2,REL_Testcarowner3","",TestConstants.Instance.GetTestcar_Expand_All_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcar, @ODataTestcarSingle, JsonConvert.DeserializeObject<ODataTestcarSingle>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by alternate key 0 (Lotid)

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Alternate Key")}
        public method GetTestcar_ByAltKey_Lotid, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Lotid={1})", "", TestConstants.Instance.GetTestcar_ByAltKey_Lotid_Lotid)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcars, @ODataTestcarsMultiple,JsonConvert.DeserializeObject<ODataTestcarsMultiple>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by alternate key 1 (Ownerid1)

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Alternate Key")}
        public method GetTestcar_ByAltKey_Ownerid1, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Owner1={1})", "", TestConstants.Instance.GetTestcar_ByAltKey_Ownerid1_Owner1)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcars, @ODataTestcarsMultiple,JsonConvert.DeserializeObject<ODataTestcarsMultiple>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by alternate key 2 (Ownerid2)

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Alternate Key")}
        public method GetTestcar_ByAltKey_Ownerid2, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Owner2={1})", "", TestConstants.Instance.GetTestcar_ByAltKey_Ownerid2_Owner2)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcars, @ODataTestcarsMultiple,JsonConvert.DeserializeObject<ODataTestcarsMultiple>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcar by alternate key 3 (Ownerid3)

        {TestMethod}
        {TestCategory("Testcar Tests - Read by Alternate Key")}
        public method GetTestcar_ByAltKey_Ownerid3, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcars(Owner3={1})", "", TestConstants.Instance.GetTestcar_ByAltKey_Ownerid3_Owner3)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcars, @ODataTestcarsMultiple,JsonConvert.DeserializeObject<ODataTestcarsMultiple>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Testcar (client specified key)

        {TestMethod}
        {TestCategory("Testcar Tests - Create, Update & Delete")}
        public method UpdateTestcar, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one testcar from the file
            data getRequest = String.Format("/odata/v1/Testcars(Id={1})","",TestConstants.Instance.GetTestcar_Id)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcar object
            data doTestcar, @Testcar, JsonConvert.DeserializeObject<Testcar>(getResult)

            doTestcar.Id = TestConstants.Instance.UpdateTestcar_Id

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doTestcar),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/Testcars(Id={1})","",TestConstants.Instance.UpdateTestcar_Id)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcar object
            doTestcar = JsonConvert.DeserializeObject<Testcar>(getResult)

            ;;Change the first non key field to test full update
            doTestcar.Name = "Y"

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doTestcar),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/Testcars(Id={1})","",TestConstants.Instance.UpdateTestcar_Id)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcar object
            doTestcar = JsonConvert.DeserializeObject<Testcar>(getResult)
            Assert.AreEqual(doTestcar.Name, "Y")

            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the testcar
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("Name", "Z")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated testcar record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcar object
            doTestcar = JsonConvert.DeserializeObject<Testcar>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doTestcar.Name, "Z")

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
