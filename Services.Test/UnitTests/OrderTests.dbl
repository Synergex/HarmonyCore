;;*****************************************************************************
;;
;; Title:       OrderTests.dbl
;;
;; Description: Unit tests for the operations defined in OrdersController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models

namespace Services.Test.UnitTests

    {TestClass}
    public partial class OrderTests

        ;;------------------------------------------------------------
        ;;Get all Orders

        {TestMethod}
        {TestCategory("Order Tests - Read All")}
        public method GetOrders, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/Orders").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orders, @ODataOrders, JsonConvert.DeserializeObject<ODataOrders>(result)
            Assert.AreEqual(orders.Value.Count,TestConstants.GetOrders_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Orders and expand relation REL_OrderItems

        {TestMethod}
        {TestCategory("Order Tests - Read All")}
        public method GetOrders_Expand_REL_OrderItems, void
        proc
            data uri = "/odata/v1/Orders?$expand=REL_OrderItems"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Orders and expand relation REL_Customer

        {TestMethod}
        {TestCategory("Order Tests - Read All")}
        public method GetOrders_Expand_REL_Customer, void
        proc
            data uri = "/odata/v1/Orders?$expand=REL_Customer"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Orders and expand all relations

        {TestMethod}
        {TestCategory("Order Tests - Read All")}
        public method GetOrders_Expand_All, void
        proc
            data uri = "/odata/v1/Orders?$expand=REL_OrderItems,REL_Customer"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Order by primary key

        {TestMethod}
        {TestCategory("Order Tests - Read by Primary Key")}
        public method GetOrder, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Orders(OrderNumber={1})","",TestConstants.GetOrder_OrderNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data order, @ODataOrder, JsonConvert.DeserializeObject<ODataOrder>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Order by primary key and expand relation REL_OrderItems

        {TestMethod}
        {TestCategory("Order Tests - Read by Primary Key")}
        public method GetOrder_Expand_REL_OrderItems, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Orders(OrderNumber={1})?$expand=REL_OrderItems","",TestConstants.GetOrder_Expand_REL_OrderItems_OrderNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data order, @ODataOrder, JsonConvert.DeserializeObject<ODataOrder>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Order by primary key and expand relation REL_Customer

        {TestMethod}
        {TestCategory("Order Tests - Read by Primary Key")}
        public method GetOrder_Expand_REL_Customer, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Orders(OrderNumber={1})?$expand=REL_Customer","",TestConstants.GetOrder_Expand_REL_Customer_OrderNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data order, @ODataOrder, JsonConvert.DeserializeObject<ODataOrder>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Order by primary key and expand all relations

        {TestMethod}
        {TestCategory("Order Tests - Read by Primary Key")}
        public method GetOrder_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Orders(OrderNumber={1})?$expand=REL_OrderItems,REL_Customer","",TestConstants.GetOrder_Expand_All_OrderNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data order, @ODataOrder, JsonConvert.DeserializeObject<ODataOrder>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Order by alternate key 1 (CustomerNumber)

        {TestMethod}
        {TestCategory("Order Tests - Read by Alternate Key")}
        public method GetOrder_ByAltKey_CustomerNumber, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Orders(CustomerNumber={1})", "", TestConstants.GetOrder_ByAltKey_CustomerNumber_CustomerNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orders, @ODataOrders,JsonConvert.DeserializeObject<ODataOrders>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Order by alternate key 2 (DateOrdered)

        {TestMethod}
        {TestCategory("Order Tests - Read by Alternate Key")}
        public method GetOrder_ByAltKey_DateOrdered, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Orders(DateOrdered={1})", "", TestConstants.GetOrder_ByAltKey_DateOrdered_DateOrdered.ToString("yyyy-MM-dd"))
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orders, @ODataOrders,JsonConvert.DeserializeObject<ODataOrders>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Order by alternate key 3 (DateCompleted)

        {TestMethod}
        {TestCategory("Order Tests - Read by Alternate Key")}
        public method GetOrder_ByAltKey_DateCompleted, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Orders(DateCompleted={1})", "", TestConstants.GetOrder_ByAltKey_DateCompleted_DateCompleted.ToString("yyyy-MM-dd"))
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orders, @ODataOrders,JsonConvert.DeserializeObject<ODataOrders>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Order (client specified key)

        {TestMethod}
        {TestCategory("Order Tests - Create, Update & Delete")}
        public method UpdateOrder, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one order from the file
            data getRequest = String.Format("/odata/v1/Orders({1})","",TestConstants.GetOrder_OrderNumber)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Order object
            data doOrder, @Order, JsonConvert.DeserializeObject<Order>(getResult)

            doOrder.OrderNumber = TestConstants.UpdateOrder_OrderNumber

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doOrder),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/Orders({1})","",TestConstants.UpdateOrder_OrderNumber)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Order object
            doOrder = JsonConvert.DeserializeObject<Order>(getResult)

            ;;Change the first non key field to test full update
            doOrder.PlacedBy = "Y"

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doOrder),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/Orders({1})","",TestConstants.UpdateOrder_OrderNumber)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Order object
            doOrder = JsonConvert.DeserializeObject<Order>(getResult)

            Assert.AreEqual(doOrder.PlacedBy, "Y")

            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the order
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("PlacedBy", "Z")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated order record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Order object
            doOrder = JsonConvert.DeserializeObject<Order>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doOrder.PlacedBy, "Z")

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
