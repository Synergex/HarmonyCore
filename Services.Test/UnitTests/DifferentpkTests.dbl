;;*****************************************************************************
;;
;; Title:       DifferentpkTests.dbl
;;
;; Description: Unit tests for the operations defined in DifferentpksController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models
import System.Linq

namespace Services.Test.UnitTests

    {TestClass}
    public partial class DifferentpkTests

        ;;------------------------------------------------------------
        ;;Get all Differentpks

        {TestMethod}
        {TestCategory("Differentpk Tests - Read All")}
        public method GetDifferentpks, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/Differentpks").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpks, @ODataDifferentpks, JsonConvert.DeserializeObject<ODataDifferentpks>(result)
            Assert.AreEqual(differentpks.Value.Count,TestConstants.Instance.GetDifferentpks_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Differentpks and expand relation REL_Customer

        {TestMethod}
        {TestCategory("Differentpk Tests - Read All")}
        public method GetDifferentpks_Expand_REL_Customer, void
        proc
            data uri = "/odata/v1/Differentpks?$expand=REL_Customer"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Differentpks and expand all relations

        {TestMethod}
        {TestCategory("Differentpk Tests - Read All")}
        public method GetDifferentpks_Expand_All, void
        proc
            data uri = "/odata/v1/Differentpks?$expand=REL_Customer"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by primary key

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Primary Key")}
        public method GetDifferentpk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Id={1})","",TestConstants.Instance.GetDifferentpk_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpk, @ODataDifferentpk, JsonConvert.DeserializeObject<ODataDifferentpk>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by primary key and expand relation REL_Customer

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Primary Key")}
        public method GetDifferentpk_Expand_REL_Customer, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Id={1})?$expand=REL_Customer","",TestConstants.Instance.GetDifferentpk_Expand_REL_Customer_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpk, @ODataDifferentpk, JsonConvert.DeserializeObject<ODataDifferentpk>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by primary key and expand all relations

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Primary Key")}
        public method GetDifferentpk_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Id={1})?$expand=REL_Customer","",TestConstants.Instance.GetDifferentpk_Expand_All_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpk, @ODataDifferentpk, JsonConvert.DeserializeObject<ODataDifferentpk>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by alternate key 0 (Alphapk)

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Alternate Key")}
        public method GetDifferentpk_ByAltKey_Alphapk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Alphapk='{1}')", "", TestConstants.Instance.GetDifferentpk_ByAltKey_Alphapk_Alphapk)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpks, @ODataDifferentpks,JsonConvert.DeserializeObject<ODataDifferentpks>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by alternate key 1 (Decimalpk)

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Alternate Key")}
        public method GetDifferentpk_ByAltKey_Decimalpk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Decimalpk={1})", "", TestConstants.Instance.GetDifferentpk_ByAltKey_Decimalpk_Decimalpk)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpks, @ODataDifferentpks,JsonConvert.DeserializeObject<ODataDifferentpks>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by alternate key 2 (Intergerpk)

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Alternate Key")}
        public method GetDifferentpk_ByAltKey_Intergerpk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Intergerpk={1})", "", TestConstants.Instance.GetDifferentpk_ByAltKey_Intergerpk_Intergerpk)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpks, @ODataDifferentpks,JsonConvert.DeserializeObject<ODataDifferentpks>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by alternate key 3 (Datepk)

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Alternate Key")}
        public method GetDifferentpk_ByAltKey_Datepk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Datepk={1})", "", TestConstants.Instance.GetDifferentpk_ByAltKey_Datepk_Datepk.ToString("yyyy-MM-dd"))
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpks, @ODataDifferentpks,JsonConvert.DeserializeObject<ODataDifferentpks>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by alternate key 4 (Timepk)

		{TestMethod}
        {Ignore}
        {TestCategory("Differentpk Tests - Read by Alternate Key")}
        public method GetDifferentpk_ByAltKey_Timepk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
			;;there appears to be a bug in the odata lib here, there arent direct ways to send timeonly data as a key
            data request = String.Format("/odata/v1/Differentpks(Timepk={1})", "", TestConstants.Instance.GetDifferentpk_ByAltKey_Timepk_Timepk.ToString("hh:mm:ss"))
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpks, @ODataDifferentpks,JsonConvert.DeserializeObject<ODataDifferentpks>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Differentpk by alternate key 5 (Booleanpk)

        {TestMethod}
        {TestCategory("Differentpk Tests - Read by Alternate Key")}
        public method GetDifferentpk_ByAltKey_Booleanpk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Differentpks(Booleanpk={1})", "", TestConstants.Instance.GetDifferentpk_ByAltKey_Booleanpk_Booleanpk.ToString().ToLower())
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data differentpks, @ODataDifferentpks,JsonConvert.DeserializeObject<ODataDifferentpks>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Differentpk (client specified key)

        {TestMethod}
        {TestCategory("Differentpk Tests - Create, Update & Delete")}
        public method UpdateDifferentpk, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one differentpk from the file
            data getRequest = String.Format("/odata/v1/Differentpks(Id={1})","",TestConstants.Instance.GetDifferentpk_Id)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Differentpk object
            data doDifferentpk, @Differentpk, JsonConvert.DeserializeObject<Differentpk>(getResult)

            doDifferentpk.Id = TestConstants.Instance.UpdateDifferentpk_Id

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doDifferentpk),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/Differentpks(Id={1})","",TestConstants.Instance.UpdateDifferentpk_Id)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Differentpk object
            doDifferentpk = JsonConvert.DeserializeObject<Differentpk>(getResult)

            ;;Change the first non key field to test full update

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doDifferentpk),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/Differentpks(Id={1})","",TestConstants.Instance.UpdateDifferentpk_Id)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Differentpk object
            doDifferentpk = JsonConvert.DeserializeObject<Differentpk>(getResult)
            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the differentpk
            data patchDoc = new JsonPatchDocument()

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated differentpk record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Differentpk object
            doDifferentpk = JsonConvert.DeserializeObject<Differentpk>(getResult)

            ;;Verify that the property was changed

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
