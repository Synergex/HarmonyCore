;;*****************************************************************************
;;
;; Title:       CustomerTests.dbl
;;
;; Description: Unit tests for the operations defined in CustomersController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models

namespace Services.Test.UnitTests

    {TestClass}
    public partial class CustomerTests

        ;;------------------------------------------------------------
        ;;Get all Customers

        {TestMethod}
        {TestCategory("Customer Tests - Read All")}
        public method GetCustomers, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/Customers").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
            Assert.AreEqual(customers.Value.Count,TestConstants.GetCustomers_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Customers and expand relation REL_CustomerOrders

        {TestMethod}
        {TestCategory("Customer Tests - Read All")}
        public method GetCustomers_Expand_REL_CustomerOrders, void
        proc
            data uri = "/odata/v1/Customers?$expand=REL_CustomerOrders"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Customers and expand relation REL_CustomerFavoriteItem

        {TestMethod}
        {TestCategory("Customer Tests - Read All")}
        public method GetCustomers_Expand_REL_CustomerFavoriteItem, void
        proc
            data uri = "/odata/v1/Customers?$expand=REL_CustomerFavoriteItem"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Customers and expand relation REL_CustomerNotes

        {TestMethod}
        {TestCategory("Customer Tests - Read All")}
        public method GetCustomers_Expand_REL_CustomerNotes, void
        proc
            data uri = "/odata/v1/Customers?$expand=REL_CustomerNotes"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Customers and expand all relations

        {TestMethod}
        {TestCategory("Customer Tests - Read All")}
        public method GetCustomers_Expand_All, void
        proc
            data uri = "/odata/v1/Customers?$expand=REL_CustomerOrders,REL_CustomerFavoriteItem,REL_CustomerNotes"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by primary key

        {TestMethod}
        {TestCategory("Customer Tests - Read by Primary Key")}
        public method GetCustomer, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(CustomerNumber={1})","",TestConstants.GetCustomer_CustomerNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by primary key and expand relation REL_CustomerOrders

        {TestMethod}
        {TestCategory("Customer Tests - Read by Primary Key")}
        public method GetCustomer_Expand_REL_CustomerOrders, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(CustomerNumber={1})?$expand=REL_CustomerOrders","",TestConstants.GetCustomer_Expand_REL_CustomerOrders_CustomerNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by primary key and expand relation REL_CustomerFavoriteItem

        {TestMethod}
        {TestCategory("Customer Tests - Read by Primary Key")}
        public method GetCustomer_Expand_REL_CustomerFavoriteItem, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(CustomerNumber={1})?$expand=REL_CustomerFavoriteItem","",TestConstants.GetCustomer_Expand_REL_CustomerFavoriteItem_CustomerNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by primary key and expand relation REL_CustomerNotes

        {TestMethod}
        {TestCategory("Customer Tests - Read by Primary Key")}
        public method GetCustomer_Expand_REL_CustomerNotes, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(CustomerNumber={1})?$expand=REL_CustomerNotes","",TestConstants.GetCustomer_Expand_REL_CustomerNotes_CustomerNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by primary key and expand all relations

        {TestMethod}
        {TestCategory("Customer Tests - Read by Primary Key")}
        public method GetCustomer_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(CustomerNumber={1})?$expand=REL_CustomerOrders,REL_CustomerFavoriteItem,REL_CustomerNotes","",TestConstants.GetCustomer_Expand_All_CustomerNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by alternate key 1 (State)

        {TestMethod}
        {TestCategory("Customer Tests - Read by Alternate Key")}
        public method GetCustomer_ByAltKey_State, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(State='{1}')", "", TestConstants.GetCustomer_ByAltKey_State_State)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customers, @ODataCustomers,JsonConvert.DeserializeObject<ODataCustomers>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by alternate key 2 (Zip)

        {TestMethod}
        {TestCategory("Customer Tests - Read by Alternate Key")}
        public method GetCustomer_ByAltKey_Zip, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(ZipCode={1})", "", TestConstants.GetCustomer_ByAltKey_Zip_ZipCode)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customers, @ODataCustomers,JsonConvert.DeserializeObject<ODataCustomers>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Customer by alternate key 3 (PaymentTerms)

        {TestMethod}
        {TestCategory("Customer Tests - Read by Alternate Key")}
        public method GetCustomer_ByAltKey_PaymentTerms, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Customers(PaymentTermsCode='{1}')", "", TestConstants.GetCustomer_ByAltKey_PaymentTerms_PaymentTermsCode)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data customers, @ODataCustomers,JsonConvert.DeserializeObject<ODataCustomers>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Customer (client specified key)

        {TestMethod}
        {TestCategory("Customer Tests - Create, Update & Delete")}
        public method UpdateCustomer, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one customer from the file
            data getRequest = String.Format("/odata/v1/Customers({1})","",TestConstants.GetCustomer_CustomerNumber)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Customer object
            data doCustomer, @Customer, JsonConvert.DeserializeObject<Customer>(getResult)

            doCustomer.CustomerNumber = TestConstants.UpdateCustomer_CustomerNumber

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doCustomer),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/Customers({1})","",TestConstants.UpdateCustomer_CustomerNumber)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Customer object
            doCustomer = JsonConvert.DeserializeObject<Customer>(getResult)

            ;;Change the first non key field to test full update
            doCustomer.Name = "Y"

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doCustomer),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/Customers({1})","",TestConstants.UpdateCustomer_CustomerNumber)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Customer object
            doCustomer = JsonConvert.DeserializeObject<Customer>(getResult)

            Assert.AreEqual(doCustomer.Name, "Y")

            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the customer
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("Name", "Z")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated customer record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Customer object
            doCustomer = JsonConvert.DeserializeObject<Customer>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doCustomer.Name, "Z")

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
