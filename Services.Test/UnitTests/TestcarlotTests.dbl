;;*****************************************************************************
;;
;; Title:       TestcarlotTests.dbl
;;
;; Description: Unit tests for the operations defined in TestcarlotsController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models
import System.Linq

namespace Services.Test.UnitTests

    {TestClass}
    public partial class TestcarlotTests

        ;;------------------------------------------------------------
        ;;Get all Testcarlots

        {TestMethod}
        {TestCategory("Testcarlot Tests - Read All")}
        public method GetTestcarlots, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/Testcarlots").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarlots, @ODataTestcarlots, JsonConvert.DeserializeObject<ODataTestcarlots>(result)
            Assert.AreEqual(testcarlots.Value.Count,TestConstants.Instance.GetTestcarlots_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcarlots and expand relation REL_Testcars

        {TestMethod}
        {TestCategory("Testcarlot Tests - Read All")}
        public method GetTestcarlots_Expand_REL_Testcars, void
        proc
            data uri = "/odata/v1/Testcarlots?$expand=REL_Testcars"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcarlots and expand all relations

        {TestMethod}
        {TestCategory("Testcarlot Tests - Read All")}
        public method GetTestcarlots_Expand_All, void
        proc
            data uri = "/odata/v1/Testcarlots?$expand=REL_Testcars"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcarlot by primary key

        {TestMethod}
        {TestCategory("Testcarlot Tests - Read by Primary Key")}
        public method GetTestcarlot, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcarlots(Id={1})","",TestConstants.Instance.GetTestcarlot_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarlot, @ODataTestcarlot, JsonConvert.DeserializeObject<ODataTestcarlot>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcarlot by primary key and expand relation REL_Testcars

        {TestMethod}
        {TestCategory("Testcarlot Tests - Read by Primary Key")}
        public method GetTestcarlot_Expand_REL_Testcars, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcarlots(Id={1})?$expand=REL_Testcars","",TestConstants.Instance.GetTestcarlot_Expand_REL_Testcars_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarlot, @ODataTestcarlot, JsonConvert.DeserializeObject<ODataTestcarlot>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcarlot by primary key and expand all relations

        {TestMethod}
        {TestCategory("Testcarlot Tests - Read by Primary Key")}
        public method GetTestcarlot_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcarlots(Id={1})?$expand=REL_Testcars","",TestConstants.Instance.GetTestcarlot_Expand_All_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarlot, @ODataTestcarlot, JsonConvert.DeserializeObject<ODataTestcarlot>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Testcarlot (client specified key)

        {TestMethod}
        {TestCategory("Testcarlot Tests - Create, Update & Delete")}
        public method UpdateTestcarlot, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one testcarlot from the file
            data getRequest = String.Format("/odata/v1/Testcarlots(Id={1})","",TestConstants.Instance.GetTestcarlot_Id)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarlot object
            data doTestcarlot, @Testcarlot, JsonConvert.DeserializeObject<Testcarlot>(getResult)

            doTestcarlot.Id = TestConstants.Instance.UpdateTestcarlot_Id

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doTestcarlot),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/Testcarlots(Id={1})","",TestConstants.Instance.UpdateTestcarlot_Id)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarlot object
            doTestcarlot = JsonConvert.DeserializeObject<Testcarlot>(getResult)

            ;;Change the first non key field to test full update
            doTestcarlot.Name = "Y"

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doTestcarlot),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/Testcarlots(Id={1})","",TestConstants.Instance.UpdateTestcarlot_Id)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarlot object
            doTestcarlot = JsonConvert.DeserializeObject<Testcarlot>(getResult)
            Assert.AreEqual(doTestcarlot.Name, "Y")

            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the testcarlot
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("Name", "Z")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated testcarlot record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarlot object
            doTestcarlot = JsonConvert.DeserializeObject<Testcarlot>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doTestcarlot.Name, "Z")

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
