;;*****************************************************************************
;;
;; Title:       OrderItemTests.dbl
;;
;; Description: Unit tests for the operations defined in OrderItemsController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models

namespace Services.Test.UnitTests

    {TestClass}
    public partial class OrderItemTests

        ;;------------------------------------------------------------
        ;;Get all OrderItems

        {TestMethod}
        {TestCategory("OrderItem Tests - Read All")}
        public method GetOrderItems, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/OrderItems").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItems, @ODataOrderItems, JsonConvert.DeserializeObject<ODataOrderItems>(result)
            Assert.AreEqual(orderItems.Value.Count,TestConstants.GetOrderItems_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all OrderItems and expand relation REL_Order

        {TestMethod}
        {TestCategory("OrderItem Tests - Read All")}
        public method GetOrderItems_Expand_REL_Order, void
        proc
            data uri = "/odata/v1/OrderItems?$expand=REL_Order"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all OrderItems and expand relation REL_Item

        {TestMethod}
        {TestCategory("OrderItem Tests - Read All")}
        public method GetOrderItems_Expand_REL_Item, void
        proc
            data uri = "/odata/v1/OrderItems?$expand=REL_Item"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all OrderItems and expand all relations

        {TestMethod}
        {TestCategory("OrderItem Tests - Read All")}
        public method GetOrderItems_Expand_All, void
        proc
            data uri = "/odata/v1/OrderItems?$expand=REL_Order,REL_Item"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single OrderItem by primary key

        {TestMethod}
        {TestCategory("OrderItem Tests - Read by Primary Key")}
        public method GetOrderItem, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/OrderItems(OrderNumber={1},ItemNumber={2})","",TestConstants.GetOrderItem_OrderNumber,TestConstants.GetOrderItem_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single OrderItem by primary key and expand relation REL_Order

        {TestMethod}
        {TestCategory("OrderItem Tests - Read by Primary Key")}
        public method GetOrderItem_Expand_REL_Order, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/OrderItems(OrderNumber={1},ItemNumber={2})?$expand=REL_Order","",TestConstants.GetOrderItem_Expand_REL_Order_OrderNumber,TestConstants.GetOrderItem_Expand_REL_Order_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single OrderItem by primary key and expand relation REL_Item

        {TestMethod}
        {TestCategory("OrderItem Tests - Read by Primary Key")}
        public method GetOrderItem_Expand_REL_Item, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/OrderItems(OrderNumber={1},ItemNumber={2})?$expand=REL_Item","",TestConstants.GetOrderItem_Expand_REL_Item_OrderNumber,TestConstants.GetOrderItem_Expand_REL_Item_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single OrderItem by primary key and expand all relations

        {TestMethod}
        {TestCategory("OrderItem Tests - Read by Primary Key")}
        public method GetOrderItem_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/OrderItems(OrderNumber={1},ItemNumber={2})?$expand=REL_Order,REL_Item","",TestConstants.GetOrderItem_Expand_All_OrderNumber,TestConstants.GetOrderItem_Expand_All_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single OrderItem by alternate key 1 (ItemOrdered)

        {TestMethod}
        {TestCategory("OrderItem Tests - Read by Alternate Key")}
        public method GetOrderItem_ByAltKey_ItemOrdered, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/OrderItems(ItemOrdered={1})", "", TestConstants.GetOrderItem_ByAltKey_ItemOrdered_ItemOrdered)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItems, @ODataOrderItems,JsonConvert.DeserializeObject<ODataOrderItems>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single OrderItem by alternate key 2 (DateShipped)

        {TestMethod}
        {TestCategory("OrderItem Tests - Read by Alternate Key")}
        public method GetOrderItem_ByAltKey_DateShipped, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/OrderItems(DateShipped={1})", "", TestConstants.GetOrderItem_ByAltKey_DateShipped_DateShipped.ToString("yyyy-MM-dd"))
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItems, @ODataOrderItems,JsonConvert.DeserializeObject<ODataOrderItems>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single OrderItem by alternate key 3 (InvoiceNumber)

        {TestMethod}
        {TestCategory("OrderItem Tests - Read by Alternate Key")}
        public method GetOrderItem_ByAltKey_InvoiceNumber, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/OrderItems(InvoiceNumber={1})", "", TestConstants.GetOrderItem_ByAltKey_InvoiceNumber_InvoiceNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data orderItems, @ODataOrderItems,JsonConvert.DeserializeObject<ODataOrderItems>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new OrderItem (client specified key)

        {TestMethod}
        {TestCategory("OrderItem Tests - Create, Update & Delete")}
        public method UpdateOrderItem, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one orderItem from the file
            data getRequest = String.Format("/odata/v1/OrderItems({1},{2})","",TestConstants.GetOrderItem_OrderNumber,TestConstants.GetOrderItem_ItemNumber)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a OrderItem object
            data doOrderItem, @OrderItem, JsonConvert.DeserializeObject<OrderItem>(getResult)

            doOrderItem.OrderNumber = TestConstants.UpdateOrderItem_OrderNumber
            doOrderItem.ItemNumber = TestConstants.UpdateOrderItem_ItemNumber

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doOrderItem),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/OrderItems({1},{2})","",TestConstants.UpdateOrderItem_OrderNumber,TestConstants.UpdateOrderItem_ItemNumber)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a OrderItem object
            doOrderItem = JsonConvert.DeserializeObject<OrderItem>(getResult)

            ;;Change the first non key field to test full update
            doOrderItem.QuantityOrdered = 8

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doOrderItem),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/OrderItems({1},{2})","",TestConstants.UpdateOrderItem_OrderNumber,TestConstants.UpdateOrderItem_ItemNumber)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a OrderItem object
            doOrderItem = JsonConvert.DeserializeObject<OrderItem>(getResult)

            Assert.AreEqual(doOrderItem.QuantityOrdered, 8)

            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the orderItem
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("QuantityOrdered", "9")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated orderItem record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a OrderItem object
            doOrderItem = JsonConvert.DeserializeObject<OrderItem>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doOrderItem.QuantityOrdered, 9)

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
