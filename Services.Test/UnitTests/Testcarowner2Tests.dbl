;;*****************************************************************************
;;
;; Title:       Testcarowner2Tests.dbl
;;
;; Description: Unit tests for the operations defined in Testcarowner2sController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models
import System.Linq

namespace Services.Test.UnitTests

    {TestClass}
    public partial class Testcarowner2Tests

        ;;------------------------------------------------------------
        ;;Get all Testcarowner2s

        {TestMethod}
        {TestCategory("Testcarowner2 Tests - Read All")}
        public method GetAllTestcarowner2s, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/Testcarowner2s").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarowner2s, @ODataTestcarowner2sMultiple, JsonConvert.DeserializeObject<ODataTestcarowner2sMultiple>(result)
            Assert.AreEqual(testcarowner2s.Value.Count,TestConstants.Instance.GetTestcarowner2s_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcarowner2s and expand relation REL_Testcars

        {TestMethod}
        {TestCategory("Testcarowner2 Tests - Read All")}
        public method GetAllTestcarowner2s_Expand_REL_Testcars, void
        proc
            data uri = "/odata/v1/Testcarowner2s?$expand=REL_Testcars"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Testcarowner2s and expand all relations

        {TestMethod}
        {TestCategory("Testcarowner2 Tests - Read All")}
        public method GetAllTestcarowner2s_Expand_All, void
        proc
            data uri = "/odata/v1/Testcarowner2s?$expand=REL_Testcars"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcarowner2 by primary key

        {TestMethod}
        {TestCategory("Testcarowner2 Tests - Read by Primary Key")}
        public method GetOneTestcarowner2, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcarowner2s(Id={1})","",TestConstants.Instance.GetTestcarowner2_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarowner2, @ODataTestcarowner2Single, JsonConvert.DeserializeObject<ODataTestcarowner2Single>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcarowner2 by primary key and expand relation REL_Testcars

        {TestMethod}
        {TestCategory("Testcarowner2 Tests - Read by Primary Key")}
        public method GetOneTestcarowner2_Expand_REL_Testcars, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcarowner2s(Id={1})?$expand=REL_Testcars","",TestConstants.Instance.GetTestcarowner2_Expand_REL_Testcars_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarowner2, @ODataTestcarowner2Single, JsonConvert.DeserializeObject<ODataTestcarowner2Single>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Testcarowner2 by primary key and expand all relations

        {TestMethod}
        {TestCategory("Testcarowner2 Tests - Read by Primary Key")}
        public method GetOneTestcarowner2_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Testcarowner2s(Id={1})?$expand=REL_Testcars","",TestConstants.Instance.GetTestcarowner2_Expand_All_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data testcarowner2, @ODataTestcarowner2Single, JsonConvert.DeserializeObject<ODataTestcarowner2Single>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Testcarowner2 (client specified key)

        {TestMethod}
        {TestCategory("Testcarowner2 Tests - Create, Update & Delete")}
        public method UpdateTestcarowner2, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one testcarowner2 from the file
            data getRequest = String.Format("/odata/v1/Testcarowner2s(Id={1})","",TestConstants.Instance.GetTestcarowner2_Id)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarowner2 object
            data doTestcarowner2, @Testcarowner2, JsonConvert.DeserializeObject<Testcarowner2>(getResult)

            doTestcarowner2.Id = TestConstants.Instance.UpdateTestcarowner2_Id

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doTestcarowner2),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/Testcarowner2s(Id={1})","",TestConstants.Instance.UpdateTestcarowner2_Id)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarowner2 object
            doTestcarowner2 = JsonConvert.DeserializeObject<Testcarowner2>(getResult)

            ;;Change the first non key field to test full update
            doTestcarowner2.Name = "Y"

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doTestcarowner2),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/Testcarowner2s(Id={1})","",TestConstants.Instance.UpdateTestcarowner2_Id)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarowner2 object
            doTestcarowner2 = JsonConvert.DeserializeObject<Testcarowner2>(getResult)
            Assert.AreEqual(doTestcarowner2.Name, "Y")

            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the testcarowner2
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("Name", "Z")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated testcarowner2 record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Testcarowner2 object
            doTestcarowner2 = JsonConvert.DeserializeObject<Testcarowner2>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doTestcarowner2.Name, "Z")

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
