;;*****************************************************************************
;;
;; Title:       ItemTests.dbl
;;
;; Description: Unit tests for the operations defined in ItemsController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net
import System.Net.Http
import Services
import Services.Test.Models

namespace Services.Test.UnitTests

    {TestClass}
    public partial class ItemTests

        ;;------------------------------------------------------------
        ;;Get all Items

        {TestMethod}
        {TestCategory("Item Tests - Read All")}
        public method GetItems, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/v1/Items").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data items, @ODataItems, JsonConvert.DeserializeObject<ODataItems>(result)
            Assert.AreEqual(items.Value.Count,TestConstants.GetItems_Count)
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Items and expand relation REL_Vendor

        {TestMethod}
        {TestCategory("Item Tests - Read All")}
        public method GetItems_Expand_REL_Vendor, void
        proc
            data uri = "/odata/v1/Items?$expand=REL_Vendor"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Items and expand relation REL_OrderItems

        {TestMethod}
        {TestCategory("Item Tests - Read All")}
        public method GetItems_Expand_REL_OrderItems, void
        proc
            data uri = "/odata/v1/Items?$expand=REL_OrderItems"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get all Items and expand all relations

        {TestMethod}
        {TestCategory("Item Tests - Read All")}
        public method GetItems_Expand_All, void
        proc
            data uri = "/odata/v1/Items?$expand=REL_Vendor,REL_OrderItems"
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync(uri).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by primary key

        {TestMethod}
        {TestCategory("Item Tests - Read by Primary Key")}
        public method GetItem, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(ItemNumber={1})","",TestConstants.GetItem_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data item, @ODataItem, JsonConvert.DeserializeObject<ODataItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by primary key and expand relation REL_Vendor

        {TestMethod}
        {TestCategory("Item Tests - Read by Primary Key")}
        public method GetItem_Expand_REL_Vendor, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(ItemNumber={1})?$expand=REL_Vendor","",TestConstants.GetItem_Expand_REL_Vendor_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data item, @ODataItem, JsonConvert.DeserializeObject<ODataItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by primary key and expand relation REL_OrderItems

        {TestMethod}
        {TestCategory("Item Tests - Read by Primary Key")}
        public method GetItem_Expand_REL_OrderItems, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(ItemNumber={1})?$expand=REL_OrderItems","",TestConstants.GetItem_Expand_REL_OrderItems_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data item, @ODataItem, JsonConvert.DeserializeObject<ODataItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by primary key and expand all relations

        {TestMethod}
        {TestCategory("Item Tests - Read by Primary Key")}
        public method GetItem_Expand_All, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(ItemNumber={1})?$expand=REL_Vendor,REL_OrderItems","",TestConstants.GetItem_Expand_All_ItemNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data item, @ODataItem, JsonConvert.DeserializeObject<ODataItem>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by alternate key 1 (VendorNumber)

        {TestMethod}
        {TestCategory("Item Tests - Read by Alternate Key")}
        public method GetItem_ByAltKey_VendorNumber, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(VendorNumber={1})", "", TestConstants.GetItem_ByAltKey_VendorNumber_VendorNumber)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data items, @ODataItems,JsonConvert.DeserializeObject<ODataItems>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by alternate key 2 (Color)

        {TestMethod}
        {TestCategory("Item Tests - Read by Alternate Key")}
        public method GetItem_ByAltKey_Color, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(FlowerColor='{1}')", "", TestConstants.GetItem_ByAltKey_Color_FlowerColor)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data items, @ODataItems,JsonConvert.DeserializeObject<ODataItems>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by alternate key 3 (Size)

        {TestMethod}
        {TestCategory("Item Tests - Read by Alternate Key")}
        public method GetItem_ByAltKey_Size, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(Size={1})", "", TestConstants.GetItem_ByAltKey_Size_Size)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data items, @ODataItems,JsonConvert.DeserializeObject<ODataItems>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Item by alternate key 4 (Name)

        {TestMethod}
        {TestCategory("Item Tests - Read by Alternate Key")}
        public method GetItem_ByAltKey_Name, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/v1/Items(CommonName='{1}')", "", TestConstants.GetItem_ByAltKey_Name_CommonName)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data items, @ODataItems,JsonConvert.DeserializeObject<ODataItems>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Item (client specified key)

        {TestMethod}
        {TestCategory("Item Tests - Create, Update & Delete")}
        public method UpdateItem, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one item from the file
            data getRequest = String.Format("/odata/v1/Items({1})","",TestConstants.GetItem_ItemNumber)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Item object
            data doItem, @Item, JsonConvert.DeserializeObject<Item>(getResult)

            doItem.ItemNumber = TestConstants.UpdateItem_ItemNumber

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doItem),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/v1/Items({1})","",TestConstants.UpdateItem_ItemNumber)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Item object
            doItem = JsonConvert.DeserializeObject<Item>(getResult)

            ;;Change the first non key field to test full update
            doItem.LatinName = "Y"

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doItem),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/v1/Items({1})","",TestConstants.UpdateItem_ItemNumber)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Item object
            doItem = JsonConvert.DeserializeObject<Item>(getResult)

            Assert.AreEqual(doItem.LatinName, "Y")

            ;;Update one non-existant property in the customer
            data badPatchDoc = new JsonPatchDocument()
            badPatchDoc.Replace("xyzzy", "Z")

            ;;Serialize the bad patch to JSON
            data badSerializedPatch = JsonConvert.SerializeObject(badPatchDoc)

            ;;Apply the bad patch
            disposable data badPatchRequestBody = new StringContent(badSerializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data badPatchResponse = client.PatchAsync(request, badPatchRequestBody).Result
            ;;Check that we got a failure response from the web service
            Assert.AreEqual(badPatchResponse.StatusCode, HttpStatusCode.BadRequest)

            ;;Update one property in the item
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("LatinName", "Z")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated item record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Item object
            doItem = JsonConvert.DeserializeObject<Item>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doItem.LatinName, "Z")

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
