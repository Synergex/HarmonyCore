;;*****************************************************************************
;;
;; Title:       UnitTestEnvironment.dbl
;;
;; Description: Configures an environment in which unit tests can operate
;;              with a known initial data state.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore
import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.TestHost
import Microsoft.VisualStudio.TestTools.UnitTesting
import System.Collections.Generic
import System.IO
import System.Net.Http
import System.Text
import Services
import Services.Models
import Services.Test.DataGenerators

namespace Services.Test

    {TestClass}
    public partial class UnitTestEnvironment

        public static Server, @TestServer

        {AssemblyInitialize}
        public static method AssemblyInitialize, void
            required in context, @TestContext
        proc
            ;;Allows select to join when the keys in the file are not the same type as the keys in the code
            data status, int
            xcall setlog("SYNSEL_NUMALPHA_KEYS", 1, status) 
            xcall setlog("DBG_SELECT", 2, status) 
            ;;Configure the test environment (set logicals, create files in a known state, etc.)
            UnitTestEnvironment.Configure()

            ;;Define the content root and web root folders (so we can pick up the Swagger file for API documentation)
            data wwwroot = Path.Combine(AppContext.BaseDirectory, "wwwroot")

            if(string.IsNullOrEmpty(wwwroot) && Directory.Exists(wwwroot)) then
            begin
                ;;Create a TestServer to host the Web API services
                Server = new TestServer(WebHost.CreateDefaultBuilder().UseStartup<Startup>())
            end
            else
            begin
                ;;Create a TestServer to host the Web API services
                Server = new TestServer(WebHost.CreateDefaultBuilder().UseContentRoot(wwwroot).UseWebRoot(wwwroot).UseStartup<Startup>())
            end

            ;;Fake out HTTPS
            Server.BaseAddress = new Uri("https://localhost")

        endmethod

        {AssemblyCleanup}
        public static method AssemblyCleanup, void
        proc
            ;;Clean up the test host
            Server.Dispose()
            Server = ^null

            ;;Delete the data files
            UnitTestEnvironment.Cleanup()

        endmethod

        public static method Configure, void
        proc
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)
            setLogicals()
            deleteFiles()
            createFiles()
        endmethod

        public static method Cleanup, void
        proc
            deleteFiles()
        endmethod

        private static method setLogicals, void
        proc
            data sampleDataFolder = FindRelativeFolderForAssembly("SampleData")
            data logicals = new List<string>()
            data logical = String.Empty
            data fileSpec = String.Empty

            fileSpec = "DAT:customers.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:customer_notes.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:items.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:orders.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:order_items.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:vendors.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:CUSTOMER_EX.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:nonuniquepk.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:differentpk.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:testcar.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:testcarlot.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:testcarowner1.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:testcarowner2.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            fileSpec = "DAT:testcarowner3.ism"
            if (fileSpec.Contains(":"))
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!logicals.Contains(logical))
                    logicals.Add(logical)
            end

            foreach logical in logicals
            begin
                data sts, int
                xcall setlog(logical,sampleDataFolder,sts)
            end

        endmethod

        private static method createFiles, void
        proc
            data chout, int
            data dataFile, string
            data xdlFile, string

            data customers = CustomerLoader.LoadFromFile()
            data customerNotes = CustomerNoteLoader.LoadFromFile()
            data items = ItemLoader.LoadFromFile()
            data orders = OrderLoader.LoadFromFile()
            data orderItems = OrderItemLoader.LoadFromFile()
            data vendors = VendorLoader.LoadFromFile()
            data customerExs = CustomerExLoader.LoadFromFile()
            data nonuniquepks = NonuniquepkLoader.LoadFromFile()
            data differentpks = DifferentpkLoader.LoadFromFile()
            data testcars = TestcarLoader.LoadFromFile()
            data testcarlots = TestcarlotLoader.LoadFromFile()
            data testcarowner1s = Testcarowner1Loader.LoadFromFile()
            data testcarowner2s = Testcarowner2Loader.LoadFromFile()
            data testcarowner3s = Testcarowner3Loader.LoadFromFile()

            ;;Create and load the customers file

            dataFile = "DAT:customers.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data customer, @Customer
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customer in customers
                store(chout,customer.SynergyRecord)
            close chout

            ;;Create and load the customerNotes file

            dataFile = "DAT:customer_notes.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data customerNote, @CustomerNote
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customerNote in customerNotes
                store(chout,customerNote.SynergyRecord)
            close chout

            ;;Create and load the items file

            dataFile = "DAT:items.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data item, @Item
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach item in items
                store(chout,item.SynergyRecord)
            close chout

            ;;Create and load the orders file

            dataFile = "DAT:orders.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data order, @Order
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach order in orders
                store(chout,order.SynergyRecord)
            close chout

            ;;Create and load the orderItems file

            dataFile = "DAT:order_items.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data orderItem, @OrderItem
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach orderItem in orderItems
                store(chout,orderItem.SynergyRecord)
            close chout

            ;;Create and load the vendors file

            dataFile = "DAT:vendors.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data vendor, @Vendor
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach vendor in vendors
                store(chout,vendor.SynergyRecord)
            close chout

            ;;Create and load the customerExs file

            dataFile = "DAT:CUSTOMER_EX.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data customerEx, @CustomerEx
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customerEx in customerExs
                store(chout,customerEx.SynergyRecord)
            close chout

            ;;Create and load the nonuniquepks file

            dataFile = "DAT:nonuniquepk.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data nonuniquepk, @Nonuniquepk
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach nonuniquepk in nonuniquepks
                store(chout,nonuniquepk.SynergyRecord)
            close chout

            ;;Create and load the differentpks file

            dataFile = "DAT:differentpk.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data differentpk, @Differentpk
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach differentpk in differentpks
                store(chout,differentpk.SynergyRecord)
            close chout

            ;;Create and load the testcars file

            dataFile = "DAT:testcar.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data testcar, @Testcar
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcar in testcars
                store(chout,testcar.SynergyRecord)
            close chout

            ;;Create and load the testcarlots file

            dataFile = "DAT:testcarlot.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data testcarlot, @Testcarlot
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarlot in testcarlots
                store(chout,testcarlot.SynergyRecord)
            close chout

            ;;Create and load the testcarowner1s file

            dataFile = "DAT:testcarowner1.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data testcarowner1, @Testcarowner1
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarowner1 in testcarowner1s
                store(chout,testcarowner1.SynergyRecord)
            close chout

            ;;Create and load the testcarowner2s file

            dataFile = "DAT:testcarowner2.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data testcarowner2, @Testcarowner2
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarowner2 in testcarowner2s
                store(chout,testcarowner2.SynergyRecord)
            close chout

            ;;Create and load the testcarowner3s file

            dataFile = "DAT:testcarowner3.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data testcarowner3, @Testcarowner3
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarowner3 in testcarowner3s
                store(chout,testcarowner3.SynergyRecord)
            close chout

        endmethod

        private static method deleteFiles, void
        proc
            ;;Delete the customers file
            try
            begin
                xcall delet("DAT:customers.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the customerNotes file
            try
            begin
                xcall delet("DAT:customer_notes.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the items file
            try
            begin
                xcall delet("DAT:items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orders file
            try
            begin
                xcall delet("DAT:orders.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orderItems file
            try
            begin
                xcall delet("DAT:order_items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the vendors file
            try
            begin
                xcall delet("DAT:vendors.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the customerExs file
            try
            begin
                xcall delet("DAT:CUSTOMER_EX.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the nonuniquepks file
            try
            begin
                xcall delet("DAT:nonuniquepk.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the differentpks file
            try
            begin
                xcall delet("DAT:differentpk.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcars file
            try
            begin
                xcall delet("DAT:testcar.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarlots file
            try
            begin
                xcall delet("DAT:testcarlot.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarowner1s file
            try
            begin
                xcall delet("DAT:testcarowner1.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarowner2s file
            try
            begin
                xcall delet("DAT:testcarowner2.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarowner3s file
            try
            begin
                xcall delet("DAT:testcarowner3.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

        endmethod

        public static method FindRelativeFolderForAssembly, string
            folderName, string
        proc
            data assemblyLocation = ^typeof(UnitTestEnvironment).Assembly.Location
            data currentFolder = Path.GetDirectoryName(assemblyLocation)
            data rootPath = Path.GetPathRoot(currentFolder)
            while(currentFolder != rootPath)
            begin
                if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
                    mreturn Path.Combine(currentFolder, folderName)
                else
                    currentFolder = Path.GetFullPath(currentFolder + "..\")
            end
            mreturn ^null
        endmethod

    endclass

endnamespace
