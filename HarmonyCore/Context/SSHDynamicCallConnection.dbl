import System
import System.Collections.Generic
import System.Text
import Renci.SshNet
import Renci.SshNet.Common
import System.IO
import Newtonsoft.Json
import System.Diagnostics
import System.Threading.Tasks
import StreamJsonRpc
import System.Threading
import Harmony.Core.Utility
import Nerdbank.Streams
import System.Buffers
import System.Text.RegularExpressions
import System.Collections.Concurrent

namespace Harmony.Core.Context

	public class SSHDynamicCallConnection implements IDynamicCallConnection
        private static NewLineBytes, [#]Byte, new byte[#] { 10, 13 }
		private static EscapeSequenceRegex, @Regex
		private mTargetConnection, @SshClient
		private mTargetShell, @ShellStream
		private mLaunchCommand, @string
		private mMakeReadyTask, @Lazy<Task<JsonRpc>>
		private mTargetOS, RemoteTargetOS
		private mNeedsRecycle, boolean, false
		private mLocalRPCHandlers, @Dictionary<string, Delegate> 
		private mCallTimeout, int
		private mConnectionTimeout, int
		private mLastSeenBytes, @ConcurrentQueue<string>

        static method SSHDynamicCallConnection
        proc
			EscapeSequenceRegex = new Regex("(\x9B|\x1B\[)[0-?]*[ -\/]*[@-~]", RegexOptions.Compiled)
		endmethod


		public method SSHDynamicCallConnection
			targetOS, RemoteTargetOS
			startInfo, @ConnectionInfo
			command, @string
			callTimeout, int
			connectionTimeout, int
		proc
			mLocalRPCHandlers = new Dictionary<string, Delegate>()
			mCallTimeout = callTimeout
			mConnectionTimeout = connectionTimeout
			mTargetOS = targetOS
			mLaunchCommand = command
			mTargetConnection = new SshClient(startInfo)
			mMakeReadyTask = new Lazy<Task<JsonRpc>>(MakeReadyInternal)
            IsHealthy = true
		endmethod
		
		public readwrite property IsHealthy, boolean

		public virtual async method Recycle, @Task
			endparams
		proc
			if(mNeedsRecycle && mMakeReadyTask.IsValueCreated)
			begin
				data jsonRpcConnection, @JsonRPC
				try
				begin
					mNeedsRecycle = false
					jsonRpcConnection = await mMakeReadyTask.Value
					data cancelSource = new CancellationTokenSource(mCallTimeout)
					data readOnlyArgs = ^as(new object[0], @IReadOnlyList<Object>)
					await jsonRpcConnection.InvokeWithCancellationAsync<int>("rpc.ping", readOnlyArgs, cancelSource.Token)
				end
				catch(ex, @Exception)
				begin
					if(jsonRpcConnection != ^null && !jsonRpcConnection.IsDisposed)
					begin
						jsonRpcConnection.Dispose()
					end
                    if(mTargetConnection.IsConnected)
                    begin
                        mTargetShell.Close()
                        mTargetConnection.Disconnect()
                    end
					throw
				end
				endtry
			end
		endmethod
				
		public virtual async method Disconnect, @Task
			endparams
		proc
			try
			begin
				if(mTargetConnection.IsConnected)
				begin
                    await this.Notify("rpc.shutdown", new ArgumentDataDefinition[0])
                    mTargetShell.Close()
                    mTargetConnection.Disconnect()
				end
			end
			catch(ex, @Exception)
			begin
				DebugLogSession.Logging.LogException(ex, "SSHDynamicCallConnection-Disconnect")
			end
			endtry

		endmethod

		public virtual async method Call, @Task<[#]@ReturnParameterDefintion>
			name, @string
			args, [#]@ArgumentDataDefinition
		proc
			data jsonRpcConnection = await mMakeReadyTask.Value
			try
			begin
				data cancelSource = new CancellationTokenSource(mCallTimeout)
				data readOnlyArgs = ^as(args, @IReadOnlyList<ArgumentDataDefinition>)
				data result = await jsonRpcConnection.InvokeWithCancellationAsync<[#]@ReturnParameterDefintion>(name, readOnlyArgs, cancelSource.Token)
				mreturn result
			end
			catch(ex, @StreamJsonRpc.ConnectionLostException)
            begin
                IsHealthy = false
				;;this will be empty if trace level logging is not turned on in order to prevent leaking sensitive data in production environments
				if(mLastSeenBytes != ^null && mLastSeenBytes.Count > 0) then
                    throw new StreamJsonRpc.ConnectionLostException("The JSON-RPC connection with the remote party was lost before the request could complete. Last seen bytes passed: '" + string.Join(" ", mLastSeenBytes).Replace(%char(10), "<LF>").Replace(%char(13), "<CR>") + "'", ex)
                else
					throw
			end
			catch(ex, @RemoteInvocationException)
			begin
				if(ex.ErrorCode == -32000) then 
					IsHealthy = false
				else
					mNeedsRecycle = true

				throw new BridgeException(ex)
			end
			catch(ex, @RemoteMethodNotFoundException)
			begin
				throw new BridgeException(ex)
			end
			catch(ex, @Exception)
			begin
				IsHealthy = false
				throw
			end
			endtry

		endmethod

		public virtual async method Notify, @Task
			name, @string
			args, [#]@ArgumentDataDefinition
		proc
			data jsonRpcConnection = await mMakeReadyTask.Value
			try
			begin
				data cancelSource = new CancellationTokenSource(mCallTimeout)
				data readOnlyArgs = ^as(args, @IReadOnlyList<ArgumentDataDefinition>)
				await jsonRpcConnection.NotifyAsync(name, readOnlyArgs)
			end
			catch(ex, @RemoteInvocationException)
			begin
				mNeedsRecycle = true
				throw new BridgeException(ex)
			end
			catch(ex, @RemoteMethodNotFoundException)
			begin
				throw new BridgeException(ex)
			end
			catch(ex, @Exception)
			begin
				IsHealthy = false
				throw
			end
			endtry

		endmethod

		public method AddLocalRpcMethod, void
			name, @string
			handler, @Delegate
		proc
			if(!mLocalRPCHandlers.ContainsKey(name))
			begin
				mLocalRPCHandlers.Add(name, handler)
				if(mMakeReadyTask.IsValueCreated && mMakeReadyTask.Value.Status == TaskStatus.RanToCompletion)
				begin
					if(handler.Method.IsStatic) then
						mMakeReadyTask.Value.Result.AddLocalRpcMethod(name, handler.Method, ^null)
					else
						mMakeReadyTask.Value.Result.AddLocalRpcMethod(name, handler.Method, handler.Target)
				end
			end
		endmethod

		public async virtual method MakeReadyInternal, @Task<JsonRpc>
			endparams
		proc
			data cancelSource = new CancellationTokenSource(mConnectionTimeout)
			data cancelToken = cancelSource.Token
            mTargetConnection.Connect()

            if(DebugLogSession.Logging.Level == Harmony.Core.Interface.LogLevel.Trace)
            begin
                mLastSeenBytes = new ConcurrentQueue<String>()
            end

            data sshBufferSize = mTargetOS == RemoteTargetOS.VMS ? 4096 : 1024 * 64

			mTargetShell = mTargetConnection.CreateShellStream("vt220", 0, 0,0,0, sshBufferSize)
			data streamWrapper = new ShellStreamWrapper(mTargetShell, mTargetConnection, lambda() { IsHealthy = false }, StreamReadMonitorEvent)
			disposable data reader = new StreamReader(streamWrapper, Encoding.ASCII, false, 4096, true) 
			disposable data writer = new StreamWriter(streamWrapper, Encoding.ASCII, 4096, true) 
			data guidString, @string, Guid.NewGuid().ToString()
			data guidStrings = new HashSet<string>()
			data readLines, @List<string>
            data foundMatch, boolean, false
			guidStrings.Add(guidString)
			data connectionLog = new List<string>()
			data newLine = %char(13) + %char(10)

			if(mTargetOS == RemoteTargetOS.Linux || mTargetOS == RemoteTargetOS.Unix)
				newLine = %char(10)

			while(!foundMatch)
			begin
				cancelToken.ThrowIfCancellationRequested()
				if(mTargetOS == RemoteTargetOS.VMS) then
				begin
					await writer.WriteAsync('WRITE SYS$OUTPUT "' + guidString +  '"' + newLine)
				end
				else
				begin
					await writer.WriteAsync('echo "' + guidString +  '"' + newLine)
				end

				await writer.FlushAsync()
				readLines = TrimControlChars(await reader.ReadLineAsync())
				while(readLines == ^null || readLines.Count == 0)
				begin
					if(cancelToken.IsCancellationRequested)
					begin
						throw new BridgeConnectionException("Timeout", connectionLog)
					end
					readLines = TrimControlChars(await reader.ReadLineAsync())
					connectionLog.AddRange(readLines)
				end
				
				data checkString, @string
                data readLine, @string
                foreach readLine in readLines
				begin
					foreach checkString in guidStrings
					begin
						if(readLine.Contains(checkString)) 
						begin
                            foundMatch = true
							exitloop
						end
                    end
                end

				if(!foundMatch)
				begin
					guidString = Guid.NewGuid().ToString()
					guidStrings.Add(guidString)
				end
            end

			await writer.WriteAsync(mLaunchCommand + newLine)
			await writer.FlushAsync()
			do
			begin
				if(cancelToken.IsCancellationRequested)
				begin
					throw new BridgeConnectionException("Timeout", connectionLog)
				end

				readLines = TrimControlChars(await reader.ReadLineAsync())
				connectionLog.AddRange(readLines)
			end
			until(readLines.Contains("READY"))
			
			data formatter = new JsonMessageFormatter(new UTF8Encoding(false))
			formatter.JsonSerializer.FloatParseHandling = FloatParseHandling.Decimal

			data result = new JsonRPC(new HeaderDelimitedMessageHandler(streamWrapper, formatter))
			if(DebugLogSession.Logging.Level == Harmony.Core.Interface.LogLevel.Trace)
            begin
				result.TraceSource = new TraceSource("Client", SourceLevels.All)
			end

			data rpcKvp, KeyValuePair<string, Delegate>
			foreach rpcKvp in mLocalRPCHandlers
			begin
				if(rpcKvp.Value.Method.IsStatic) then
					result.AddLocalRpcMethod(rpcKvp.Key, rpcKvp.Value.Method, ^null)
				else
					result.AddLocalRpcMethod(rpcKvp.Key, rpcKvp.Value.Method, rpcKvp.Value.Target)
			end

			result.StartListening()
			mreturn result
		endmethod
	
		public method TrimControlChars, @List<string>
			arg, @string
		proc
			if(arg == ^null)
				mreturn ^null
			data result = new List<string>()
			data arrForm = EscapeSequenceRegex.Replace(arg, "").ToCharArray()
            data buffer = new StringBuilder(arrForm.Length)
			data ch, char
            foreach ch in arrForm
			begin
				if (!Char.IsControl(ch) && !Char.IsWhiteSpace(ch)) then
                    buffer.Append(ch)
                else
                begin
                    if(buffer.Length > 0)
					begin
                        result.Add(buffer.ToString())
						buffer.Clear()
                    end
                end
            end

            if(buffer.Length > 0)
            begin
                result.Add(buffer.ToString())
            end

			mreturn result
		endmethod



		public virtual method MakeReady, @Task
		proc
			mreturn mMakeReadyTask.Value
		endmethod

		private method StreamReadMonitorEvent, void
			bytes, string
        proc
			if(DebugLogSession.Logging.Level == Harmony.Core.Interface.LogLevel.Trace)
				mLastSeenBytes.Enqueue(bytes)
		endmethod

		private class ShellStreamWrapper extends Stream

			public override method Read, int
				buffer, [#]byte 
				offset, int 
				count, int 
				endparams
			proc
                mreturn mSimplex.Read(buffer, offset, count)
			endmethod

			private static mConnectionId, int, 0
            private mStream, @ShellStream
			private mSimplex, @SimplexStream
            private mConnection, @SshClient
            private mConnectionException, @Exception
            private mCallOnClose, @Action
			private mCallOnRead, @Action<string>
			;private mEvent, @AutoResetEvent
			public method ShellStreamWrapper
				stream, @ShellStream
                connection, @SshClient
                callOnClose, @Action
                callOnRead, @Action<string>
            proc
                mCallOnRead = callOnRead
                mCallOnClose = callOnClose
				mStream = stream
				mConnection = connection
				Interlocked.Increment(mConnectionId)
                DebugLogSession.Logging.LogDebug("Created SSHDynamicCallConnection id:{0} : {1}", mConnectionId, new SSHConnectionDebugLogHelper(mConnection.ConnectionInfo))
                mStream.DataReceived += DataReceived
                mConnection.ErrorOccurred += ErrorOccurred
                mSimplex = new SimplexStream()
				;mEvent = new AutoResetEvent(false)
			endmethod

            private method DataReceived, void
                sender, @object
				args, @ShellDataEventArgs
            proc
                Monitor.Enter(this)
                try
				begin
					DebugLogSession.Logging.LogTrace("SSHDynamicCallConnection id:{0} recived ascii string: {1}", mConnectionId, new ASCIIArrayDebugLogHelper(args.Data, 0, args.Data.Length))
					mSimplex.Write(args.Data, 0, args.Data.Length)
                    mSimplex.Flush()
                    mCallOnRead(mStream.Read())
                end
                finally
                begin
                    Monitor.Exit(this)
                end
				endtry
            endmethod

            private method ErrorOccurred, void
                sender, @object
                args, @ExceptionEventArgs
            proc
				mConnectionException = args.Exception
            endmethod

			public override property CanRead, Boolean
				method get
				proc
					mreturn mSimplex.CanRead
				endmethod
			endproperty

			public override method Close, void
			proc
                DebugLogSession.Logging.LogDebug("SSHDynamicCallConnection id:{0} closed at {1}", mConnectionId, new StackTrace())
                mStream.DataReceived -= DataReceived
                mConnection.ErrorOccurred -= ErrorOccurred
                mSimplex.CompleteWriting()
                mCallOnClose()
                mStream.Close()
				mConnection.Disconnect()
			endmethod

			public override method Flush, void
				endparams
            proc
                mSimplex.Flush()
				mStream.Flush()
			endmethod

			public override async method ReadAsync, @Task<int> 
				buffer, [#]byte 
				offset, int 
				count, int 
				token, CancellationToken
				endparams
			proc
                data result = await mSimplex.ReadAsync(buffer, offset, count, token)
                if(result == 0 && mConnectionException != ^null)
                    throw mConnectionException
                
				mreturn result
			endmethod

			public override property CanTimeout, boolean
				method get
				proc
					mreturn true
				endmethod
			endproperty


			public override property CanSeek, Boolean
				method get
				proc
					mreturn mSimplex.CanSeek
				endmethod
			endproperty



			public override property Position, long
				method get
				proc
					mreturn mSimplex.Position
				endmethod
				method set
				proc
					mSimplex.Position = value
				endmethod
			endproperty



			public override property Length, long
				method get
				proc
					mreturn mStream.Length
				endmethod
			endproperty



			public override method Seek, long
				offset, long 
				origin, SeekOrigin 
				endparams
			proc
				mreturn mStream.Seek(offset, origin)
			endmethod



			public override property CanWrite, Boolean
				method get
				proc
					mreturn mStream.CanWrite
				endmethod
			endproperty



			public override method Write, void
				buffer, [#]byte 
				offset, int 
				count, int 
				endparams
			proc
				DebugLogSession.Logging.LogTrace("SSHDynamicCallConnection id:{0} write ascii string: {1}", mConnectionId, new ASCIIArrayDebugLogHelper(buffer, offset, count))
				mStream.Write(buffer, offset, count)
				mStream.Flush()
			endmethod

			public override async method WriteAsync, @Task
				buffer, [#]byte
				offset, int
				count, int
				cancellationToken, CancellationToken
			proc
				if(DebugLogSession.Logging.Level == Harmony.Core.Interface.LogLevel.Trace)
				begin
					DebugLogSession.Logging.LogTrace("ProcessDynamicCallConnection write ascii string: {0}", new ASCIIArrayDebugLogHelper(buffer, offset, count))
				end

				await mStream.WriteAsync(buffer, offset, count, cancellationToken)
				await mStream.FlushAsync()
			endmethod

			public override method SetLength, void
				value, long 
				endparams
			proc
				mStream.SetLength(value)
			endmethod


		endclass

	endclass

endnamespace
