import System
import System.Collections.Generic
import System.Text
import System.Diagnostics
import Newtonsoft.Json
import Newtonsoft.Json.Linq
import System.Threading.Tasks
import StreamJsonRpc
import System.IO
import System.Threading
import System.Linq
import Harmony.Core.Utility
import Nerdbank.Streams

namespace Harmony.Core.Context

	public class ProcessDynamicCallConnection implements IDynamicCallConnection
		private static NewLineBytes, [#]Byte, new byte[#] { 10, 13 }
		private mTargetProcess, @Process
		private mProcessStarted, boolean, false
		private mLocalRPCHandlers, @Dictionary<string, Delegate> 
		private mMakeReadyTask, @Lazy<Task<JsonRpc>>
		private mDisconnectToken, @CancellationTokenSource
		private mLastSeenBytes, ArraySegment<byte>

		private static mFileBufferSize, int
        static method ProcessDynamicCallConnection
        proc
            data bufSizeVar = Environment.GetEnvironmentVariable("HARMONYCORE_TBIOBUF")
            if(!string.IsNullOrWhiteSpace(bufSizeVar)) then
            begin
                if(!Int32.TryParse(bufSizeVar, mFileBufferSize))
                    mFileBufferSize = 4096 * 16

                if((mFileBufferSize .mod. 4096) != 0)
                begin
                    Console.WriteLine("HARMONYCORE_TBIOBUF was set to {0} but must be a multiple of 4096, defaulting to 64k", mFileBufferSize)
                    mFileBufferSize = 4096 * 16
                end
            end
            else
                mFileBufferSize = 4096 * 16

        endmethod


		public method ProcessDynamicCallConnection
			startInfo, @ProcessStartInfo
		proc
			mTargetProcess = new Process()
			mTargetProcess.StartInfo = startInfo
			mLocalRPCHandlers = new Dictionary<string, Delegate>()
			mMakeReadyTask = new Lazy<Task<JsonRpc>>(MakeReadyInternal)
			mDisconnectToken = new CancellationTokenSource()
			IsHealthy = true
		endmethod

		public readwrite property IsHealthy, boolean

		public virtual method Recycle, @Task
			endparams
		proc
			mreturn Task.FromResult(true)
		endmethod
				
		public virtual async method Disconnect, @Task
			endparams
		proc
			try
			begin
				if(mProcessStarted && !mTargetProcess.HasExited)
				begin
					await this.Notify("rpc.shutdown", new ArgumentDataDefinition[0])
					mDisconnectToken.Cancel()
					await Task.Delay(100)
					if(!mTargetProcess.HasExited)
						mTargetProcess.Kill()
				end

			end
			catch(ex, @Exception)
			begin
				DebugLogSession.Logging.LogException(ex, "ProcessDynamicCallConnection-Disconnect")
			end
			endtry
		endmethod
		
		class ProtocolMessage
			public readwrite property ProtocolSupported, boolean
		endclass

		public virtual async method Call, @Task<[#]@ReturnParameterDefintion>
			name, @string
			args, [#]@ArgumentDataDefinition
		proc
            data jsonRpcConnection = await mMakeReadyTask.Value
			try
			begin
				mreturn await jsonRpcConnection.InvokeWithCancellationAsync<[#]@ReturnParameterDefintion>(name, args.OfType<Object>().ToList().AsReadOnly(), mDisconnectToken.Token)
			end
			catch(ex, @StreamJsonRpc.ConnectionLostException)
            begin
                IsHealthy = false
				;;this will be empty if trace level logging is not turned on in order to prevent leaking sensitive data in production environments
				if(mLastSeenBytes.Count > 0) then
                    throw new StreamJsonRpc.ConnectionLostException("The JSON-RPC connection with the remote party was lost before the request could complete. Last seen bytes passed: '" + Encoding.UTF8.GetString(mLastSeenBytes).Replace(%char(10), "<LF>").Replace(%char(13), "<CR>") + "'", ex)
                else
					throw
			end
			catch(ex, @RemoteInvocationException)
			begin
				if(ex.ErrorCode == -32000)
					IsHealthy = false

				throw new BridgeException(ex)
			end
			catch(ex, @RemoteMethodNotFoundException)
			begin
				throw new BridgeException(ex)
			end
			catch(ex, @Exception)
			begin
				IsHealthy = false
				throw
			end
			endtry
		endmethod

		public virtual async method Notify, @Task
			name, @string
			args, [#]@ArgumentDataDefinition
		proc
			data jsonRpcConnection = await mMakeReadyTask.Value
			await jsonRpcConnection.NotifyAsync(name, args.OfType<Object>().ToArray())
		endmethod

		public method AddLocalRpcMethod, void
			name, @string
			handler, @Delegate
		proc
			if(!mLocalRPCHandlers.ContainsKey(name))
			begin
				mLocalRPCHandlers.Add(name, handler)
				if(mMakeReadyTask.IsValueCreated && mMakeReadyTask.Value.Status == TaskStatus.RanToCompletion)
				begin
					if(handler.Method.IsStatic) then
						mMakeReadyTask.Value.Result.AddLocalRpcMethod(name, handler.Method, ^null)
					else
						mMakeReadyTask.Value.Result.AddLocalRpcMethod(name, handler.Method, handler.Target)
				end
			end
		endmethod

		private async method MakeReadyInternal, @Task<JsonRpc>
			endparams
		proc
			data readLine, @string
			mTargetProcess.EnableRaisingEvents = true
            mTargetProcess.StartInfo.RedirectStandardError = true
            mTargetProcess.StartInfo.StandardErrorEncoding = ASCIIEncoding.ASCII
            mTargetProcess.StartInfo.StandardOutputEncoding = ASCIIEncoding.ASCII
			mTargetProcess.Start()
			mProcessStarted = true
            data processExited = false
            try
			begin
                data timeoutTokenSource = CancellationTokenSource.CreateLinkedTokenSource(mDisconnectToken.Token)
				timeoutTokenSource.CancelAfter(30 * 1000) ;;timeout if we cant start the process within 30 seconds
                data timeoutToken = timeoutTokenSource.Token
                data tmpTsk = mTargetProcess.StandardOutput.ReadLineAsync()
                data tmpTsk2 = mTargetProcess.StandardError.ReadLineAsync()
                data untypedTask, @Task, tmpTsk
                await untypedTask.WaitAsync(timeoutToken)
                if (tmpTsk.Result == ^null)
				begin
					processExited = true
					untypedTask = tmpTsk2
					await untypedTask.WaitAsync(timeoutToken)
				end
                readLine = tmpTsk.Result

				;;dont listen to standard error it should be used only for out of band communication
                ;;if (tmpTsk2.IsCompleted)
                ;;    readLine += tmpTsk2.Result

				while(!mTargetProcess.HasExited && !readLine.EndsWith("READY"))
                begin
                    if (processExited && readLine.Length > 0 )
                        exitloop

                    tmpTsk = mTargetProcess.StandardOutput.ReadLineAsync()
                    if (tmpTsk2.IsCompleted)
                        tmpTsk2 = mTargetProcess.StandardError.ReadLineAsync()
                    untypedTask = tmpTsk
                    await untypedTask.WaitAsync(timeoutToken)
                    ;;if (tmpTsk2.IsCompleted)
                    ;;    readLine += tmpTsk2.Result
                    readLine += tmpTsk.Result
                    if (tmpTsk.Result == ^null)
                        processExited = true
                    mTargetProcess.Refresh()
				end
            end
            catch(ex, @OperationCanceledException)
            begin
                throw new BridgeConnectionException("TraditionalBridge was unable to start dbr process after 30 second timeout expired", new string[#] { readLine })
            end
            endtry

			if(mTargetProcess.HasExited || processExited)
			begin
				data outputText = await mTargetProcess.StandardOutput.ReadToEndAsync()
				outputText = readLine + outputText
                data logs = new string[#] { string.Format(" application: '{0}' arguments: '{1}' working directory: '{2}' stdOut: '{3}'", mTargetProcess.StartInfo.FileName, mTargetProcess.StartInfo.Arguments, mTargetProcess.StartInfo.WorkingDirectory, outputText) }
				if(outputText.Contains("%DBR-F-NOTDBR")) then
				begin
					throw new BridgeConnectionException("TraditionalBridge failed to initialize most likely due to x86/x64 mismatch.", logs)
				end
				else if(outputText.Contains("%DBR-E-OPENF")) then
				begin
					throw new BridgeConnectionException("TraditionalBridge failed to initialize most likely due to missing dbr or elb file.", logs)
				end
				else
				begin
					throw new BridgeConnectionException("TraditionalBridge failed to initialize.", logs)
				end
			end

			mTargetProcess.Exited += ProcessExit

			data formatter = new JsonMessageFormatter(new UTF8Encoding(false))
			formatter.JsonSerializer.FloatParseHandling = FloatParseHandling.Decimal
			
			data targetOutput, @Stream
			data targetInput, @Stream

			;;if the base stream is a filestream lets grab its guts and resize the buffer to 64k
			if(mTargetProcess.StandardInput.BaseStream .is. FileStream) then
			begin
				data inputFileStream = ^as(mTargetProcess.StandardInput.BaseStream, @FileStream)
				data outputFileStream = ^as(mTargetProcess.StandardOutput.BaseStream, @FileStream)

				targetInput = new FileStream(inputFileStream.SafeFileHandle, FileAccess.Write, mFileBufferSize, false)
				targetOutput = new FileStream(outputFileStream.SafeFileHandle, FileAccess.Read, mFileBufferSize, false)
			end
			else
			begin
				targetInput = mTargetProcess.StandardInput.BaseStream
				targetOutput = mTargetProcess.StandardOutput.BaseStream
			end

			data streamWrapper = FullDuplexStream.Splice(targetOutput, targetInput)
			
			if(DebugLogSession.Logging.Level == Harmony.Core.Interface.LogLevel.Trace)
			begin
				data tempStreamWrapper = new MonitoringStream(streamWrapper)
				tempStreamWrapper.DidRead += StreamReadMonitorEvent
				streamWrapper = tempStreamWrapper
			end

			data result = new JsonRPC(new HeaderDelimitedMessageHandler(streamWrapper, formatter))
            if(DebugLogSession.Logging.Level == Harmony.Core.Interface.LogLevel.Trace)
			begin
				result.TraceSource = new TraceSource("Client", SourceLevels.All)
			end

			data rpcKvp, KeyValuePair<string, Delegate>
			foreach rpcKvp in mLocalRPCHandlers
			begin
				if(rpcKvp.Value.Method.IsStatic) then
					result.AddLocalRpcMethod(rpcKvp.Key, rpcKvp.Value.Method, ^null)
				else
					result.AddLocalRpcMethod(rpcKvp.Key, rpcKvp.Value.Method, rpcKvp.Value.Target)
			end

			result.StartListening()
			mreturn result
		endmethod
	
		private method ProcessExit, void
			sender, @Object
			args, @EventArgs
		proc
			IsHealthy = false
			mDisconnectToken.Cancel()
		endmethod


		public virtual method MakeReady, @Task
		proc
			mreturn mMakeReadyTask.Value
		endmethod

		private method StreamReadMonitorEvent, void
			sender, @Object
			bytes, ArraySegment<byte>
		proc
			mLastSeenBytes = bytes
		endmethod
	endclass

endnamespace
