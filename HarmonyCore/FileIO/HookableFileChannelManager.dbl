import System
import System.Collections.Generic
import System.Text
import System.Collections.Concurrent


namespace Harmony.Core.FileIO

	public abstract class HookableFileChannelManager extends FileChannelManager
		
		private HookTypeLookup, @ConcurrentDictionary<int, Synergex.SynergyDE.IOExtensions.IOHooks>, new ConcurrentDictionary<int, Synergex.SynergyDE.IOExtensions.IOHooks>()

		protected abstract method HookChannel, @Synergex.SynergyDE.IOExtensions.IOHooks
			channel, int
			fileName, @string
			openMode, FileOpenMode
		proc
		endmethod

		protected override method OpenChannel, int
			fileName, @string
			openMode, FileOpenMode
		proc
			data openedChannel = parent.OpenChannel(fileName, openMode)
			data hook = HookChannel(openedChannel, fileName, openMode)

			if (hook != ^null)
				HookTypeLookup.TryAdd(openedChannel, hook)

			mreturn openedChannel
		endmethod

		public override method ChannelHasHook, boolean
			channelId, int
		proc
			mreturn HookTypeLookup.ContainsKey(channelId)
		endmethod

		public override method ChannelHookType, @Type
			channelId, int
		proc
			data resultType, @Synergex.SynergyDE.IOExtensions.IOHooks, ^null
			if(HookTypeLookup.TryGetValue(channelId, resultType)) then
				mreturn resultType.GetType()
			else
				mreturn ^null
		endmethod

	endclass

endnamespace
