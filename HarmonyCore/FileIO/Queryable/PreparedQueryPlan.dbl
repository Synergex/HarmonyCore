import System
import System.Collections.Generic
import System.Text
import System.Linq
import Harmony.Core.Enumerations
import System.Linq.Expressions
import Harmony.Core.FileIO
import Harmony.Core.FileIO.Queryable.Materializer
import Synergex.SynergyDE.Select
import Newtonsoft.Json

namespace Harmony.Core.FileIO.Queryable

	public class ExprPart
		public readwrite property Left, @object
		public readwrite property Right, @Object
		public readwrite property Op, WhereClauseOperator
	endclass

	public class ConnectorPart
		public readwrite property Left, @object
		public readwrite property Right, @Object
		public readwrite property Op, WhereClauseConnector
	endclass

	public class FieldReference
		public readwrite property FieldDef, @FieldDataDefinition
		public readwrite property QuerySourceKey, int
	endclass

	public class ParameterReference
		public readwrite property Name, @string
	endclass

	public class PreparedQueryPlan
		public static MARSTargetSize, int, 2
		public static EnableMARS, boolean, false

		structure memMapper
			fld,a1
		endstructure
		private mWhereParts, @List<object>
		private mSparseParts, @Dictionary<int, List<FieldDataDefinition>>
		private mOnParts, @List<object>
		private mOrderBy, @List<Tuple<FieldReference, Boolean>>
		private mQuerySourceTypes, @List<Type>
		private mQueryBufferPrototype, @QueryBuffer
		private mSimpleKeyNumber, short
		private mTraceIdentifier, @string
		public readwrite property IsJoin, boolean
		public readwrite property IsCollection, boolean
		public readwrite property IsKeyedRead, boolean
		public static readwrite property LocalSparse, boolean, false
		public static readwrite property DisableSparse, boolean, false

		static method PreparedQueryPlan
		proc
			data enableValue = Environment.GetEnvironmentVariable("HARMONYCORE_ENABLE_MARS")
			data marsTargetValue = Environment.GetEnvironmentVariable("HARMONYCORE_MARS_TARGET_SIZE")

			if(enableValue != ^null && enableValue != "0")
			begin
				EnableMARS = true
			end

			if(!string.IsNullOrWhiteSpace(marsTargetValue))
			begin
				int.TryParse(marsTargetValue, MARSTargetSize)
				if(MARSTargetSize < 2)
					MARSTargetSize = 2
			end
		endmethod

		public override method ToString, @string
		proc
			mreturn string.Format("EnableMARS: {1}{0}MARSTargetSize: {2}{0}Where: {3}{0}On:{4}{0}OrderBy:{5}{0}IsCollection{6}",Environment.NewLine, EnableMARS, MARSTargetSize,
			&	JsonConvert.SerializeObject(mWhereParts),
			&	JsonConvert.SerializeObject(mOnParts),
			&	JsonConvert.SerializeObject(mOrderBy),
			&	IsCollection)
		endmethod

		public method Prepare, void
		proc
			if(!IsJoin)
			begin
				data fieldNames = new List<string>()
				GetWhereFieldNames(fieldNames, mWhereParts.FirstOrDefault())
				;;this is relying on fieldNames containing duplicates when a field is referenced more than once
				data simpleKey, short?, fieldNames.Count == 1 ? mQueryBufferPrototype.TypeBuffers[0].Metadata.GetKeyNumberByFieldNames(fieldNames.ToArray()) : ^null
				if(simpleKey != ^null)
				begin
					IsKeyedRead = true
					mSimpleKeyNumber = simpleKey.Value
				end
			end

			;;Find any Orderby that isnt on the driving table a push it into the appropriate type buffer
			;;this only works if the target type buffer is a collection so we should error if it isnt
			if(mOrderBy != ^null)
			begin
				data orderByTpl, @Tuple<FieldReference, boolean>
				foreach orderByTpl in mOrderBy
				begin
					if(orderByTpl.Item1.QuerySourceKey != 0)
					begin
						data typeBuffer = mQueryBufferPrototype.TypeBuffers[orderByTpl.Item1.QuerySourceKey]
						data item1Parm = Expression.Parameter(typeBuffer.DataObjectType, "item1")
						data item2Parm = Expression.Parameter(typeBuffer.DataObjectType, "item2")

						data item1Target = Expression.Property(item1Parm, orderByTpl.Item1.FieldDef.LanguageName)
						data item2Target = Expression.Property(item2Parm, orderByTpl.Item1.FieldDef.LanguageName)
						data ifGtExp, @Expression

						if(orderByTpl.Item2) then
						begin
							ifGtExp = Expression.Condition(Expression.GreaterThan(item1Target, item2Target), Expression.Constant(1, ^typeof(Int32)), Expression.Constant(-1, ^typeof(Int32)), ^typeof(Int32))
						end
						else
						begin
							ifGtExp = Expression.Condition(Expression.LessThan(item1Target, item2Target), Expression.Constant(1, ^typeof(Int32)), Expression.Constant(-1, ^typeof(Int32)), ^typeof(Int32))
						end

						data orderByBody = Expression.Condition(Expression.Equal(item1Target, item2Target), Expression.Constant(0, ^typeof(Int32)), ifGtExp, ^typeof(Int32))
						data targetDelegateType = ^typeof(Comparison<>).MakeGenericType(new Type[#] { typeBuffer.DataObjectType })
						typeBuffer.OrderBy = Expression.Lambda(targetDelegateType, orderByBody, new ParameterExpression[#] { item1Parm, item2Parm }).Compile()
					end
				end
			end
		
		endmethod

		public method PreparedQueryPlan
			isCollection, boolean
			whereParts, @IEnumerable<object>
			sparseParts, @Dictionary<int, List<FieldDataDefinition>>
			onParts, @IEnumerable<object>
			orderBy, @List<Tuple<FieldReference, Boolean>>
			queryBufferPrototype, @QueryBuffer
			traceIdentifier, @string
		proc
			mTraceIdentifier = traceIdentifier
			mSparseParts = sparseParts
			mWhereParts = whereParts.ToList()
			mOnParts = onParts.ToList()
			mOrderBy = orderBy
			mQueryBufferPrototype = queryBufferPrototype
			IsJoin = mQueryBufferPrototype.TypeBuffers.Count > 1
			this.IsCollection = isCollection
			Prepare()

		endmethod

		public method GetQueryBuffer, @QueryBuffer
		proc
			mreturn mQueryBufferPrototype
		endmethod

		public method ExecuteCollectionPlan<T(DataObjectBase)>, @IEnumerable<T>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @object
		proc
			HarmonyFileIOMetricsEventSource.Log.MaterializationStart(mTraceIdentifier)
			try
			begin
				if(!IsCollection) then
				begin
					data result = ExecutePlan<T>(tracker, parameters, dataObjectProvider, context)
					if(result == ^null) then
						mreturn Enumerable.Empty<T>()
					else
						mreturn new T[#] { result }
				end
				else
					mreturn ExecuteSelectCollectionPlan<T>(tracker, parameters, dataObjectProvider, context)
			end
			finally
			begin
				HarmonyFileIOMetricsEventSource.Log.MaterializationEnd()
			end
			endtry
		endmethod

		public method ExecutePlan<T(DataObjectBase)>, T
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @object
		proc
			HarmonyFileIOMetricsEventSource.Log.MaterializationStart(mTraceIdentifier)
			try
			begin
				if(IsKeyedRead && !IsJoin) then
					mreturn ExecuteKeyedPlan<T>(tracker, parameters, dataObjectProvider)
				else
					mreturn ExecuteSelectPlan<T>(tracker, parameters, dataObjectProvider, context)
			end
			finally
			begin
				HarmonyFileIOMetricsEventSource.Log.MaterializationEnd()
			end
			endtry

		endmethod

		private method ExecuteMARSPlan, @IEnumerable<DataObjectBase>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @object
		proc
			data rows = new List<Synergex.SynergyDE.Select.RowEnumerator>()
			data joinSelectObjects = new List<Synergex.SynergyDE.Select.JoinSelect>()
			data queryBuffer, @QueryBuffer
			data fromObjs = new List<From>()

			lambda cleanup()
			begin
				data row, @Synergex.SynergyDE.Select.RowEnumerator
				data joinSelObj, @Synergex.SynergyDE.Select.JoinSelect
				data fromObj, @From
				foreach row in rows
					row.Dispose()

				foreach joinSelObj in joinSelectObjects
					joinSelObj.Dispose()

				queryBuffer?.Dispose()
				foreach fromObj in fromObjs
					fromObj.Dispose()

				rows.Clear()
				joinSelectObjects.Clear()
				queryBuffer = ^null
				fromObjs.Clear()
			end
			data cleanupAction, @Action, cleanup
			try
			begin
				queryBuffer = new QueryBuffer(mQueryBufferPrototype, dataObjectProvider, parameters, context)
				data splitBuffers = SplitMARSBuffers(MARSTargetSize, queryBuffer)
				;;split top level legs 
				data splitBuffer, @List<QueryBuffer.TypeBuffer>
				data marsTpls = new List<Tuple<Synergex.SynergyDE.Select.RowEnumerator, IEnumerable<MaterializerState>, JoinSelect>>()

				data stats = new DataObjectMaterializer.MaterializerStats()
				data materializerState = new DataObjectMaterializer.IterationState(queryBuffer.TypeBuffers[0], queryBuffer, stats, tracker)
				data top = queryBuffer.GetTop(0)
				data skip = queryBuffer.GetSkip(0)
				data targetCount = top.HasValue ? skip + top : 0
				foreach splitBuffer in splitBuffers
				begin
					data fromObj = FromObject(queryBuffer, splitBuffer)
					fromObjs.Add(fromObj)
					data joinSelectObject = JoinObject(fromObj, WhereObject(queryBuffer, splitBuffer), OrderByObject(queryBuffer, splitBuffer), SparseObject(queryBuffer, splitBuffer))
					joinSelectObjects.Add(joinSelectObject)
					data selEnumerator = joinSelectObject.GetEnumerator()
					rows.Add(selEnumerator)
					data materializerStates = materializerState.MaterializerQueue.Where(lambda (mat) { splitBuffer.Contains(mat.typeBuf) || mat.parentState == ^null }).ToList()
					marsTpls.Add(Tuple.Create<Synergex.SynergyDE.Select.RowEnumerator, IEnumerable<MaterializerState>, JoinSelect>(selEnumerator, materializerStates, joinSelectObject))
				end

				data rowManager = new RowsManager(marsTpls, marsTpls.First().Item2.First(lambda (mat) { mat.parentState == ^null }))
				data resultEnumerable = RunMaterializer(materializerState, rowManager, cleanupAction)
				if(skip != 0)
					resultEnumerable = resultEnumerable.Skip((int)skip)
				if(top != ^null)
					resultEnumerable = resultEnumerable.Take((int)top.Value)

				mreturn resultEnumerable
			end
			catch(ex, @Exception)
			begin
				cleanupAction()
			end
			endtry

		endmethod

		private static method BufferCost, int
			targetbuffer, @QueryBuffer.TypeBuffer
		proc
			;;if the buffer is single, its inherent cost is 1
			;;multiply inherent cost against the cost of a buffers children
			data inherentCost = targetbuffer.IsCollection ? 10 : 1
			
			if(targetbuffer.JoinedBuffers != ^null)
			begin
				data childBuffer, @QueryBuffer.TypeBuffer
				foreach childBuffer in targetbuffer.JoinedBuffers
				begin
					inherentCost += (inherentCost * BufferCost(childBuffer))
				end
			end

			mreturn inherentCost
		endmethod


		private method SplitMARSBuffers, @List<List<QueryBuffer.TypeBuffer>>
			targetSize, int
			sourceBuffer, @QueryBuffer
		proc
			data result = new List<List<QueryBuffer.TypeBuffer>>()
			data drivingBuffer = sourceBuffer.TypeBuffers[0]
			if((drivingBuffer?.JoinedBuffers?.Count ?? 0) <= targetSize) then
			begin
				result.Add(sourceBuffer.TypeBuffers)
			end
			else
			begin
				data flatGroupBuffers = new List<QueryBuffer.TypeBuffer>()
				data targetBuffer, @QueryBuffer.TypeBuffer
				data accumulatedCost = 0
				foreach targetBuffer in drivingBuffer.JoinedBuffers.OrderBy(BufferCost)
				begin
					accumulatedCost += BufferCost(targetBuffer)

					;;have to get at least one in each leg regardless of the buffer cost
					if(accumulatedCost > PreparedQueryPlan.MARSTargetSize && flatGroupBuffers.Count > 0)
					begin
						result.Add(flatGroupBuffers)
						flatGroupBuffers = new List<QueryBuffer.TypeBuffer>()
					end

					if(flatGroupBuffers.Count == 0)
					begin
						flatGroupBuffers.Add(result.Count > 0 ? sourceBuffer.MakeDrivingBuffer(drivingBuffer) : drivingBuffer)
					end

					flatGroupBuffers.Add(targetBuffer)
					GetFlatTypeBuffers(targetBuffer, flatGroupBuffers)
				end

				result.Add(flatGroupBuffers)
			end
			mreturn result
			
		endmethod

		private method GetFlatTypeBuffers, void
			targetBuffer, @QueryBuffer.TypeBuffer
			resultList, @List<QueryBuffer.TypeBuffer>
		proc
			data dependentBuffer, @QueryBuffer.TypeBuffer
			if(targetBuffer.JoinedBuffers != ^null)
			begin
				foreach dependentBuffer in targetBuffer.JoinedBuffers
				begin
					resultList.Add(dependentBuffer)
					GetFlatTypeBuffers(dependentBuffer, resultList)
				end
			end
		endmethod

		private method UntypedExecuteJoinCollectionPlan, @IEnumerable<DataObjectBase>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @object
		proc
			data rows, @Synergex.SynergyDE.Select.RowEnumerator
			data joinSelectObject, @Synergex.SynergyDE.Select.JoinSelect
			data queryBuffer, @QueryBuffer
			data fromObj, @From

			lambda cleanup()
			begin
				rows?.Dispose()
				joinSelectObject?.Dispose()
				queryBuffer?.Dispose()
				fromObj?.Dispose()

				rows = ^null
				joinSelectObject = ^null
				queryBuffer = ^null
				fromObj = ^null
			end
			data cleanupAction, @Action, cleanup
			try
			begin
				queryBuffer = new QueryBuffer(mQueryBufferPrototype, dataObjectProvider, parameters, context)
				fromObj = FromObject(queryBuffer, queryBuffer.TypeBuffers)
			
				data tObj, @DataObjectBase
				data stats = new DataObjectMaterializer.MaterializerStats()
				data materializerState = new DataObjectMaterializer.IterationState(queryBuffer.TypeBuffers[0], queryBuffer, stats, tracker)
				data top = queryBuffer.GetTop(0)
				data skip = queryBuffer.GetSkip(0)
				data targetCount = top.HasValue ? skip + top : 0

				joinSelectObject = JoinObject(fromObj, WhereObject(queryBuffer, queryBuffer.TypeBuffers), OrderByObject(queryBuffer, queryBuffer.TypeBuffers), SparseObject(queryBuffer, queryBuffer.TypeBuffers))
				rows = joinSelectObject.GetEnumerator()
				data rowManager = new RowsManager(rows, materializerState.ResultState, materializerState.MaterializerQueue, joinSelectObject)
				data resultEnumerable = RunMaterializer(materializerState, rowManager, cleanupAction)
				if(skip != 0)
					resultEnumerable = resultEnumerable.Skip((int)skip)
				if(top != ^null)
					resultEnumerable = resultEnumerable.Take((int)top.Value)

				mreturn resultEnumerable
			end
			catch(ex, @Exception)
			begin
				cleanupAction()
			end
			endtry

		endmethod

		class MaterializerEnumeratable implements IEnumerable<DataObjectBase>, IDisposable

			enumerator, @PreparedQueryPlan.MaterializerEnumerator
			public method MaterializerEnumeratable
				preparedQuery, @PreparedQueryPlan
				iterState, @DataObjectMaterializer.IterationState
				rows, @RowsManager
				cleanup, @Action
			proc
				enumerator = new MaterializerEnumerator(preparedQuery, iterState, rows, cleanup)
			endmethod

			public virtual method Dispose, void
				endparams
			proc
				enumerator.Dispose()
			endmethod

			public virtual method GetEnumerator, @IEnumerator<DataObjectBase>
				endparams
			proc
				mreturn enumerator
			endmethod

			public virtual method System.Collections.IEnumerable.GetEnumerator, @System.Collections.IEnumerator
				endparams
			proc
				mreturn enumerator
			endmethod
			
		endclass

		class MaterializerEnumerator implements IEnumerator<DataObjectBase>, IDisposable

			private CurrentValue, @DataObjectBase
			private CurrentNestedEnumerator, @IEnumerator<DataObjectBase>
			iterState, @DataObjectMaterializer.IterationState
			rows, @RowsManager
			cleanup, @Action
			queryPlan, @PreparedQueryPlan

			public method MaterializerEnumerator
				queryPlan, @PreparedQueryPlan
				iterState, @DataObjectMaterializer.IterationState
				rows, @RowsManager
				cleanup, @Action
			proc
				this.iterState = iterState
				this.rows = rows
				this.cleanup = cleanup
				this.queryPlan = queryPlan
			endmethod


			public property Current, @DataObjectBase
				method get
				proc
					if(CurrentNestedEnumerator != ^null) then
						mreturn CurrentNestedEnumerator.Current
					else
						mreturn CurrentValue
				endmethod
			endproperty



			property System.Collections.IEnumerator.Current, @object
				method get
				proc
					if(CurrentNestedEnumerator != ^null) then
						mreturn CurrentNestedEnumerator.Current
					else
						mreturn CurrentValue
				endmethod
			endproperty



			public virtual method MoveNext, Boolean
				endparams
			proc
				data phase = "init"
				if(CurrentNestedEnumerator != ^null)
					mreturn CurrentNestedEnumerator.MoveNext()

				data endOfIter = false
				do forever
				begin
					try
					begin
						if(!endOfIter) then
						begin
							phase = "RowManager.MoveNext"
							if(!rows.MoveNext())
							begin
								endOfIter = true
								nextloop
							end

							phase = "Iterate"
							DataObjectMaterializer.IterateMaterializer(iterState, rows)
							phase = "AfterIterate"
							data iterResult = DataObjectMaterializer.AfterIterate(iterState)
							endOfIter = iterResult.endOfResult
							if(iterResult.objResult != ^null)
							begin
								CurrentValue = iterResult.objResult
								mreturn true
							end
						end
						else
						begin
							phase = "FinishIterate"
							data fullResult = DataObjectMaterializer.FinishIteration(iterState).GetEnumerator()
							CurrentNestedEnumerator = fullResult
							mreturn fullResult.MoveNext()
						end
					end
					catch(ex, @Exception)
					begin
						throw new MaterializationException(queryPlan.ToString(), iterState.ToString(), phase, ex)
					end
					endtry
				end
			endmethod



			public virtual method Reset, void
				endparams
			proc
				throw new System.NotImplementedException()
			endmethod

			method ~MaterializerEnumerator
			proc
				Dispose(true)
			endmethod

			public virtual method Dispose, void
				endparams
			proc
				GC.SuppressFinalize(this)
				Dispose(false)
			endmethod
		
			protected virtual method Dispose, void
				isFinalizer, boolean
				endparams
			proc
				cleanup()
				if(CurrentNestedEnumerator != ^null)
					CurrentNestedEnumerator.Dispose()

			endmethod
			
		endclass


		private method RunMaterializer, @IEnumerable<DataObjectBase>
			iterState, @DataObjectMaterializer.IterationState
			rows, @RowsManager
			cleanup, @Action
		proc
			mreturn new PreparedQueryPlan.MaterializerEnumeratable(this, iterState, rows, cleanup)
		endmethod
		
		private method UntypedExecuteSelectCollectionPlan, @IEnumerable<DataObjectBase>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @Object
		proc
			
			disposable data selectObject, @Synergex.SynergyDE.Select.Select
			;;dont ever use mQueryBufferPrototype for operations directly
			disposable data queryBuffer, @QueryBuffer, new QueryBuffer(mQueryBufferPrototype, dataObjectProvider, parameters, context)
			disposable data fromObj = FromObject(queryBuffer, queryBuffer.TypeBuffers)
			data tObj, @DataObjectBase
			data stats = new DataObjectMaterializer.MaterializerStats()
			data currentCount = 0 
			data top = queryBuffer.GetTop(0)
			data skip = queryBuffer.GetSkip(0)
			data targetCount = top.HasValue ? skip + top : 0
			selectObject = SelectObject(fromObj, WhereObject(queryBuffer, queryBuffer.TypeBuffers), OrderByObject(queryBuffer, queryBuffer.TypeBuffers), SparseObject(queryBuffer, queryBuffer.TypeBuffers))
			data memPnt, int, queryBuffer.TypeBuffers[0].MemoryHandle.Value
			data metadataObject = queryBuffer.TypeBuffers[0].Metadata
			data structureSize = metadataObject.StructureSize
			data enumerator, @Synergex.SynergyDE.Select.RestrictedAlphaEnumerator
			foreach ^m(memMapper.fld(1:structureSize), memPnt) in selectObject
			begin
				data grfa	,a10
				incr currentCount
					
				if(skip && skip >= currentCount)
					nextloop
						
				if (targetCount && currentCount > targetCount) 
					yield exit
				if(enumerator == ^null)
					enumerator = Synergex.SynergyDE.Select.Select.GetEnum()
				enumerator.CurrentRFA(grfa)
				stats.IOOPS = enumerator.TotalReadCount
				incr stats.RecordsReturned
				yield mreturn tracker(metadataObject.MakeNew(^m(memMapper.fld(1:structureSize), memPnt), grfa))
			end
		endmethod

		private method UntypedExecuteSizedSelectCollectionPlan, @IEnumerable<DataObjectBase>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @Object
		proc
			disposable data selectObject, @Synergex.SynergyDE.Select.Select
			;;dont ever use mQueryBufferPrototype for operations directly
			disposable data queryBuffer, @QueryBuffer, new QueryBuffer(mQueryBufferPrototype, dataObjectProvider, parameters, context)
			disposable data fromObj = FromObject(queryBuffer, queryBuffer.TypeBuffers)
			data tObj, @DataObjectBase
			data stats = new DataObjectMaterializer.MaterializerStats()
			data currentCount = 0 
			data top = queryBuffer.GetTop(0)
			data skip = queryBuffer.GetSkip(0)
			data targetCount = top.HasValue ? skip + top : 0

			selectObject = SelectObject(fromObj, WhereObject(queryBuffer, queryBuffer.TypeBuffers), OrderByObject(queryBuffer, queryBuffer.TypeBuffers), SparseObject(queryBuffer, queryBuffer.TypeBuffers))
			data memPnt, int, queryBuffer.TypeBuffers[0].MemoryHandle.Value
			data metadataObject = queryBuffer.TypeBuffers[0].Metadata
			data structureSize = metadataObject.StructureSize
			data enumerator, @Synergex.SynergyDE.Select.RestrictedAlphaEnumerator
			data result = new List<DataObjectBase>()
			foreach ^m(memMapper.fld(1:structureSize), memPnt) in selectObject
			begin
				data grfa	,a10
				incr currentCount
					
				if(skip && skip >= currentCount)
					nextloop
						
				if (targetCount && currentCount > targetCount) 
					exitloop

				if(enumerator == ^null)
					enumerator = Synergex.SynergyDE.Select.Select.GetEnum()
				enumerator.CurrentRFA(grfa)
				stats.IOOPS = enumerator.TotalReadCount
				incr stats.RecordsReturned
				result.Add(tracker(metadataObject.MakeNew(^m(memMapper.fld(1:structureSize), memPnt), grfa)))
			end

			HarmonyFileIOMetricsEventSource.Log.ReportIOOPS(stats.IOOPS)
			HarmonyFileIOMetricsEventSource.Log.ReportRecordsReturned(stats.RecordsReturned)
			mreturn result
		endmethod


		public method ExecuteSelectCollectionPlan<T(DataObjectBase)>, @IEnumerable<T>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @object
		proc
			if(IsJoin && EnableMARS) then
				mreturn ExecuteMARSPlan(tracker, parameters, dataObjectProvider, context).OfType<T>()
			else if(IsJoin) then
				mreturn UntypedExecuteJoinCollectionPlan(tracker, parameters, dataObjectProvider, context).OfType<T>()
			else if(mQueryBufferPrototype.TypeBuffers[0].Top != ^null) then
				mreturn UntypedExecuteSizedSelectCollectionPlan(tracker, parameters, dataObjectProvider, context).OfType<T>()
			else
				mreturn UntypedExecuteSelectCollectionPlan(tracker, parameters, dataObjectProvider, context).OfType<T>()
		endmethod

		;;this isnt right, dont use it for now
		private method ExecuteKeyedCollectionPlan<T(DataObjectBase)>, @IEnumerable<T>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
		proc
			data resultList = new List<T>()
			disposable data fileIO = dataObjectProvider.GetFileIO<T>()
			fileIO.KeyReference = mSimpleKeyNumber
			if(FileIOErrorHelper.EnsureRead(fileIO.FindRecord(mSimpleKeyNumber, GetKeyLiteral(parameters))))
			begin
				data result, T
				while(FileIOErrorHelper.EnsureRead(fileIO.ReadNextRecord(result)))
				begin
					resultList.Add(tracker(result))
				end
			end
			mreturn resultList
		endmethod

		private method ExecuteKeyedPlan<T(DataObjectBase)>, T
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
		proc
			disposable data fileIO = dataObjectProvider.GetFileIO<T>()
			fileIO.KeyReference = mSimpleKeyNumber	
			data result, T
			if(FileIOErrorHelper.EnsureRead(fileIO.ReadRecord(result, mSimpleKeyNumber, GetKeyLiteral(parameters), true)))
			begin
				mreturn tracker(result)
			end

			mreturn ^null
		endmethod

		private method ExecuteSelectPlan<T(DataObjectBase)>, T
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			context, @object
		proc
			mreturn ExecuteSelectCollectionPlan<T>(tracker, parameters, dataObjectProvider, context).FirstOrDefault()
		endmethod

		private method WhereObject, @Synergex.SynergyDE.Select.Where
			queryBuf, @QueryBuffer
			targetBuffers, @List<QueryBuffer.TypeBuffer>
		proc
			;;todo: full MARS implementation needs this to break out per select
			data selectBuilder = new SelectBuilder(queryBuf, queryBuf.TypeBuffers == targetBuffers ? ^null : targetBuffers)
			if(mWhereParts.Count == 1) then
				mreturn selectBuilder.ProcessWhere(mWhereParts.First())
			else if(mWhereParts.Count == 2) then
			begin
				mreturn selectBuilder.ProcessWhere(new ConnectorPart() { Left = mWhereParts[0], Right = mWhereParts[1], Op=WhereClauseConnector.AndOperator }) 
			end
			else if(mWhereParts.Count > 2) then
				throw new NotImplementedException();
			else
				mreturn ^null
		endmethod

		private method OnObject, @Synergex.SynergyDE.Select.On
			queryBuf, @QueryBuffer
			typeBuf, @QueryBuffer.TypeBuffer
			allBuffers, @List<QueryBuffer.TypeBuffer>
		proc
			data selectBuilder = new SelectBuilder(queryBuf, queryBuf.TypeBuffers == allBuffers ? ^null : allBuffers)
			if(typeBuf.JoinOn != ^null) then
				mreturn selectBuilder.ProcessOn(typeBuf.JoinOn)
			else
				mreturn ^null
		endmethod

		private method MapField, @Synergex.SynergyDE.Select.OrderBy
			recordArea, a
			fieldDef, @FieldDataDefinition
			asc, boolean
		proc
			if(asc) then
				mreturn Synergex.SynergyDE.Select.OrderBy.Ascending(recordArea(fieldDef.StructurePosition:fieldDef.ElementSize))
			else
				mreturn Synergex.SynergyDE.Select.OrderBy.Descending(recordArea(fieldDef.StructurePosition:fieldDef.ElementSize))
		endmethod

		private method OrderByObject, @Synergex.SynergyDE.Select.OrderBy
			queryBuf, @QueryBuffer
			targetBuffers, @List<QueryBuffer.TypeBuffer>
		proc
			data orderByResult, @Synergex.SynergyDE.Select.OrderBy, ^null
			if(mOrderBy != ^null)
			begin
				data tpl, @Tuple<FieldReference, boolean>
				foreach tpl in mOrderBy
				begin
					data madeOrderBy, @Synergex.SynergyDE.Select.OrderBy, ^null
					if(tpl.Item1.QuerySourceKey == 0)
					begin
						data typeBuffer = queryBuf.TypeBuffers[tpl.Item1.QuerySourceKey]

						if(!targetBuffers.Contains(typeBuffer))
							nextloop

						data handle = typeBuffer.MemoryHandle.Value
						;;TODO: this isnt handling composite keys in a join
						if(IsJoin) then
						begin
							data targetKey = typeBuffer.Metadata.GetKeyNumberByFieldNames(new string[#] { tpl.Item1.FieldDef.LanguageName })
							if(targetKey != ^null)
							begin
								if(tpl.Item2) then
									orderByResult = Synergex.SynergyDE.Select.OrderBy.AscendingKey(targetKey.Value)
								else
									orderByResult = Synergex.SynergyDE.Select.OrderBy.DescendingKey(targetKey.Value)
							end
						end
						else
						begin
							madeOrderBy = MapField(^m(handle), tpl.Item1.FieldDef, tpl.Item2)
							if(orderByResult == ^null) then
								orderByResult = madeOrderBy
							else
								orderByResult = orderByResult .and. madeOrderBy
						end

					end

				end
			end

			mreturn orderByResult
		endmethod

		private method SelectObject, @Synergex.SynergyDE.Select.Select
			fromObject, @Synergex.SynergyDE.Select.From
			whereObject, @Synergex.SynergyDE.Select.Where
			orderObject, @Synergex.SynergyDE.Select.OrderBy
			sparseObject, @Synergex.SynergyDE.Select.Sparse
		proc
			if(IsJoin)
				throw new NotImplementedException()
			if(orderObject != ^null) then
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject, orderObject)
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, orderObject)
			end
			else
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject)
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject)
			end
		endmethod

		private method SparseObject, @Synergex.SynergyDE.Select.Sparse
			queryBuf, @QueryBuffer
			targetBuffers, @List<QueryBuffer.TypeBuffer>
			structure tmpStructure
				fld	,a1
			endstructure
		proc
			;;only build a real sparse object if the channels involved are remote to xfServer
			;;there is a local only perf hit because of the additional setup
			if(mSparseParts.Count > 0 && !DisableSparse && (LocalSparse || queryBuf.TypeBuffers.Any(lambda(buf) { buf.RemoteIO.Value })))
			begin
				data result, @Synergex.SynergyDE.Select.Sparse
				data typeBufKvp, @KeyValuePair<int, @List<FieldDataDefinition>>
				foreach typeBufKvp in mSparseParts
				begin
					data fieldDetails, @FieldDataDefinition
					foreach fieldDetails in typeBufKvp.Value
					begin
						data sparseItem, @Synergex.SynergyDE.Select.Sparse
						data typeBuffer = queryBuf.TypeBuffers[typeBufKvp.Key]
						if(!targetBuffers.Contains(typeBuffer))
							nextloop

						data memPtr, int, typeBuffer.MemoryHandle.Value
						sparseItem = new Synergex.SynergyDE.Select.Sparse(^m(tmpStructure(fieldDetails.StructurePosition:fieldDetails.ElementSize), memPtr))

						if(result == ^null) then
							result = sparseItem
						else
							result = result .and. sparseItem
					end
				end
				mreturn result
			end
			mreturn new Synergex.SynergyDE.Select.Sparse("*")

		endmethod


		private method JoinObject, @Synergex.SynergyDE.Select.JoinSelect
			fromObject, @Synergex.SynergyDE.Select.From
			whereObject, @Synergex.SynergyDE.Select.Where
			orderObject, @Synergex.SynergyDE.Select.OrderBy
			sparseObject, @Synergex.SynergyDE.Select.Sparse
		proc
			if(!IsJoin)
				throw new NotImplementedException()

			if(orderObject != ^null) then
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject, orderObject).Join()
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, orderObject).Join()
			end
			else
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject).Join()
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject).Join()
			end
		endmethod

		private method FromObject, @Synergex.SynergyDE.Select.From
			queryBuf, @QueryBuffer
			targetBuffers, @List<QueryBuffer.TypeBuffer>
		proc
			data fromItem, @QueryBuffer.TypeBuffer
			data currentJoin, @Synergex.SynergyDE.Select.From, ^null
			foreach fromItem in targetBuffers
			begin
				data memPtr, i4, fromItem.MemoryHandle.Value
				data channel, i4, fromItem.IOChannel.Value
				data madeJoin = new Synergex.SynergyDE.Select.From(channel, Q_AUTO_LOCK, 1, ^m(memPtr))
				if(currentJoin == ^null) then
				begin
					currentJoin = madeJoin
				end
				else if(fromItem.IsInnerJoin && fromItem.JoinOn != ^null) then
				begin
					currentJoin = currentJoin.InnerJoin(madeJoin, OnObject(queryBuf, fromItem, targetBuffers))
				end
				else if(fromItem.JoinOn != ^null)
				begin
					currentJoin = currentJoin.LeftJoin(madeJoin, OnObject(queryBuf, fromItem, targetBuffers))
				end
			end
			mreturn currentJoin
			
		endmethod

		private method GetKeyLiteral, a
			params, @IReadOnlyDictionary<string, Object>
		proc
			data mainTypeBuffer = mQueryBufferPrototype.TypeBuffers[0]
			if(mWhereParts.Count != 1) then
				throw new InvalidOperationException()
			else
			begin
				data allParams = new Dictionary<string, Object>()
				GetWhereFieldValues(params, allParams, mWhereParts[0])
				mreturn mainTypeBuffer.Metadata.FormatKeyLiteral(mSimpleKeyNumber, allParams)
			end
		endmethod

		private method GetKeyOfReference, short
		proc
			data mainTypeBuffer = mQueryBufferPrototype.TypeBuffers[0]
			if(mWhereParts.Count != 1) then
				mreturn 0
			else
			begin
				data wherePart = mWhereParts[0]
				data keyFieldSegments = new List<string>()
				GetWhereFieldNames(keyFieldSegments, wherePart)
				mreturn mainTypeBuffer.Metadata.GetKeyNumberByFieldNames(keyFieldSegments.ToArray()).Value
			end
		endmethod
		
		private method GetWhereFieldNames, void
			names, @List<string>
			obj, @object
		proc
			if(obj .is. @ExprPart) then
			begin
				data exp = (@ExprPart)obj
				GetWhereFieldNames(names, exp.Left)
				GetWhereFieldNames(names, exp.Right)
			end
			else if(obj .is. @FieldReference) then
			begin
				names.Add(((@FieldReference)obj).FieldDef.LanguageName)
			end
			else if(obj .is. @ConnectorPart)
			begin
				data conPart = (@ConnectorPart)obj
				GetWhereFieldNames(names, conPart.Left)
				GetWhereFieldNames(names, conPart.Right)
			end
		endmethod

		private method GetWhereFieldValue, void
			params, @IReadOnlyDictionary<string, Object>
			values, @Dictionary<string, Object>
			left, @object
			right, @object
		proc
			if(left .is. @FieldReference) then
			begin
				if(right .is. @FieldReference) then
				begin
					data rFieldDef, @FieldDataDefinition, ((@FieldReference)right).FieldDef
					data lFieldDef, @FieldDataDefinition, ((@FieldReference)right).FieldDef
					;;one and only one can be a tag literal
					if(rFieldDef.DataType != FieldDataType.TagLiteral && lFieldDef.DataType != FieldDataType.TagLiteral || rFieldDef.DataType == lFieldDef.DataType)
						throw new NotImplementedException()
					if(rFieldDef.DataType == FieldDataType.TagLiteral) then
					begin
						if(!values.ContainsKey(lFieldDef.LanguageName))
							values.Add(lFieldDef.LanguageName, rFieldDef.TagValue)
					end
					else
					begin
						if(!values.ContainsKey(rFieldDef.LanguageName))
							values.Add(rFieldDef.LanguageName, lFieldDef.TagValue)
					end
				end
				else if(right .is. @ParameterReference) then
				begin
					if(!values.ContainsKey(((@FieldReference)left).FieldDef.LanguageName))
						values.Add(((@FieldReference)left).FieldDef.LanguageName, params[((@ParameterReference)right).Name])
				end
				else
				begin
					if(!values.ContainsKey(((@FieldReference)left).FieldDef.LanguageName))
						values.Add(((@FieldReference)left).FieldDef.LanguageName, right)
				end
			end
			else if(left .is. @ParameterReference) then
			begin
				if(right .is. @FieldReference) then
				begin
					if(!values.ContainsKey(((@FieldReference)right).FieldDef.LanguageName))
						values.Add(((@FieldReference)right).FieldDef.LanguageName, params[((@ParameterReference)left).Name])
				end
				else
				begin
					throw new NotImplementedException()
				end
			end
			else
			begin
				if(right .is. @FieldReference) then
				begin
					if(!values.ContainsKey(((@FieldReference)right).FieldDef.LanguageName))
						values.Add(((@FieldReference)right).FieldDef.LanguageName, left)
				end
				else
				begin
					throw new NotImplementedException()
				end
			end

		endmethod

		private method GetWhereFieldValues, void
			params, @IReadOnlyDictionary<string, Object>
			values, @Dictionary<string, Object>
			obj, @object
		proc
			if(obj .is. @ExprPart) then
			begin
				data exp = (@ExprPart)obj
				GetWhereFieldValue(params, values, exp.Left, exp.Right)
			end
			else if(obj .is. @ConnectorPart)
			begin
				data conPart = (@ConnectorPart)obj
				GetWhereFieldValues(params, values, conPart.Left)
				GetWhereFieldValues(params, values, conPart.Right)
			end
		endmethod

	endclass
endnamespace
