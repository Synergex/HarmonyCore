import System
import System.Collections.Generic
import System.Text


namespace Harmony.Core.FileIO.Queryable.Materializer

	public abstract class MaterializerState
		public queryBuf, @QueryBuffer
		public parentState, @MaterializerState
		public childrenState, @List<MaterializerState>
		public typeBuf, @QueryBuffer.TypeBuffer
		public toSkip, long
		public skipped, long
		public toTake, long?
		public grfa, a10
		public madeItems, @IEnumerable<DataObjectBase>
		public dedupSet, @HashSet<System.Numerics.BigInteger>
		public lastMadeItem, @DataObjectBase
		public createdItemCount, int, 0
		public lastBubbleTarget, int, -1
		public dependentItems, @Dictionary<string, Object>
		public changed, boolean
		public filled, boolean

		public method MaybeBubbleMake, void
			tracker, @Func<DataObjectBase, DataObjectBase>
			alwaysBubble, boolean
			structure memMapper
				fld,a1
			endstructure
		proc
			if(filled)
			begin
				data doBubble = lastMadeItem == ^null || alwaysBubble || changed
				if(lastMadeItem == ^null || changed)
				begin
					data childState, @MaterializerState
					foreach childState in childrenState
					begin
						;;If the child has changed but not been materialized dont bubble it up it belongs to the next iteration
						if(!childState.changed && childState.filled && createdItemCount != childState.lastBubbleTarget)
							childState.MaybeBubbleMake(tracker, true)
					end
					data structureSize, i4, typeBuf.Metadata.StructureSize
					data memPnt, i4, typeBuf.MemoryHandle.Value
					;;construct the object
					lastMadeItem = dependentItems != ^null ? 
					&	typeBuf.Metadata.MakeNew(^m(memMapper.fld(1:structureSize), memPnt), grfa, ProcessDependentItems()) : 
					&	typeBuf.Metadata.MakeNew(^m(memMapper.fld(1:structureSize), memPnt), grfa)

					createdItemCount += 1

					;;cleanup the materializer state for this step
					if(dependentItems != ^null)
						dependentItems.Clear()
				end

				if(doBubble || (parentState != ^null && lastBubbleTarget != parentState.createdItemCount))
					Bubble(lastMadeItem, parentState == ^null, tracker)

				lastMadeItem = ^null
			end
		endmethod

		private method ProcessDependentItems, [#]KeyValuePair<string, Object>
		proc
			data result = new List<KeyValuePair<string, Object>>()
			data i = 0
			for i from 0 thru childrenState.Count - 1 by 1
			begin
				data child = childrenState[i]
				data dependentResult, @object, ^null

				dependentItems.TryGetValue(child.TypeBuf.ParentFieldName, dependentResult)
				if(child.typeBuf.SelectResult != ^null && dependentResult != ^null) then
				begin
					result.Add(new KeyValuePair<string, Object>(child.typeBuf.ParentFieldName, child.typeBuf.SelectResult(queryBuf, child.typeBuf, dependentResult)))
				end
				else if(dependentResult != ^null)
					result.Add(new KeyValuePair<string, Object>(child.typeBuf.ParentFieldName, dependentResult))
			end
			mreturn result.ToArray()

		endmethod


		public method Bubble, void
			madeObject, @DataObjectBase
			isRoot, boolean
			tracker, @Func<DataObjectBase, DataObjectBase>
		proc
			;;we only need to track top level objects
			if(isRoot)
				tracker(madeObject)

			;;if there is a parent state and we're a collection
			;;and if madeItems is empty, add ourselves to it and then add our madeItems
			;;to our parent states, dependentItems, using typeBuf.ParentFieldName as the key
			if(madeItems == ^null && parentState != ^null) then
			begin
				if(lastBubbleTarget != parentState.createdItemCount)
					parentState.dependentItems.Add(typeBuf.ParentFieldName, madeObject)
			end
			else if(madeItems != ^null) then
			begin
				AddItem(madeObject)
			end
			else
				throw new InvalidOperationException("Invalid materializer state")

			if(parentState != ^null)
			begin
				if(madeItems != ^null && (HasOneItem() || IsEmpty()) && lastBubbleTarget != parentState.createdItemCount)
				begin
					parentState.dependentItems.Add(typeBuf.ParentFieldName, madeItems)
				end
				lastBubbleTarget = parentState.createdItemCount
			end
		endmethod


		public abstract method AddItem, void
			obj, @DataObjectBase
		proc
		endmethod

		public abstract method InitItems, void
		proc
		endmethod

		public abstract method HasOneItem, boolean
		proc
		endmethod

		public abstract method TakeItem, @DataObjectBase
		proc
		endmethod

		public abstract method IsEmpty, boolean
		proc
		endmethod

		public abstract method IsSorted, boolean
		proc
		endmethod

		public static method MakeState, @MaterializerState
			buf, @QueryBuffer.TypeBuffer
			parentQuery, @QueryBuffer
			parentState, @MaterializerState
		proc
			data madeState = (@MaterializerState)Activator.CreateInstance(^typeof(MaterializerState<>).MakeGenericType(new Type[#] { buf.DataObjectType }))
			if(parentState == ^null)
				madeState.InitItems()

			madeState.childrenState = new List<MaterializerState>()
			madeState.typeBuf = buf
			madeState.queryBuf = parentQuery
			madeState.parentState = parentState
			madeState.changed = false
			madeState.filled = false
				
			madeState.toTake = parentQuery.GetTop(buf)
			madeState.toSkip = parentQuery.GetSkip(buf)

			mreturn madeState
		endmethod

	endclass

	public class ComparisonComparer<T> implements IComparer<T>
		private readonly cmp, @Comparison<T> 

		public method ComparisonComparer
			cmp, @Comparison<T> 
		proc
			if (cmp == ^null)
				throw new ArgumentNullException("comparison")
			this.cmp = cmp;
		endmethod

		public method Compare, int
			x, T
			y, T
		proc
			mreturn cmp(x, y)
		endmethod
	endclass

	class MaterializerState<T(DataObjectBase)> extends MaterializerState
		private readwrite property CmpObj, @ComparisonComparer<T>
		public override method AddItem, void
			obj, @DataObjectBase
		proc
			data typedItems = ((@List<T>)madeItems)
			data item, T, (T)obj

			;;todo: short circut duplicate item construction
			data grfaInt = new System.Numerics.BigInteger(obj.GlobalRFA)
			if(dedupSet.Contains(grfaInt)) then
				mreturn
			else
				dedupSet.Add(grfaInt)

			if(typeBuf.OrderBy != ^null) then
			begin
				if(CmpObj == ^null)
					CmpObj = new ComparisonComparer<T>((@Comparison<T>)typeBuf.OrderBy)

				if (typedItems.Count == 0)
				begin
					typedItems.Add(item)
					mreturn
				end
				if (CmpObj.Compare(typedItems[typedItems.Count-1], item) <= 0)
				begin
					typedItems.Add(item)
					mreturn
				end
				if (CmpObj.Compare(typedItems[0], item) >= 0)
				begin
					typedItems.Insert(0, item)
					mreturn
				end
				data index = typedItems.BinarySearch(item, CmpObj)
				if (index < 0) 
					index = ~index

				typedItems.Insert(index, item)
			end
			else
				typedItems.Add(item)
		endmethod

		public override method InitItems, void
		proc
			skipped = 0
			madeItems = (@IEnumerable<DataObjectBase>)new List<T>()
			dedupSet = new HashSet<System.Numerics.BigInteger>()
		endmethod

		public override method HasOneItem, boolean
		proc
			mreturn ((@List<T>)madeItems).Count == 1
		endmethod

		public override method TakeItem, @DataObjectBase
		proc
			data itemList = ((@List<T>)madeItems)
			if(itemList.Count > 0) then
			begin
				data returnedItem = itemList[0]
				itemList.RemoveAt(0)
				mreturn returnedItem
			end
			else
				mreturn ^null
		endmethod

		public override method IsEmpty, boolean
		proc
			mreturn ((@List<T>)madeItems).Count == 0
		endmethod

		public override method IsSorted, boolean
		proc
			mreturn CmpObj != ^null
		endmethod

	endclass
endnamespace
