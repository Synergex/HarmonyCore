import System
import System.Collections.Generic
import System.Text
import System.Linq
import System.Diagnostics
import Harmony.Core.Utility
import Harmony.Core.FileIO.Queryable.Materializer
import Newtonsoft.Json

namespace Harmony.Core.FileIO.Queryable

	public class DataObjectMaterializer
		structure memMapper
			fld,a1
		endstructure

		public cls structure MaterializeResult
			objResult, @DataObjectBase
			endOfResult, boolean
		endstructure

		public class MaterializerStats
			public readwrite property IOOPS, int
			public readwrite property RecordsReturned, int
		endclass

		public class IterationState
			public method IterationState
				typeBuf, @QueryBuffer.TypeBuffer
				parentQuery, @QueryBuffer
				stats, @DataObjectMaterializer.MaterializerStats
				tracker, @Func<DataObjectBase, DataObjectBase>
			proc
				this.TypeBuf = typeBuf
				this.MaterializerQueue = IterationState.MakeIterationQueue(typeBuf, parentQuery)
				ResultState = this.MaterializerQueue.First()
				this.MaterializerQueue.Reverse()
				this.Stats = stats
				this.Tracker = tracker
			endmethod

			public override method ToString, @string
			proc
				mreturn string.Format("Parent Parameters: {1}{0}Parent Buffers: {2}{0}Current Buffer: {3}{0}Stats: {4}{0}", Environment.NewLine, 
				&	JsonConvert.SerializeObject(ResultState.queryBuf.Parameters), 
				&	string.Join(Environment.NewLine + "    ", ResultState.queryBuf.TypeBuffers.Select(lambda(tb) { tb.ToString() })),
				&	TypeBuf,
				&	JsonConvert.SerializeObject(Stats))
			endmethod

			private static method MakeIterationQueue, @List<MaterializerState>
				source, @QueryBuffer.TypeBuffer
				parentQuery, @QueryBuffer
			proc
				data result = new List<MaterializerState>()
				data q = new @Queue<MaterializerState>()

				data rootState = MaterializerState.MakeState(source, parentQuery, ^null)
				if(source.JoinedBuffers != ^null && source.JoinedBuffers.Count > 0)
					rootState.dependentItems = new Dictionary<string, Object>()

				q.Enqueue(rootState) 
				result.Add(rootState)
				;;this is constructing a bredth first traversal list
				while(q.Count > 0)
				begin
					data current = q.Dequeue()
					data joined, @QueryBuffer.TypeBuffer
					foreach joined in current.typeBuf.JoinedBuffers
					begin
						data newMatState = MaterializerState.MakeState(joined, parentQuery, current)
						if(joined.IsCollection)
							newMatState.InitItems()

						if(joined.JoinedBuffers != ^null && joined.JoinedBuffers.Count > 0)
							newMatState.dependentItems = new Dictionary<string, Object>()

						q.Enqueue(newMatState) 
						result.Add(newMatState)
						current.childrenState.Add(newMatState)
					end
				end
				mreturn result
			endmethod

			public TypeBuf, @QueryBuffer.TypeBuffer
			public Stats, @DataObjectMaterializer.MaterializerStats
			public MaterializerQueue, @List<MaterializerState>
			public ResultState, @MaterializerState
			public Tracker, @Func<DataObjectBase, DataObjectBase>
		endclass

		public static method AfterIterate, DataObjectMaterializer.MaterializeResult
			iterState, @DataObjectMaterializer.IterationState
		proc
			;;we only want one object if we dont have a collection result
			if(!iterState.TypeBuf.IsCollection && iterState.ResultState.HasOneItem())
			begin
				data result, DataObjectMaterializer.MaterializeResult
				result.endOfResult = true
				result.objResult = iterState.ResultState.madeItems.First()
				mreturn result
			end

			if(!iterState.ResultState.IsSorted()) then
			begin
				data returnedItem, @DataObjectBase
				if((returnedItem = iterState.ResultState.TakeItem()) != ^null)
				begin
					incr iterState.Stats.RecordsReturned
					data result, DataObjectMaterializer.MaterializeResult
					result.endOfResult = false
					result.objResult = returnedItem
					mreturn result
				end
			end
			else
			begin
				data result, DataObjectMaterializer.MaterializeResult
				result.endOfResult = false
				mreturn result
			end
		endmethod

		public static method FinishIteration, @IEnumerable<DataObjectBase>
			iterState, @DataObjectMaterializer.IterationState
		proc
			data matState, @MaterializerState
			;;finsh up the leftover materialization process here
			foreach matState in iterState.MaterializerQueue
			begin
				if(matState.parentState != ^null && matState.parentState.changed && matState.parentState.filled)
				begin
					if(matState.madeItems != ^null)
						matState.InitItems()
				end

				data childState, @MaterializerState
				foreach childState in matState.childrenState
				begin
					if(childState.filled && matState.createdItemCount != childState.lastBubbleTarget)
					begin
						childState.MaybeBubbleMake(iterState.Tracker, true)
					end
				end

				matState.MaybeBubbleMake(iterState.Tracker, false)
			end

			data resultCollection = iterState.ResultState.madeItems.ToList()
			iterState.Stats.RecordsReturned += resultCollection.Count
			mreturn resultCollection
			;;TODO make sure we deal with stats
		endmethod

		public static method IterateMaterializer, void
			iterState, @DataObjectMaterializer.IterationState
			rows, @RowsManager
		proc
			data matState, @MaterializerState
			
			;;start at the limbs for actual object construction
			foreach matState in iterState.MaterializerQueue
			begin
				rows.GetChangeState(matState)
				;;if our parent was constructed last time around we need to clean up our made items
				if(matState.parentState != ^null && matState.parentState.changed && matState.parentState.filled)
				begin
					if(matState.madeItems != ^null)
						matState.InitItems()
				end

				if(matState.changed && matState.filled)
				begin
					matState.MaybeBubbleMake(iterState.Tracker, false)
				end

				if(matState.changed)
				begin
					;;fill the row
					rows.Fill(matState)
				end
			end

		endmethod
	endclass

endnamespace
