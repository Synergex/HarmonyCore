import System
import System.Collections.Generic
import System.Text
import Synergex.SynergyDE.Select
import Harmony.Core
import Harmony.Core.Utility
import Harmony.Core.Enumerations
import System.Linq.Expressions
import System.Linq
namespace Harmony.Core.FileIO.Queryable

	public class SelectBuilder
		private mQueryBuffer, @QueryBuffer
		private mTargetBuffers, @List<QueryBuffer.TypeBuffer>

		public method SelectBuilder
			queryBuffer, @QueryBuffer
			targetBuffers, @List<QueryBuffer.TypeBuffer>
		proc
			mQueryBuffer = queryBuffer
			mTargetBuffers = targetBuffers
		endmethod

		private method fieldOnClause  ,@On
			in req dataBuffer1			,a
			in req dataBuffer2			,a
			in req fieldDetails1		,@FieldDataDefinition
			in req fieldDetails2		,@FieldDataDefinition
			in req theOperator			,WhereClauseOperator
		proc

			if(fieldDetails1.DataType != fieldDetails2.DataType)
				throw new NotImplementedException("field to field comparisons must be of the same type")

			data caseInsensitive = theOperator == WhereClauseOperator.NoCaseEqualTo || 
			&	theOperator == WhereClauseOperator.NoCaseNotEqualTo ||
			&	theOperator == WhereClauseOperator.IsLikeNoCase ||
			&	theOperator == WhereClauseOperator.IsInNoCase

			data leftMinSize = Math.Min(fieldDetails2.ElementSize, fieldDetails1.ElementSize)

			using theOperator select
			(whereClauseOperator.EqualTo),
			begin
				using fieldDetails1.DataType select
				(FieldDataType.AlphaField),
				begin
					if(!caseInsensitive) then
						mreturn (On)(dataBuffer1(fieldDetails1.StructurePosition:fieldDetails1.ElementSize) .eq. dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize))
					else
						throw new NotImplementedException()
				end
				(FieldDataType.IntegerField),
				begin
					mreturn (On)(^i(dataBuffer1(fieldDetails1.StructurePosition:leftMinSize)) .eq. ^i(dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize)))
				end
				(FieldDataType.DecimalField),
				begin
					mreturn (On)(^d(dataBuffer1(fieldDetails1.StructurePosition:leftMinSize)) .eq. ^d(dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize)))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					mreturn (On)(^d(dataBuffer1(fieldDetails1.StructurePosition:fieldDetails1.ElementSize), fieldDetails1.DecimalPrecision) .eq. ^d(dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize), fieldDetails2.DecimalPrecision))
				end
				(FieldDataType.CompositeField),
				begin
					data fieldOneConsumed = 0 
					data fieldTwoConsumed = 0
					data fieldOnePos = 1
					data fieldTwoPos = 1
					data resultOn, @On
					data onHasLiteral = true
					while(fieldOnePos <= fieldDetails1.CompositeParts.Length && fieldTwoPos <= fieldDetails2.CompositeParts.Length)
					begin
						data fieldOnePart = fieldDetails1.CompositeParts[fieldOnePos]
						data fieldTwoPart = fieldDetails2.CompositeParts[fieldTwoPos]
						data fieldOneStart = fieldOnePart.StructurePosition + fieldOneConsumed
						data fieldTwoStart = fieldTwoPart.StructurePosition + fieldTwoConsumed
						data compSize = Math.Min(fieldOnePart.ElementSize - fieldOneConsumed, fieldTwoPart.ElementSize - fieldTwoConsumed)
						data madeOn, @On
						data madeLiteral = false
						using fieldOnePart.DataType select
						(FieldDataType.AlphaField),
						begin
							if(!caseInsensitive) then
							begin
								if(fieldTwoPart.DataType == FieldDataType.TagLiteral) then
								begin
									madeLiteral = true
									madeOn = (On)(dataBuffer1(fieldOneStart:compSize) .eq. (a)fieldTwoPart.TagValue)
								end
								else
								begin
									madeOn = (On)(dataBuffer1(fieldOneStart:compSize) .eq. dataBuffer2(fieldTwoStart:compSize))
								end
							end
							else
								throw new NotImplementedException()
						end
						(FieldDataType.IntegerField),
						begin
							if(fieldTwoPart.DataType == FieldDataType.TagLiteral) then
							begin
								madeLiteral = true
								madeOn = (On)(^i(dataBuffer1(fieldOneStart:compSize)) .eq. %integer(fieldTwoPart.TagValue))
							end
							else
							begin
								madeOn = (On)(^i(dataBuffer1(fieldOneStart:compSize)) .eq. ^i(dataBuffer2(fieldTwoStart:compSize)))
							end
						end
						(FieldDataType.DecimalField),
						begin
							if(fieldTwoPart.DataType == FieldDataType.TagLiteral) then
							begin
								madeLiteral = true
								madeOn = (On)(^d(dataBuffer1(fieldOneStart:compSize)) .eq. %implied(fieldTwoPart.TagValue))
							end
							else
							begin
								madeOn = (On)(^d(dataBuffer1(fieldOneStart:compSize)) .eq. ^d(dataBuffer2(fieldTwoStart:compSize)))
							end

						end
						(FieldDataType.TagLiteral),
						begin
							madeLiteral = true

							using fieldTwoPart.DataType select
							(FieldDataType.AlphaField),
							begin
								if(!caseInsensitive) then
									madeOn = (On)(fieldOnePart.TagValue .eq. dataBuffer2(fieldTwoStart:compSize))
								else
									throw new NotImplementedException()
							end
							(FieldDataType.IntegerField),
							begin
								madeOn = (On)(%integer(fieldOnePart.TagValue) .eq. ^i(dataBuffer2(fieldTwoStart:compSize)))
							end
							(FieldDataType.DecimalField),
							begin
								madeOn = (On)(%implied(fieldOnePart.TagValue) .eq. ^d(dataBuffer2(fieldTwoStart:compSize)))
							end
							endusing
						end

						endusing

						if(madeOn == ^null)
							throw new NotImplementedException(string.Format("Invalid field type comparison for join operation, field1 = {0}, field2 = {1}", fieldOnePart.DataType, fieldTwoPart.DataType))
						
						if(resultOn == ^null) then
							resultOn = madeOn
						else if(onHasLiteral) then
							resultOn = madeOn .and. resultOn
						else
							resultOn = resultOn .and. madeOn

						onHasLiteral = onHasLiteral && madeLiteral

						fieldOneConsumed += compSize
						fieldTwoConsumed += compSize

						if(fieldOneConsumed >= fieldOnePart.ElementSize)
						begin
							^incr(fieldOnePos)
							fieldOneConsumed = 0
						end

						if(fieldTwoConsumed >= fieldTwoPart.ElementSize)
						begin
							^incr(fieldTwoPos)
							fieldTwoConsumed = 0
						end
					end

					if(resultOn == ^null)
						throw new InvalidOperationException()

					mreturn resultOn
				end
				endusing

			end
			(whereClauseOperator.NotEqualTo),
			begin
			end
			(whereClauseOperator.GreaterThan),
			begin
			end
			(whereClauseOperator.GreaterThanOrEqualTo),
			begin
			end
			(whereClauseOperator.LessThan),
			begin
			end
			(whereClauseOperator.LessThanOrEqualTo),
			begin
			end
			(whereClauseOperator.IsLike),
			begin
			end
			(whereClauseOperator.IsBetween),
			begin
			end
			(WhereClauseOperator.IsIn),
			begin
			end
			endusing
			throw new NotImplementedException()
		endmethod

		private method fieldWhereClause  ,@Where
			in req dataBuffer1			,a
			in req dataBuffer2			,a
			in req fieldDetails1		,@FieldDataDefinition
			in req fieldDetails2		,@FieldDataDefinition
			in req theOperator			,whereClauseOperator
		proc

			if(fieldDetails1.DataType != fieldDetails2.DataType)
				throw new NotImplementedException("field to field comparisons must be of the same type")

			data caseInsensitive = theOperator == WhereClauseOperator.NoCaseEqualTo || 
			&	theOperator == WhereClauseOperator.NoCaseNotEqualTo ||
			&	theOperator == WhereClauseOperator.IsLikeNoCase ||
			&	theOperator == WhereClauseOperator.IsInNoCase

			using theOperator select
			(whereClauseOperator.EqualTo),
			begin
				using fieldDetails1.DataType select
				(FieldDataType.AlphaField),
				begin
					if(!caseInsensitive) then
						mreturn (Where)(dataBuffer1(fieldDetails1.StructurePosition:fieldDetails1.ElementSize) .eqs. dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize))
					else
						mreturn (NoCaseWhere)(dataBuffer1(fieldDetails1.StructurePosition:fieldDetails1.ElementSize) .eqs. dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize))
				end
				(FieldDataType.IntegerField),
				begin
					mreturn (Where)(^i(dataBuffer1(fieldDetails1.StructurePosition:fieldDetails1.ElementSize)) .eqs. ^i(dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize)))
				end
				(FieldDataType.DecimalField),
				begin
					mreturn (Where)(^d(dataBuffer1(fieldDetails1.StructurePosition:fieldDetails1.ElementSize)) .eqs. ^d(dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize)))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					mreturn (Where)(^d(dataBuffer1(fieldDetails1.StructurePosition:fieldDetails1.ElementSize), fieldDetails1.DecimalPrecision) .eqs. ^d(dataBuffer2(fieldDetails2.StructurePosition:fieldDetails2.ElementSize), fieldDetails2.DecimalPrecision))
				end
				endusing

			end
			(whereClauseOperator.NotEqualTo),
			begin
			end
			(whereClauseOperator.GreaterThan),
			begin
			end
			(whereClauseOperator.GreaterThanOrEqualTo),
			begin
			end
			(whereClauseOperator.LessThan),
			begin
			end
			(whereClauseOperator.LessThanOrEqualTo),
			begin
			end
			(whereClauseOperator.IsLike),
			begin
			end
			(whereClauseOperator.IsBetween),
			begin
			end
			(WhereClauseOperator.IsIn),
			begin
			end
			endusing
			throw new NotImplementedException()
		endmethod

		private method makeFieldEqClause, @Where
			in req dataBuffer			,a
			in req fieldDetails			,@FieldDataDefinition
			in req theOperator			,whereClauseOperator
			in req targetAlpha			,a
			in req memPnt				,i
			in req length               ,int
			in req startsWith			,boolean
			in req caseInsensitive		,boolean
		proc
			if(length > fieldDetails.ElementSize)
				DebugLogSession.Logging.LogDebug("HARMONY-commandParser::fieldWhereClause: literal length is longer than target field, this will result in 0 matching records")

			using fieldDetails.DataType select
			(FieldDataType.AlphaField),
			begin
				if (!startsWith) then
				begin
					if(length > fieldDetails.ElementSize)
					begin
						;;this shouldnt match anything because its .eq. and the size of the literal is too long
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .eqs. new string(" ", length))
					end

					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: StartsWith Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, length, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .eqs. targetAlpha)
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: StartsWith NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, length, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .eqs. targetAlpha)
					end
				end
				else
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: EqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .eq. targetAlpha(1:length))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: EqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .eq. targetAlpha(1:length))
					end
				end
			end
			(FieldDataType.IntegerField),
			begin
				data intValue	,string	,targetAlpha(1:fieldDetails.ElementSize)
				;;we may be a boolean type!!
				if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
				if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

				DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: EqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
				mreturn (Where)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .eq. %integer(intValue, fieldDetails.ElementSize))
			end
			(FieldDataType.ImpliedDecimal),
			begin
				DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: EqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
				mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .eq. %implied(targetAlpha(1:fieldDetails.ElementSize)))
			end
			(FieldDataType.DecimalField),
			begin
				DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: EqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
				mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .eq. %implied(targetAlpha(1:fieldDetails.ElementSize)))
			end
			(FieldDataType.CompositeField),
			begin
				data innerField, @FieldDataDefinition
				data targetStart, int, 1
				data targetLength, int, 0
				data resultWhere, @Where, ^null
				foreach innerField in fieldDetails.CompositeParts
				begin
					targetLength = innerField.ElementSize
					data madeWhere = makeFieldEqClause(dataBuffer, innerField, theOperator, targetAlpha, memPnt, length, false, caseInsensitive)
					if(resultWhere == ^null) then
						resultWhere = madeWhere
					else
						resultWhere = resultWhere .and. madeWhere

					targetStart += targetLength
				end
			end
			endusing
		endmethod

		private method makeFieldNeqClause, @Where
			in req dataBuffer			,a
			in req fieldDetails			,@FieldDataDefinition
			in req theOperator			,whereClauseOperator
			in req targetAlpha			,a
			in req memPnt				,i
			in req length               ,int
			in req startsWith			,boolean
			in req caseInsensitive		,boolean
		proc
			using fieldDetails.DataType select
			(FieldDataType.AlphaField),
			begin
				if (!startsWith) then
				begin
					if(length > fieldDetails.ElementSize)
					begin
						;;this shouldnt match anything because its .eq. and the size of the literal is too long
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .nes. new string(" ", length))
					end

					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: NotEqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, length, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .nes. targetAlpha)
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: NotEqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, length, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .nes. targetAlpha)
					end
				end
				else
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: NotStartsWith Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .ne. targetAlpha(1:length))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: NotStartsWith NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .ne. targetAlpha(1:length))
					end
				end
			end
			(FieldDataType.IntegerField),
			begin
				data intValue	,string	,targetAlpha(1:fieldDetails.ElementSize)
				;;we may be a boolean type!!
				if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
				if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

				DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: NotEqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
				mreturn (Where)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ne. %integer(intValue, fieldDetails.ElementSize))
			end
			(FieldDataType.ImpliedDecimal),
			begin
				DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: NotEqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
				mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .ne. %implied(targetAlpha(1:fieldDetails.ElementSize)))
			end
			(FieldDataType.DecimalField),
			begin
				DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: NotEqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
				mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ne. %implied(targetAlpha(1:fieldDetails.ElementSize)))
			end
			(FieldDataType.CompositeField),
			begin
				data innerField, @FieldDataDefinition
				data targetStart, int, 1
				data targetLength, int, 0
				data resultWhere, @Where, ^null
				foreach innerField in fieldDetails.CompositeParts
				begin
					targetLength = innerField.ElementSize
					data madeWhere = makeFieldEqClause(dataBuffer, innerField, theOperator, targetAlpha, memPnt, length, false, caseInsensitive)
					if(resultWhere == ^null) then
						resultWhere = madeWhere
					else
						resultWhere = resultWhere .and. madeWhere

					targetStart += targetLength
				end
			end
			endusing
		endmethod


		;;add the actual field and value to the where clause
		private method fieldWhereClause	,@Where
			in req dataBuffer			,a
			in req fieldDetails			,@FieldDataDefinition
			in req theOperatorParam		,whereClauseOperator
			in req theValues			,[#]string
			endparams
			
			structure tmpStructure
				fld	,a1
			endstructure
			
			record
				stPos	,i4
				edPos	,i4
				bNum	,d3
				memPnt	,i4
				valueLength, int
				theOperator, whereClauseOperator
				startsWith, boolean
			endrecord
		proc
			theOperator = theOperatorParam
			memPnt = %mem_proc(DM_ALLOC, fieldDetails.ElementSize)
			^m(tmpStructure(1:fieldDetails.ElementSize), memPnt) = theValues[1]
			valueLength = theValues[1].Length
			if (!valueLength) valueLength = fieldDetails.ElementSize

			data caseInsensitive = theOperator == WhereClauseOperator.NoCaseEqualTo || 
			&	theOperator == WhereClauseOperator.NoCaseNotEqualTo ||
			&	theOperator == WhereClauseOperator.IsLikeNoCase ||
			&	theOperator == WhereClauseOperator.IsInNoCase ||
			&	theOperator == WhereClauseOperator.StartsWithNoCase ||
			&	theOperator == WhereClauseOperator.NotStartsWithNoCase

			using theOperator select
			(WhereClauseOperator.StartsWithNoCase),
			begin
				startsWith = true
				theOperator = WhereClauseOperator.NoCaseEqualTo
			end
			(WhereClauseOperator.StartsWith),
			begin
				startsWith = true
				theOperator = WhereClauseOperator.EqualTo
			end
			(WhereClauseOperator.NotStartsWith),
			begin
				startsWith = true
				theOperator = WhereClauseOperator.NotEqualTo
			end
			(WhereClauseOperator.NotStartsWithNoCase),
			begin
				startsWith = true
				theOperator = WhereClauseOperator.NoCaseNotEqualTo
			end

			endusing

			using theOperator select
			(whereClauseOperator.EqualTo, WhereClauseOperator.NoCaseEqualTo),
			begin
				mreturn makeFieldEqClause(dataBuffer, fieldDetails, theOperator, ^m(tmpStructure(1:fieldDetails.ElementSize), memPnt), memPnt, valueLength, startsWith, caseInsensitive)
			end
			(whereClauseOperator.NotEqualTo, WhereClauseOperator.NoCaseNotEqualTo),
			begin
				mreturn makeFieldNeqClause(dataBuffer, fieldDetails, theOperator, ^m(tmpStructure(1:fieldDetails.ElementSize), memPnt), memPnt, valueLength, startsWith, caseInsensitive)
			end
			(whereClauseOperator.GreaterThanOrEqualTo),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThanOrEqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .ges. (^m(tmpStructure(1:valueLength), memPnt)))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThanOrEqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .ges. (^m(tmpStructure(1:valueLength), memPnt)))
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThanOrEqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ge. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThanOrEqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .ge. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThanOrEqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ge. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.LessThan),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThan Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .lts. (^m(tmpStructure(1:valueLength), memPnt)))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThan NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .lts. (^m(tmpStructure(1:valueLength), memPnt)))
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThan Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .lt. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThan Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .lt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThan Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .lt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.GreaterThan),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThan Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .gts. (^m(tmpStructure(1:valueLength), memPnt)))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThan NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .gts. (^m(tmpStructure(1:valueLength), memPnt)))
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThan Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .gt. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThan Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .gt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: GreaterThan Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .gt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.LessThanOrEqualTo),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThanOrEqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (Where)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .les. (^m(tmpStructure(1:valueLength), memPnt)))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThanOrEqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (NoCaseWhere)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .les. ^m(tmpStructure(1:valueLength), memPnt))
					end
				end
				(FieldDataType.IntegerField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThanOrEqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .le. %integer(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt), fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("LessThanOrEqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .le. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: LessThanOrEqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize,new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (Where)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .le. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.IsLike, whereClauseOperator.IsLikeNoCase),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize

					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: IsLike Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn Where.Like(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), (^m(tmpStructure(1:length), memPnt)))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: IsLike NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn NoCaseWhere.Like(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), (^m(tmpStructure(1:length), memPnt)))
					end
				end
				endusing
			end
			(whereClauseOperator.EndsWith, whereClauseOperator.EndsWithNoCase, WhereClauseOperator.NotEndsWith, WhereClauseOperator.NotEndsWithNoCase),
			begin
				data resultWhere, @Where
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize

					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: EndsWith Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						resultWhere = Where.Like(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), "%" + (^m(tmpStructure(1:length), memPnt) + "%"))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: EndsWith NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						resultWhere = NoCaseWhere.Like(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), "%" + (^m(tmpStructure(1:length), memPnt) + "%"))
					end
				end
				endusing

				if(theOperator == WhereClauseOperator.NotEndsWith || theOperator == WhereClauseOperator.NotEndsWithNoCase)
					resultWhere = !resultWhere

				mreturn resultWhere
			end
			(whereClauseOperator.IsBetween),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: IsBetween Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2} and {3}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize), theValues[2])
						mreturn Where.Between(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), (^m(tmpStructure(1:valueLength), memPnt)), theValues[2])
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: IsBetween Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2} and {3}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize), theValues[2])
						mreturn NoCaseWhere.Between(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), (^m(tmpStructure(1:valueLength), memPnt)), theValues[2])
					end
				end
				(FieldDataType.IntegerField),
					mreturn Where.Between(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), %integer(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt), fieldDetails.ElementSize), %integer(theValues[2], fieldDetails.ElementSize))
				(FieldDataType.ImpliedDecimal),
					mreturn Where.Between(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision), %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)), %implied(theValues[2]))
				(FieldDataType.DecimalField),
					mreturn Where.Between(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)), %implied(theValues[2]))
				endusing
			end
			(whereClauseOperator.IsIn, WhereClauseOperator.IsInNoCase),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: IsIn Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						
						if(theValues.Length > 2) then
						begin
							data varargArray = theValues.Skip(1).Select<string, VariantDesc>(lambda(str) { (@Synergex.SynergyDE.AlphaDesc)(a)str }).ToArray()
							mreturn Where.In(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), theValues[1], ^varargarray(varargArray))
						end
						else if(theValues.Length == 1) then
						begin
							throw new InvalidOperationException("Not enough arguments to build a Where.In operation")
						end
						else
						begin
							mreturn Where.In(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), theValues[1], theValues[2])
						end
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldWhereClause: IsIn Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn NoCaseWhere.Between(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), (^m(tmpStructure(1:valueLength), memPnt)), theValues[2])
					end
				end
				(FieldDataType.IntegerField),
					mreturn Where.Between(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), %integer(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt), fieldDetails.ElementSize), %integer(theValues[2], fieldDetails.ElementSize))
				(FieldDataType.ImpliedDecimal),
					mreturn Where.Between(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision), %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)), %implied(theValues[2]))
				(FieldDataType.DecimalField),
					mreturn Where.Between(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)), %implied(theValues[2]))
				endusing
			end
			endusing

			throw new InvalidOperationException()
		endmethod

		private method fieldOnClause	,@On
			in req dataBuffer			,a
			in req fieldDetails			,@FieldDataDefinition
			in req theOperator			,whereClauseOperator
			in req theValue				,[#]string
			endparams
			
			structure tmpStructure
				fld	,a1
			endstructure
			
			record
				stPos	,i4
				edPos	,i4
				bNum	,d3
				memPnt	,i4
			endrecord
		proc
			memPnt = %mem_proc(DM_ALLOC, fieldDetails.ElementSize)
			^m(tmpStructure(1:fieldDetails.ElementSize), memPnt) = theValue[1]
			
			data caseInsensitive = theOperator == WhereClauseOperator.NoCaseEqualTo || 
			&	theOperator == WhereClauseOperator.NoCaseNotEqualTo ||
			&	theOperator == WhereClauseOperator.IsLikeNoCase ||
			&	theOperator == WhereClauseOperator.IsInNoCase

			using theOperator select
			(whereClauseOperator.EqualTo),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					;;if we have a "%" as the last character let's do a "starts with" type operation
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize

					if (length > 1 && %atrim(^m(tmpStructure(length:1), memPnt)) == "%") then
					begin
						decr length
						if (!caseInsensitive) then
						begin
							DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: StartsWith Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, length, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
							mreturn (On)(dataBuffer(fieldDetails.StructurePosition:length) .eqs. (^m(tmpStructure(1:length), memPnt)))
						end
						else
						begin
							throw new NotImplementedException()
							DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: StartsWith NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, length, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
							mreturn (On)(dataBuffer(fieldDetails.StructurePosition:length) .eqs. (^m(tmpStructure(1:length), memPnt)))
						end
					end
					else
					begin
						if (!caseInsensitive) then
						begin
							DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: EqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
							mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .eqs. (^m(tmpStructure(1:length), memPnt)))
						end
						else
						begin
							throw new NotImplementedException()
							DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: EqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
							mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .eqs. (^m(tmpStructure(1:length), memPnt)))
						end
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: EqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .eq. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: EqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .eq. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: EqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .eq. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.NotEqualTo),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: NotEqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .nes. (^m(tmpStructure(1:length), memPnt)))
					end
					else
					begin
						throw new NotImplementedException()
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: NotEqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .nes. (^m(tmpStructure(1:length), memPnt)))
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: NotEqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ne. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: NotEqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .ne. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: NotEqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ne. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.GreaterThan),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize

					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThan Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .gts. (^m(tmpStructure(1:length), memPnt)))
					end
					else
					begin
						throw new NotImplementedException()
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThan NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .gts. (^m(tmpStructure(1:length), memPnt)))
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThan Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .gt. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThan Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .gt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThan Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .gt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.GreaterThanOrEqualTo),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize

					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThanOrEqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .ges. (^m(tmpStructure(1:length), memPnt)))
					end
					else
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThanOrEqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .ges. (^m(tmpStructure(1:length), memPnt)))
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThanOrEqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ge. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThanOrEqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .ge. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: GreaterThanOrEqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .ge. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.LessThan),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize
					
					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThan Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .lts. (^m(tmpStructure(1:length), memPnt)))
					end
					else
					begin
						throw new NotImplementedException()
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThan NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .lts. (^m(tmpStructure(1:length), memPnt)))
					end
				end
				(FieldDataType.IntegerField),
				begin
					data intValue	,string	,^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)
					;;we may be a boolean type!!
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "TRUE") intValue = 1
					if (fieldDetails.ElementSize == 4 && intValue.ToUpper() == "FALS") intValue = 0

					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThan Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .lt. %integer(intValue, fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThan Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .lt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThan Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .lt. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.LessThanOrEqualTo),
			begin
				using fieldDetails.DataType select
				(FieldDataType.AlphaField),
				begin
					data length	,i4	,%trim(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt))
					if (!length) length = fieldDetails.ElementSize

					if (!caseInsensitive) then
					begin
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThanOrEqualTo Where (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .les. (^m(tmpStructure(1:length), memPnt)))
					end
					else
					begin
						throw new NotImplementedException()
						DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThanOrEqualTo NoCaseWhere (AlphaField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
						mreturn (On)(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize) .les. ^m(tmpStructure(1:length), memPnt))
					end
				end
				(FieldDataType.IntegerField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThanOrEqualTo Where (IntegerField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleIntegerDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .le. %integer(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt), fieldDetails.ElementSize))
				end
				(FieldDataType.ImpliedDecimal),
				begin
					DebugLogSession.Logging.LogTrace("LessThanOrEqualTo Where (ImpliedDecimal) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), fieldDetails.DecimalPrecision) .le. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				(FieldDataType.DecimalField),
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: LessThanOrEqualTo Where (DecimalField) clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize,new MemoryHandleImpliedDebugLogHelper(memPnt, fieldDetails.ElementSize))
					mreturn (On)(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)) .le. %implied(^m(tmpStructure(1:fieldDetails.ElementSize), memPnt)))
				end
				endusing
			end
			(whereClauseOperator.IsIn, WhereClauseOperator.IsInNoCase),
			begin
				if (!caseInsensitive) then
				begin
					DebugLogSession.Logging.LogTrace("HARMONY-commandParser::fieldOnClause: IsIn Where clause.  Structure position : {0}, size : {1}, value : {2}", fieldDetails.StructurePosition, fieldDetails.ElementSize, new MemoryHandleDebugLogHelper(memPnt, fieldDetails.ElementSize))
					
					data varargArray, [#]@VariantDesc, ^null
					data varargArray2, [#]@VariantDesc, ^null
					using fieldDetails.DataType select
					(FieldDataType.AlphaField),
					begin
						varargArray = theValue.Select<string, VariantDesc>(lambda(str) { (@Synergex.SynergyDE.AlphaDesc)(a)str }).ToArray()
						if(theValue.Length > 2) then
						begin
							varargArray2 = varargArray.Skip(1).ToArray()
							data onResult, @Where, On.In(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), MakeOnObject(varargArray[1]), ^varargarray(varargArray2))
							mreturn (On)onResult
						end
						else if(theValue.Length == 1) then
						begin
							throw new InvalidOperationException("Not enough arguments to build a Where.In operation")
						end
						else
						begin
							data onResult, @Where, On.In(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize), MakeOnObject(varargArray[1]), MakeOnObject(varargArray[2]))
							mreturn (On)onResult
						end
					end
					(FieldDataType.IntegerField),
					begin
						varargArray = theValue.Select<string, VariantDesc>(lambda(str) { (@Synergex.SynergyDE.IntegerDesc)%integer((a)str) }).ToArray()
						if(theValue.Length > 2) then
						begin
							varargArray2 = varargArray.Skip(1).ToArray()
							data onResult, @Where, On.In(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), MakeOnObject(varargArray[1]), ^varargarray(varargArray2))
							mreturn (On)onResult
						end
						else if(theValue.Length == 1) then
						begin
							throw new InvalidOperationException("Not enough arguments to build a Where.In operation")
						end
						else
						begin
							data onResult, @Where, On.In(^i(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), MakeOnObject(varargArray[1]), MakeOnObject(varargArray[2]))
							mreturn (On)onResult
						end
					end
					(FieldDataType.ImpliedDecimal),
					begin
						varargArray = theValue.Select<string, VariantDesc>(lambda(str) { (@Synergex.SynergyDE.ImpliedDecimalDesc)%implied((a)str) }).ToArray()
						if(theValue.Length > 2) then
						begin
							varargArray2 = varargArray.Skip(1).ToArray()
							data onResult, @Where, On.In(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), MakeOnObject(varargArray[1]), ^varargarray(varargArray2))
							mreturn (On)onResult
						end
						else if(theValue.Length == 1) then
						begin
							throw new InvalidOperationException("Not enough arguments to build a Where.In operation")
						end
						else
						begin
							data onResult, @Where, On.In(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), MakeOnObject(varargArray[1]), MakeOnObject(varargArray[2]))
							mreturn (On)onResult
						end
					end
					(FieldDataType.DecimalField),
					begin
						varargArray = theValue.Select<string, VariantDesc>(lambda(str) { (@Synergex.SynergyDE.DecimalDesc)%implied((a)str) }).ToArray()
						if(theValue.Length > 2) then
						begin
							varargArray2 = varargArray.Skip(1).ToArray()
							data onResult, @Where, On.In(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), MakeOnObject(varargArray[1]), ^varargarray(varargArray2))
							mreturn (On)onResult
						end
						else if(theValue.Length == 1) then
						begin
							throw new InvalidOperationException("Not enough arguments to build a Where.In operation")
						end
						else
						begin
							data onResult, @Where, On.In(^d(dataBuffer(fieldDetails.StructurePosition:fieldDetails.ElementSize)), MakeOnObject(varargArray[1]), MakeOnObject(varargArray[2]))
							mreturn (On)onResult
						end
					end
					endusing
				end
				else
				begin
					throw new NotImplementedException()
				end
			end
			endusing
		endmethod

		private static method MakeOnObject, @On
			mismatch arg, n
		proc
			mreturn new On(1, arg)
		endmethod


		public method ProcessWhere, @Where
			expr, @object
		proc
			if(expr .is. @ConnectorPart) then
			begin
				mreturn ProcessWhereConnector(^as(expr, @ConnectorPart))
			end
			else if(expr .is. @ExprPart) then
			begin
				mreturn ProcessWhereExpression(^as(expr, @ExprPart))
			end
			else
				throw new InvalidOperationException("Invalid Where Expression Tree")
		endmethod


		private method ProcessWhereConnector, @Where
			connector, @ConnectorPart
		proc
			data leftWhere = ProcessWhere(connector.Left)
			data rightWhere = ProcessWhere(connector.Right)

			if(leftWhere == ^null)
				mreturn rightWhere
			if(rightWhere == ^null)
				mreturn leftWhere

			if(connector.Op == WhereClauseConnector.AndOperator) then
			begin
				mreturn leftWhere .and. rightWhere
			end
			else if(connector.Op == WhereClauseConnector.OrOperator) then
			begin
				mreturn leftWhere .or. rightWhere
			end
			else
				throw new InvalidOperationException("Invalid Where Expression Tree")
		endmethod

		private method MapTypeBuffer, @QueryBuffer.TypeBuffer
			sourceKey, int
		proc
			if(sourceKey == 0 && mTargetBuffers != ^null)
				mreturn mTargetBuffers[0]

			mreturn mQueryBuffer.TypeBuffers[sourceKey]
		endmethod


		private method ProcessWhereExpression, @Where
			expr, @ExprPart
			structure tmpStructure
				fld	,a1
			endstructure
		proc
			data leftField = ^as(expr.Left, @FieldReference)
			data rightField = ^as(expr.Right, @FieldReference)
			data leftBuffer, @QueryBuffer.TypeBuffer, ^null
			data rightBuffer, @QueryBuffer.TypeBuffer, ^null
			leftBuffer = leftField != ^null ? MapTypeBuffer(leftField.QuerySourceKey) : ^null
			rightBuffer = rightField != ^null ? MapTypeBuffer(rightField.QuerySourceKey) : ^null

			if(mTargetBuffers != ^null && ((leftBuffer != ^null && !mTargetBuffers.Contains(leftBuffer)) || (rightBuffer != ^null && !mTargetBuffers.Contains(rightBuffer))))
				mreturn ^null

			if(leftField != ^null && rightField != ^null) then
			begin
				if(leftBuffer == rightBuffer) then
				begin
					mreturn fieldWhereClause(^m(tmpStructure(1:leftBuffer.Metadata.StructureSize), leftBuffer.MemoryHandle.Value), 
					&	^m(tmpStructure(1:rightBuffer.Metadata.StructureSize), rightBuffer.MemoryHandle.Value), 
					&	leftField.FieldDef, 
					&	rightField.FieldDef,
					&	expr.Op)
				end
				else
				begin
					throw new InvalidOperationException("Invalid Where Expression Tree")
				end
			end
			else if(leftField != ^null) then
			begin
				mreturn fieldWhereClause(^m(tmpStructure(1:leftBuffer.Metadata.StructureSize), leftBuffer.MemoryHandle.Value), 
				&	leftField.FieldDef, 
				&	expr.Op,
				&	ProcessValue(expr.Right, leftField.FieldDef))
			end
			else if(rightField != ^null) then
			begin
				mreturn fieldWhereClause(^m(tmpStructure(1:rightBuffer.Metadata.StructureSize), rightBuffer.MemoryHandle.Value), 
				&	rightField.FieldDef, 
				&	expr.Op,
				&	ProcessValue(expr.Left, rightField.FieldDef))
			end
			else if(expr.Left .is. ParameterReference && expr.Right .is. string)
			begin
				mreturn ^null
			end
			throw new InvalidOperationException("Invalid Where Expression Tree")
		endmethod

		public method ProcessOn, @On
			expr, @object
		proc
			if(expr .is. @ConnectorPart) then
			begin
				mreturn ProcessOnConnector(^as(expr, @ConnectorPart))
			end
			else if(expr .is. @ExprPart) then
			begin
				mreturn ProcessOnExpression(^as(expr, @ExprPart))
			end
			else
				throw new InvalidOperationException("Invalid Where Expression Tree")
		endmethod

		;;we have to pick a non literal as the first expression when creating an On object
		private method ExprPartIsLiteral, boolean
			expr, @object
		proc
			data exPart = ^as(expr, @ExprPart)
			data conPart = ^as(expr, @ConnectorPart)
			data fieldPart = ^as(expr, @FieldReference)
			if(exPart != ^null) then
			begin
				mreturn ExprPartIsLiteral(exPart.Left)
			end
			else if(conPart != ^null) then
			begin
				mreturn ExprPartIsLiteral(conPart.Left)
			end
			else if(fieldPart != ^null) then
			begin
				mreturn fieldPart.FieldDef.DataType == FieldDataType.TagLiteral
			end
			else
			begin
				mreturn true
			end
		endmethod


		private method ProcessOnConnector, @On
			connector, @ConnectorPart
		proc
			data leftOn = ProcessOn(connector.Left)
			data rightOn = ProcessOn(connector.Right)

			if(connector.Op == WhereClauseConnector.AndOperator) then
			begin
				;;cant pass a literal part as the first element to an On object
				if(ExprPartIsLiteral(connector.Left)) then
					mreturn rightOn .and. leftOn
				else
					mreturn leftOn .and. rightOn
			end
			else if(connector.Op == WhereClauseConnector.OrOperator) then
			begin
				mreturn leftOn .or. rightOn
			end
			else
				throw new InvalidOperationException("Invalid Where Expression Tree")
		endmethod

		private method ProcessOnExpression, @On
			expr, @ExprPart
			structure tmpStructure
				fld	,a1
			endstructure
		proc
			data leftField = ^as(expr.Left, @FieldReference)
			data rightField = ^as(expr.Right, @FieldReference)
			data leftBuffer, @QueryBuffer.TypeBuffer, ^null
			data rightBuffer, @QueryBuffer.TypeBuffer, ^null
			leftBuffer = leftField != ^null ? MapTypeBuffer(leftField.QuerySourceKey) : ^null
			rightBuffer = rightField != ^null ? MapTypeBuffer(rightField.QuerySourceKey) : ^null

			if(leftField != ^null && rightField != ^null) then
			begin
				if(leftBuffer != rightBuffer) then
				begin
					mreturn fieldOnClause(^m(tmpStructure(1:leftBuffer.Metadata.StructureSize), leftBuffer.MemoryHandle.Value), 
					&	^m(tmpStructure(1:rightBuffer.Metadata.StructureSize), rightBuffer.MemoryHandle.Value), 
					&	leftField.FieldDef, 
					&	rightField.FieldDef,
					&	expr.Op)
				end
				else
				begin
					throw new InvalidOperationException("Invalid Where Expression Tree")
				end
			end
			else if(leftField != ^null) then
			begin
				mreturn fieldOnClause(^m(tmpStructure(1:leftBuffer.Metadata.StructureSize), leftBuffer.MemoryHandle.Value), 
				&	leftField.FieldDef, 
				&	expr.Op,
				&	ProcessValue(expr.Right, leftField.FieldDef))
			end
			else if(rightField != ^null)
			begin
				mreturn fieldOnClause(^m(tmpStructure(1:rightBuffer.Metadata.StructureSize), rightBuffer.MemoryHandle.Value), 
				&	rightField.FieldDef, 
				&	expr.Op,
				&	ProcessValue(expr.Left, rightField.FieldDef))
			end
			throw new InvalidOperationException("Invalid Where Expression Tree")
		endmethod

		private method FormatValue, @string
			inputString, @string
			targetField, @FieldDataDefinition
		proc
			if(targetField.LiteralFormatter != ^null) then
				mreturn targetField.LiteralFormatter.FormatLiteral(inputString)
			else
				mreturn inputString
		endmethod

		private method ProcessValue, [#]string
			expr, @object
			targetField, @FieldDataDefinition
		proc
			if(expr .is. @ParameterReference) then
			begin
				mreturn new string[#] { FormatValue(mQueryBuffer.Parameters[((@ParameterReference)expr).Name].ToString(), targetField) }
			end
			else if(expr .is. @FieldReference) then
			begin
				mreturn new string[#] { ((@FieldReference)expr).FieldDef.TagValue }
			end
			else if(expr .is. @IEnumerable<string>) then
			begin
				data collection = ^as(expr, @IEnumerable<string>)
				mreturn collection.Select<string, string>(lambda(str) { FormatValue(str, targetField) }).ToArray()
			end
			else
			begin
				mreturn new string[#] { FormatValue(expr.ToString(), targetField) }
			end
		endmethod
	endclass

endnamespace
