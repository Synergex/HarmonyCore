
import System
import System.Collections.Generic
import System.Text

namespace Harmony.Core.FileIO

	public interface IDataObjectIO extends IDisposable
		readonly property IOStatus, FileAccessResults
		readonly property LastSynergyError, int
		;;; <summary>
		;;;  Specify the actual/full length of the key to read.  Setting this will prevent partial key reads of the file.
		;;; </summary>
		readwrite property ForceKeyLength, short

		;;; <summary>
		;;;  Allow the caller to force a full key read.  Setting this will prevent the built key to be trimmed of trailing blanks.
		;;; </summary>
		readwrite property ForceFullKeyRead, boolean

		;;; <summary>
		;;;  Allow the ability to specify the key of reference to use.  Default is 0 (primary)
		;;; </summary>
		readwrite property KeyReference, short

		;;; <summary>
		;;;  Returns the number of records in the ISAM file.
		;;; </summary>
		readonly property NumberOfRecords, int

		;;; <summary>
		;;;  Returns the size of the record in the ISAM file.
		;;; </summary>
		readonly property SizeOfRecord, int

		;;; <summary>
		;;;  Returns the number of keys defined in the ISAM file.
		;;; </summary>
		readonly property NumberOfKeys, int

		;;; <summary>
		;;;  Specify the maximum amount of seconds to wait for lock operations to complete.
		;;; </summary>
		readwrite property TimeoutSeconds, int

		;;; <summary>
		;;;	Returns the start position of the passed in key.
		;;; </summary>
		;;; <param name="keyNumber">The key number of enquire on.</param>
		method KeyPosition, int
			in req keyNumber, int
		endmethod

		;;; <summary>
		;;;	Returns the length of the passed in key.
		;;; </summary>
		;;; <param name="keyNumber">The key number of enquire on.</param>
		method KeyLength, int
			in req keyNumber, int
		endmethod

		;;; <summary>
		;;; Return the full file specification of the opened file.
		;;; </summary>
		readonly property OpenFileName, @string

		;;; <summary>
		;;;  Find the first record in the file.
		;;; </summary>
		;;; <remarks>
		;;; Locate the first record in the file.
		;;; </remarks>
		method FindFirstRecord, FileAccessResults
		endmethod

		;;; <summary>
		;;;  Find the required record in the indexed file using the passed key.
		;;; </summary>
		;;; <param name="keyValue">Required key value to locate.</param>
		;;; <remarks>
		;;; Locate a record given the passed key value.  The primary key will be used.
		;;; </remarks>
		method FindRecord, FileAccessResults
			in req keyValue, a
		endmethod

		method FindRecord, FileAccessResults
			in req keyNumber, n
			in req keyValue, a
		endmethod

		;;; <summary>
		;;;  Find the required record in the relative file using the passed record number.
		;;; </summary>
		;;; <param name="recordNumber">Required record number to locate.</param>
		;;; <remarks>
		;;; Locate a record given the passed record number.
		;;; </remarks>
		method FindRecord, FileAccessResults
			in req recordNumber, int
		endmethod

		;;; <summary>
		;;;  Find the last record in the file.
		;;; </summary>
		;;; <remarks>
		;;; Locate the last record in the file.
		;;; </remarks>
		method FindLastRecord, FileAccessResults
		endmethod

		;;; <summary>
		;;;  Unlock the record within the file
		;;; </summary>
		method UnlockChannel, FileAccessResults
		endmethod

		event RecordLocked	,@RecordLockedEventHandler


		;;; <summary>
		;;;	Return the full key value for the passed in data object, for the given key-or-reference.
		;;; </summary>
		;;; <param name="dataObject">The passed in data object.</param>
		;;; <param name="keyOfReference">The required key-of-reference to return the key value for.</param>
		;;; <returns></returns>
		method GetKeyValue, a
			in req dataObject, @DataObjectBase
			in req keyOfReference, int
		endmethod

		;;; <summary>
		;;;  Read the first record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  
		;;; The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadFirstRecord, FileAccessResults
			out req dataObject, @DataObjectBase
		endmethod

		;;; <summary>
		;;;  Read the first record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.
		;;; The record will not be locked.  To update the record you should use the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadFirstRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req noLock, boolean
		endmethod

		;;; <summary>
		;;;  Read the next record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadNextRecord, FileAccessResults
			out req dataObject, @DataObjectBase
		endmethod

		;;; <summary>
		;;;  Read the previous record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadPrevRecord, FileAccessResults
			out req dataObject, @DataObjectBase
		endmethod

		;;; <summary>
		;;;  Read the previous record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.
		;;; The record will not be locked.  To update the record you should use the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadPrevRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req noLock, boolean
		endmethod

		;;; <summary>
		;;;  Read the last record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadLastRecord, FileAccessResults
			out req dataObject, @DataObjectBase
		endmethod

		;;; <summary>
		;;;  Read the last record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.
		;;; The record will not be locked.  To update the record you should use the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadLastRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req noLock, Boolean
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the key value will be extracted.  This key value will then be used to locate the matching record in the file.  The file will be read on the primary key index, unless the KeyReference 
		;;; property has previously been set.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, @DataObjectBase
		endmethod

		method ReadRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req keyNumber, n
			in req keyValue, a
			in req noLock, Boolean
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$, but do not lock the record.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the key value will be extracted.  This key value will then be used to locate the matching record in the file.  The file will be read on the primary key index, unless the KeyReference 
		;;; property has previously been set. The record will not be locked.  To subsequently perform an update, call the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req noLock, Boolean
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (integer) to use as the record position to read .</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid integer value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req recordNumber, int
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (Synergy decimal) to use as the record position to read .</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid Synergy decimal value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req recordNumber, d
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (Synergy decimal) to use as the record position to read .</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid integer value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req recordNumber, d
			in req noLock, boolean
		endmethod


		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (integer) to use as the record position to read .</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid integer value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, @DataObjectBase
			in req recordNumber, int
			in req noLock, boolean
		endmethod

		;;; <summary>
		;;;  Update the currently locked record the file.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the value and to update the locked record.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the data will be extracted and used to update the currently locked record.
		;;; </remarks>
		method UpdateRecord, FileAccessResults
			in req dataObject, @DataObjectBase
		endmethod

		;;; <summary>
		;;; Update the record to referecned by it's Global RFA.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the value and to locate and updated the record.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the data will be extracted and used to loate and update the record.
		;;; </remarks>
		method UpdateRecordUsingGRFA, FileAccessResults
			in req dataObject, @DataObjectBase
		endmethod

		;;; <summary>
		;;;  Create a new record within the data files.
		;;; </summary>
		;;; <remarks>
		;;; The passed-in $$HarmonyCore Data Object$$ will will be created in the data files.
		;;; </remarks>
		method CreateRecord, FileAccessResults
			in req dataObject, @DataObjectBase
		endmethod

		;;; <summary>
		;;;  Create a new record within the data file, keeping a manual lock after the record is written.
		;;; </summary>
		;;; <remarks>
		;;; The passed-in $$HarmonyCore Data Object$$ will will be created in the data files.
		;;; </remarks>
		method CreateRecord, FileAccessResults
			in req dataObject, @DataObjectBase
			in req keepManualLock, boolean
		endmethod

		;;; <summary>
		;;;  Delete the currently locked record the file.
		;;; </summary>
		;;; <remarks>
		;;; The currently locked record will be deleted.
		;;; </remarks>
		method DeleteRecord, FileAccessResults
		endmethod

		;;; <summary>
		;;;  Delete the currently locked record the file.
		;;; </summary>
		;;; <remarks>
		;;; The currently locked record will be deleted.
		;;; </remarks>
		method DeleteRecordUsingGRFA, FileAccessResults
			in req dataObject, @DataObjectBase
		endmethod

		method DeleteRecordUsingGRFA, FileAccessResults
			in req dataObject, @DataObjectBase
			in req withManualLock, boolean
		endmethod

		;;; <summary>
		;;;  Aquire a manual lock on a record using its GRFA
		;;; </summary>
		;;; <remarks>
		;;; The record identified by the GRFA in dataObject will be locked
		;;; </remarks>
		method ManualLockUsingGRFA, FileAccessResults
			in req dataObject, @DataObjectBase
		endmethod

	endinterface

	public interface IDataObjectIO<T(DataObjectBase)> extends IDataObjectIO

		;;; <summary>
		;;;	Return the full key value for the passed in data object, for the given key-or-reference.
		;;; </summary>
		;;; <param name="dataObject">The passed in data object.</param>
		;;; <param name="keyOfReference">The required key-of-reference to return the key value for.</param>
		;;; <returns></returns>
		method GetKeyValue, a
			in req dataObject, T
			in req keyOfReference, int
		endmethod

		;;; <summary>
		;;;  Read the first record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  
		;;; The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadFirstRecord, FileAccessResults
			out req dataObject, T
		endmethod

		;;; <summary>
		;;;  Read the first record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.
		;;; The record will not be locked.  To update the record you should use the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadFirstRecord, FileAccessResults
			out req dataObject, T
			in req noLock, boolean
		endmethod

		;;; <summary>
		;;;  Read the next record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadNextRecord, FileAccessResults
			out req dataObject, T
		endmethod

		;;; <summary>
		;;;  Read the previous record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadPrevRecord, FileAccessResults
			out req dataObject, T
		endmethod

		;;; <summary>
		;;;  Read the previous record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.
		;;; The record will not be locked.  To update the record you should use the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadPrevRecord, FileAccessResults
			out req dataObject, T
			in req noLock, boolean
		endmethod

		;;; <summary>
		;;;  Read the last record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadLastRecord, FileAccessResults
			out req dataObject, T
		endmethod

		;;; <summary>
		;;;  Read the last record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The file will be read on the key index that was set by the last read operation, or the default of primary if no previous operation was performed.
		;;; The record will not be locked.  To update the record you should use the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadLastRecord, FileAccessResults
			out req dataObject, T
			in req noLock, Boolean
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the key value will be extracted.  This key value will then be used to locate the matching record in the file.  The file will be read on the primary key index, unless the KeyReference 
		;;; property has previously been set.  The record will be locked if the file is opened in update mode and the record is successfully located.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, T
		endmethod


		method ReadRecord, FileAccessResults
			out req dataObject, T
			in req keyNumber, n
			in req keyValue, a
			in req noLock, Boolean
		endmethod
		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$, but do not lock the record.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the key value will be extracted.  This key value will then be used to locate the matching record in the file.  The file will be read on the primary key index, unless the KeyReference 
		;;; property has previously been set. The record will not be locked.  To subsequently perform an update, call the UpdateRecordUsingGRFA method.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, T
			in req noLock, Boolean
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (integer) to use as the record position to read .</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid integer value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, T
			in req recordNumber, int
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (Synergy decimal) to use as the record position to read .</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid Synergy decimal value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, T
			in req recordNumber, d
		endmethod

		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (Synergy decimal) to use as the record position to read .</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid integer value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, T
			in req recordNumber, d
			in req noLock, boolean
		endmethod


		;;; <summary>
		;;;  Read a record from the file and assign the located record to a $$HarmonyCore Data Object$$.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the key value and to propogate with the located data.</param>
		;;; <param name="recordNumber">The record number (integer) to use as the record position to read .</param>
		;;; <param name="noLock">If passed as TRUE then the record will not be locked, regardless of the file open mode.</param>
		;;; <remarks>
		;;; The data from the file for the passed record number will be returned in the passed $$HarmonyCore Data Object$$.  The record number is any valid integer value.
		;;; </remarks>
		method ReadRecord, FileAccessResults
			out req dataObject, T
			in req recordNumber, int
			in req noLock, boolean
		endmethod

		;;; <summary>
		;;;  Update the currently locked record the file.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the value and to update the locked record.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the data will be extracted and used to update the currently locked record.
		;;; </remarks>
		method UpdateRecord, FileAccessResults
			in req dataObject, T
		endmethod

		;;; <summary>
		;;; Update the record to referecned by it's Global RFA.
		;;; </summary>
		;;; <param name="dataObject">The $$HarmonyCore Data Object$$ to use as the value and to locate and updated the record.</param>
		;;; <remarks>
		;;; Given the passed $$HarmonyCore Data Object$$ the data will be extracted and used to loate and update the record.
		;;; </remarks>
		method UpdateRecordUsingGRFA, FileAccessResults
			in req dataObject, T
		endmethod

		;;; <summary>
		;;;  Create a new record within the data files.
		;;; </summary>
		;;; <remarks>
		;;; The passed-in $$HarmonyCore Data Object$$ will will be created in the data files.
		;;; </remarks>
		method CreateRecord, FileAccessResults
			in req dataObject, T
		endmethod

		;;; <summary>
		;;;  Delete the currently locked record the file.
		;;; </summary>
		;;; <remarks>
		;;; The currently locked record will be deleted.
		;;; </remarks>
		method DeleteRecordUsingGRFA, FileAccessResults
			in req dataObject, T
		endmethod
	endinterface
	
	;;return true to indicate the event was handled, return false to throw 
	public delegate RecordLockedEventHandler, boolean
		inout req sender, @IDataObjectIO
	enddelegate
endnamespace
