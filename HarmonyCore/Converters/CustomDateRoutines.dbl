import System.Globalization
;;**********************************************************************
;;
;; Title:       CustomDateRoutines.dbl
;;
;; Type:        Subroutine
;;
;; Description: holder file for custom date processing routines
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
.subroutine ConvertJulianDateValue
	io_d8,  D               ; DDMMCCYY input or DDMMYY, when output DDMMYY unless sized spec'd
	io_jd,  D               ; julian result
	i_type, D               ; 1=dat to juno,  2=juno to dat
	i_size, D               ; <OPTIONAL> 6,8,-8
	
	
	record
		temp1,          i4
		temp2,          i4
		temp_month,     i4
		temp_year,      i4
		short_jd,       i4
		i_day,          i4
		i_month,        i4
		i_year,         i4
		group   dat,    D
			day,    D2
			month,  D2
			year,   D4
		endgroup
		size,           i1
		
		
.proc
	using i_type select
	(1),    begin
		if(io_d8.gt.0)then
		begin
			dat = io_d8
			
			; are we a D6 date ?
			if(day.eq.0)
			begin
				dat = dat * 100                             ; shift left D2 places
				year = 1900 + year(1,2)
				if(year(3,4).lt.70) incr year(1,2)      ; FIXME - needs sorting by 31st Dec 2069 !
			end
			
			i_day = day
			i_month = month
			i_year = year
			
			io_jd = ( 1461 * ( i_year + 4800 + ( i_month - 14 ) / 12 ) ) / 4 +
			&	( 367 * ( i_month - 2 - 12 * ( ( i_month - 14 ) / 12 ) ) ) / 12 -
			&	( 3 * ( ( i_year + 4900 + ( i_month - 14 ) / 12 ) / 100 ) ) / 4 + i_day - 32075 - 2415019
		end
		else io_jd = 0
	end
	
	(2),    begin
		if(io_jd.gt.0 .and. io_jd.lt.999999)then
		begin
			if(%passed(i_size))then size = i_size else size = 6
				
			short_jd = io_jd + 2415019
			temp1 = short_jd + 68569
			temp2 = ( 4 * temp1 ) / 146097
			temp1 = temp1 - (  146097 * temp2 + 3  ) / 4
			temp_year  = ( 4000 * (  temp1 + 1  ) ) / 1461001
			temp1 = temp1 - ( ( 1461 * temp_year ) / 4 ) + 31
			temp_month = ( 80 * temp1 ) / 2447
			day   = temp1 - ( 2447 * temp_month ) / 80
			temp1 = temp_month / 11
			month = temp_month + 2 - ( 12 * temp1 )
			year  = 100 * (  temp2 - 49  ) + temp_year + temp1
			
			clear io_d8
			using size select
			(6),        io_d8(1,6) = dat(1,4) * 100 + dat(7,8)
			(8),        io_d8 = dat
			(-8,-6),    io_d8 = (year * 10000) + (month*100) + day
			endusing
		end
		else io_d8 = 0
	end
	endusing
	
	xreturn
.end


function DateTimeToDec ,d
	in req dt		,System.DateTime
	in req fmt		,a20
	endparams
	record
		rtn		,d20
	endrecord
proc
	data val,string
	data mysize,int, %size(%atrim(fmt))
	rtn = 0
	if ((fmt == "YYYYMMDDHHMISSUUUUUU") .and. (mysize == 20)) then
	begin
		val = dt.ToString("yyyyMMddHHmmss")
		if (val.Equals("00010101000000")) then
		begin
			val = "00000000000000000000"
		end
		else
		begin
			data milsec, int, dt.Millisecond;
			data milSeconds, String, milsec.ToString();
			while (milSeconds.Length < 6)
			begin
				milSeconds = "0" + milSeconds;
			end
			val = val + milSeconds;
		end
	end
	else if ((fmt == "YYYYMMDDHHMISS") .and. (mysize == 14)) then
	begin
		val = dt.ToString("yyyyMMddHHmmss")
		if (val.Equals("00010101000000"))
			val = "00000000000000"
	end
	else if ((fmt .eq. "YYYYMMDDHHMMSS") .and. (mysize == 14)) then
	begin
		val = dt.ToString("yyyyMMddHHmmss")
		if (val.Equals("00010101000000"))
			val = "00000000000000"
	end
	else if ((fmt .eq. "YYYYMMDD") .and. (mysize == 8)) then
	begin
		val = dt.ToString("yyyyMMdd")
		if (val.Equals("00010101"))
			val = "00000000"
	end
	else if ((fmt .eq. "YYMMDD") .and. (mysize == 6)) then
	begin
		val = dt.ToString("yyMMdd")
		if (val.Equals("010101"))
			val = "000000"
	end
	else if ((fmt .eq. "YYYYJJJ") .and. (mysize == 7)) then
	begin
		val = dt.ToString("yyyyMMdd")
		val = val.Substring(0, 4)
		if (dt.DayOfYear < 10) then
			val = val + "00" + dt.DayOfYear.ToString()
		else
		begin
			if (dt.DayOfYear < 100) then
				val = val + "0" + dt.DayOfYear.ToString()
			else
				val = val + dt.DayOfYear.ToString()
		end
		if (val.Equals("0001001"))
			val = "0000000"
	end
	else if ((fmt .eq. "YYJJJ") .and. (mysize == 5)) then
	begin
		val = dt.ToString("yyMMdd")
		val = val.Substring(0, 2)
		if (dt.DayOfYear < 10) then
			val = val + "00" + dt.DayOfYear.ToString()
		else
		begin
			if (dt.DayOfYear < 100) then
				val = val + "0" + dt.DayOfYear.ToString()
			else
				val = val + dt.DayOfYear.ToString()
		end
		if (val.Equals("01001"))
			val = "00000"
	end
	else if (fmt .eq. "HHMM")
	begin
		if (mysize .eq. 6) then
			val = (dt.Hour * 10000) + (dt.Minute * 100) + dt.Second
		else
			val = (dt.Hour * 100) + dt.Minute
	end
	

	if(fmt .eqs. "MMDDYY") then
	begin
		data yyTemp, d4, dt.Year
		rtn(15:2) = dt.Month
		rtn(17:2) = dt.Day
		rtn(19:2) = yyTemp(3:2)
	end
	else if(fmt .eqs. "MMDDYYYY") then
	begin
		rtn(13:2) = dt.Month
		rtn(15:2) = dt.Day
		rtn(17:4) = dt.Year
	end
	else 
		rtn = val
	freturn rtn
end

function DecToDateTime ,System.DateTime
	in req sdt		,d
	in req fmt		,a14
	endparams
	record
		rtn		,d14
		
		ticks	,long
		yy		,int
		mt		,int
		dd		,int
		jday	,double
		hh		,int
		mm		,int
		ss		,int
		ml		,int
	endrecord
proc
	data val		,string
	data valstr	,string
	data dt		,System.Datetime
	data mysize,int, %size(sdt)
	
	try
	begin	
		dt = new System.DateTime(1999, 4,12)
		if ((fmt == "YYYYMMDDHHMISSUUUUUU") .and. (mysize == 20)) then
		begin
			yy = sdt(1:4)
			mt = sdt(5:2)
			dd = sdt(7:2)
			hh = sdt(9:2)
			mm = sdt(11:2)
			ss = sdt(13:2)
			ml = sdt(15:6)
			ml = ml / 1000
			dt = new System.DateTime(yy,mt,dd,hh,mm,ss,ml)
		end
		else if (((fmt == "YYYYMMDDHHMISS") || (fmt .eq. "YYYYMMDDHHMMSS")) .and. (mysize == 14)) then
		begin
			yy = sdt(1:4)
			mt = sdt(5:2)
			dd = sdt(7:2)
			hh = sdt(9:2)
			mm = sdt(11:2)
			ss = sdt(13:2)
			dt = new System.DateTime(yy,mt,dd,hh,mm,ss)
		end
		else if ((fmt .eq. "YYYYMMDD") .and. (mysize >= 7)) then
		begin
			if (sdt == 0) then
			begin
				dt = new System.DateTime()
			end
			else
			begin
				yy = (int)sdt(1:4)
				mt = (int)sdt(5:2)
				dd = (int)sdt(7:mysize - 6)
				dt = new System.DateTime(yy,mt,dd)
			end
		end
		else if ((fmt .eq. "YYMMDD") .and. (mysize >= 5)) then
		begin
			if (sdt == 0) then
			begin
				dt = new System.DateTime()
			end
			else
			begin
				yy = (int)sdt(1:2)
				mt = (int)sdt(3:2)
				dd = (int)sdt(5:mysize - 4)

				if((yy + 2000) > CultureInfo.CurrentCulture.Calendar.TwoDigitYearMax) then
					yy += 1900
				else
					yy += 2000
				dt = new System.DateTime(yy ,mt,dd)
			end
		end
		else if ((fmt .eq. "MMDDYYYY") .and. (mysize >= 7)) then
		begin
			if (sdt == 0) then
			begin
				dt = new System.DateTime()
			end
			else
			begin
				yy = (int)sdt(5:4)
				mt = (int)sdt(1:2)
				dd = (int)sdt(3:2)
				dt = new System.DateTime(yy,mt,dd)
			end
		end
		else if ((fmt .eq. "MMDDYY") .and. (mysize >= 5)) then
		begin
			if (sdt == 0) then
			begin
				dt = new System.DateTime()
			end
			else
			begin
				yy = (int)sdt(5:2)
				mt = (int)sdt(1:2)
				dd = (int)sdt(3:2)

				if((yy + 2000) > CultureInfo.CurrentCulture.Calendar.TwoDigitYearMax) then
					yy += 1900
				else
					yy += 2000
				dt = new System.DateTime(yy ,mt,dd)
			end
		end
		else if ((fmt .eq. "YYYYJJJ") .and. (mysize >= 5)) then
		begin
			if (sdt == 0) then
			begin
				dt = new System.DateTime()
			end
			else
			begin
				yy = sdt(1:4)
				dt = new System.DateTime(yy,1,1)
				dt = dt.AddDays(sdt(5:mysize - 4)-1)
			end
		end
		else if ((fmt .eq. "YYJJJ") .and. (mysize >= 3)) then
		begin
			yy = sdt(1:2)
			if((yy + 2000) > CultureInfo.CurrentCulture.Calendar.TwoDigitYearMax) then
				yy += 1900
			else
				yy += 2000
			dt = new System.DateTime(yy,1,1)
			dt = dt.AddDays(sdt(3:mysize - 2)-1)
		end
		else if (fmt .eq. "HHMM") then
		begin
			if (mysize .eq. 6) then
			begin
				dt = new System.DateTime()
				hh = sdt(1:2)
				mm = sdt(3:2)
				ss = sdt(5:2)
				dt = dt.AddHours(hh)
				dt = dt.AddMinutes(mm)
				dt = dt.AddSeconds(ss)
			end
			else
			begin
				dt = new System.DateTime()
				hh = sdt(1:2)
				mm = sdt(3:2)
				dt = dt.AddHours(hh)
				dt = dt.AddMinutes(mm)
			end
		end
		else
			throw new ApplicationException(string.Format("Failed to format date time with format {0} and data {1}", fmt, sdt))
	end
	catch(e)
		nop
	endtry
	
	freturn dt
end

function i8ToDateTime ,long
	in req sdt	,i8
	in opt fmt	,a14
	endparams
	
proc
	data dt		,System.Datetime
	data ticks	,long

	dt = new System.DateTime((sdt * 10), DateTimeKind.Utc)
	dt = dt.AddYears(1969)
	dt = TimeZone.CurrentTimeZone.ToLocalTime(dt); 
	ticks = dt.Ticks
	freturn ticks
end

function DateTimeToI8 ,long
	in req dt	,System.DateTime
	in opt fmt	,a14
	endparams
proc
	data ticks	,i8
	data basedt	,System.Datetime
	data dtmp	,System.Datetime

	basedt = new System.DateTime()
	basedt = basedt.AddYears(1969)
	dtmp = TimeZone.CurrentTimeZone.ToUniversalTime(dt);
	ticks = dtmp.Subtract(basedt).Ticks / 10
	freturn ticks
end