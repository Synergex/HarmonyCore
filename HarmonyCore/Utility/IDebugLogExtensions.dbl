import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Interface
import Renci.SshNet
import Newtonsoft.Json
import System.Diagnostics


namespace Harmony.Core.Utility

	public static class IDebugLogExtensions
		public static extension method LogInfo, void
			debugLog, @IDebugLogging
			message, @string
		proc
			if((int)debugLog.Level <= (int)LogLevel.Info)
			debugLog.LogMessage(LogLevel.Info, LogType.File | LogType.DebugView | LogType.Console, message)
		endmethod

		public static extension method LogInfo, void
			debugLog, @IDebugLogging
			formatString, @string
			{ParamArray}
			arguments, [#]@object
		proc
			if((int)debugLog.Level <= (int)LogLevel.Info)
			debugLog.LogMessage(LogLevel.Info, LogType.File | LogType.DebugView | LogType.Console, formatString, arguments)
		endmethod

		public static extension method LogTrace, void
			debugLog, @IDebugLogging
			formatString, @string
			{ParamArray}
			arguments, [#]@object
		proc
			if((int)debugLog.Level <= (int)LogLevel.Trace)
			begin
.ifdef DEBUG
				Trace.WriteLine(string.Format(formatString, arguments))
.endc
				debugLog.LogMessage(LogLevel.Trace, LogType.File | LogType.DebugView | LogType.Console, formatString, arguments)
			end
		endmethod

		public static extension method LogTrace, void
			debugLog, @IDebugLogging
			message, @string
		proc
			if((int)debugLog.Level <= (int)LogLevel.Trace)
			begin
.ifdef DEBUG
				Trace.WriteLine(string.Format(message))
.endc
				debugLog.LogMessage(LogLevel.Trace, LogType.File | LogType.DebugView | LogType.Console, message)
			end
		endmethod

		public static extension method LogDebug, void
			debugLog, @IDebugLogging
			formatString, @string
			{ParamArray}
			arguments, [#]@object
		proc
			if((int)debugLog.Level <= (int)LogLevel.Debug)
			debugLog.LogMessage(LogLevel.Debug, LogType.File | LogType.DebugView | LogType.Console, formatString, arguments)
		endmethod

		public static extension method LogException, void
			debugLog, @IDebugLogging
			ex, @Exception
			logLocation, @string
		proc
			if((int)debugLog.Level <= (int)LogLevel.Error)
			debugLog.LogMessage(LogLevel.Error, LogType.File | LogType.DebugView | LogType.Console | LogType.EventLog, string.Format("Logged Exception while passing through {0}, the exception was {1}", logLocation, ex))
		endmethod

	endclass

	public class MemoryHandleDebugLogHelper
		public TargetHandle, D_HANDLE
		public TargetLength, int
		public Trim, boolean
		public method MemoryHandleDebugLogHelper
			targetHandle, D_HANDLE
			targetLength, int
			default trim, boolean, false
		proc
			this.TargetHandle = targetHandle
			this.TargetLength = targetLength
			this.Trim = trim
		endmethod


		public override method ToString, @string
			structure tmpAlpha
				fld	,a1
			endstructure
		proc
			if(Trim) then
				mreturn %atrim(^m(tmpAlpha(1:TargetLength), TargetHandle))
			else
				mreturn ^m(tmpAlpha(1:TargetLength), TargetHandle)
		endmethod

	endclass

	public class MemoryHandleImpliedDebugLogHelper
		public TargetHandle, D_HANDLE
		public TargetLength, int

		public method MemoryHandleImpliedDebugLogHelper
			targetHandle, D_HANDLE
			targetLength, int
		proc
			this.TargetHandle = targetHandle
			this.TargetLength = targetLength
		endmethod


		public override method ToString, @string
			structure tmpAlpha
				fld	,a1
			endstructure
		proc
			mreturn %string(%implied(^m(tmpAlpha(1:TargetLength), TargetHandle)))
		endmethod

	endclass

	public class MemoryHandleIntegerDebugLogHelper
		public TargetHandle, D_HANDLE
		public TargetLength, int

		public method MemoryHandleIntegerDebugLogHelper
			targetHandle, D_HANDLE
			targetLength, int
		proc
			this.TargetHandle = targetHandle
			this.TargetLength = targetLength
		endmethod


		public override method ToString, @string
			structure tmpAlpha
				fld	,a1
			endstructure
		proc
			mreturn %string(%integer(^m(tmpAlpha(1:TargetLength), TargetHandle)))
		endmethod

	endclass

	public class ASCIIArrayDebugLogHelper
		public Segment, @ArraySegment<byte>

		public method ASCIIArrayDebugLogHelper
			segment, @ArraySegment<byte>
		proc
			this.Segment = segment
		endmethod

		public method ASCIIArrayDebugLogHelper
			segment, [#]byte
			index, int
			count, int
		proc
			this.Segment = new ArraySegment<byte>(segment, index, count)
		endmethod

		public override method ToString, @string
		proc
			mreturn Encoding.ASCII.GetString(Segment.Array, Segment.Offset, Segment.Count).Replace(%char(10), "<LF>").Replace(%char(13), "<CR>")
		endmethod
	endclass

	public class SSHConnectionDebugLogHelper
		public ConnectInfo, @ConnectionInfo

		public method SSHConnectionDebugLogHelper
			connectInfo, @ConnectionInfo
		proc
			this.ConnectInfo = connectInfo
		endmethod

		public override method ToString, @string
		proc
			mreturn string.Format("Renci.SSH.ConnectionInfo Host: {0} Port: {1} Username: {2} KeyEx: {3} Server Encryption: {4} Compression: {5} Server Version: {6}", 
			&	ConnectInfo.Host, ConnectInfo.Port, ConnectInfo.Username, ConnectInfo.CurrentKeyExchangeAlgorithm, ConnectInfo.CurrentServerEncryption, ConnectInfo.CurrentServerCompressionAlgorithm, ConnectInfo.ServerVersion)
		endmethod
	endclass

	class JsonLogHelper
		public obj, @object
		public method JsonLogHelper
			arg, @object
			endparams
		proc
			obj = arg
		endmethod

		public override method ToString, @string
		proc
			if(obj == ^null) then
				mreturn "null"
			else
				mreturn JsonConvert.SerializeObject(obj)
		endmethod
	
	endclass

endnamespace
