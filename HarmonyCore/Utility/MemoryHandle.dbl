import System
import System.Collections.Generic
import System.Text


namespace Harmony.Core.Utility

    public class MemoryHandle implements IDisposable
        public Handle, @Synergex.SynergyDE.AlphaDesc


        static MakeNew, @System.Reflection.ConstructorInvoker 
        static method MemoryHandle
        proc
            data constructor, @System.Reflection.ConstructorInfo
            data type, @System.Type
            data constructors, [#]@System.Reflection.ConstructorInfo
            type = ^typeof(Synergex.SynergyDE.PinAlphaDesc)
            constructors = type.GetConstructors(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)
            constructor = type.GetConstructor(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, new Type[#] { ^typeof(int) })
            if(constructor == ^null)
                throw new System.InvalidOperationException("Could not find constructor for PinAlphaDesc is this a Debug build of synrnt?")
            MakeNew = System.Reflection.ConstructorInvoker.Create(constructor)
        endmethod


        public static method GetMemoryHandle, @MemoryHandle
            size, int
        proc
            mreturn new MemoryHandle() { Handle = (@Synergex.SynergyDE.AlphaDesc)MakeNew.Invoke(size) }
        endmethod

        public method Range, @Synergex.SynergyDE.AlphaDesc
            start, int
            length, int
        proc
            if(Handle == ^null)
                throw new System.InvalidOperationException("MemoryHandle is not initialized or already disposed")

            mreturn (@Synergex.SynergyDE.AlphaDesc)Handle.AbsRange(start, (start -1) + length)
        endmethod

        public method Only, @Synergex.SynergyDE.AlphaDesc
            length, int
        proc
            if(Handle == ^null)
                throw new System.InvalidOperationException("MemoryHandle is not initialized or already disposed")

            mreturn (@Synergex.SynergyDE.AlphaDesc)Handle.AbsRange(1, length)
        endmethod

        public method Dispose, void
        proc
            ;;not actually anything to do here right now
            Handle = ^null
        endmethod

	endclass

endnamespace
