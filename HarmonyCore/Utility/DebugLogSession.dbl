import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Interface
import System.Threading
import System.Diagnostics

namespace Harmony.Core.Utility

	public class DebugLogSession
		static sAsyncLocalString, @AsyncLocal<string>, new AsyncLocal<string>()
		
		public static method StartLogSession, void
			sessionName, @string
		proc
			sAsyncLocalString.Value = sessionName ?? Guid.NewGuid().ToString()
		endmethod
		
		public static method EndLogSession, void
		proc
			sAsyncLocalString.Value = string.Empty
		endmethod

		public static property CurrentSessionId, @string
			method get
			proc
				mreturn sAsyncLocalString.Value
			endmethod
		endproperty


		public static readwrite property Logging, @IDebugLogging, new NullLogger()

		private class NullLogger implements IDebugLogging
			public virtual method LogMessage, void
				level, LogLevel 
				logKind, LogType 
				message, String 
				endparams
			proc
				if((int)level > (int)LogLevel.Error)
				Debug.WriteLine("SessionId '{0}' {1}", DebugLogSession.CurrentSessionId, message)
			endmethod
			
			
			
			public virtual method LogMessage, void
				level, LogLevel 
				logKind, LogType 
				formatString, String 
				{ParamArray}
				args, [#]@object
				endparams
			proc
				if((int)level > (int)LogLevel.Error)
				Debug.WriteLine("SessionId '{0}' {1}", DebugLogSession.CurrentSessionId, string.Format(formatString, args))
			endmethod
			
			
			
			public virtual property Level, LogLevel
				method get
				proc
					mreturn LogLevel.Error
				endmethod
			endproperty
			
			
		endclass



	endclass


	public class ConsoleLogger implements IDebugLogging
		public method ConsoleLogger
			level, LogLevel 
			endparams
		proc
			this.Level = level
		endmethod

		public virtual method LogMessage, void
			level, LogLevel 
			logKind, LogType 
			message, String 
			endparams
		proc
			if((int)level >= (int)this.Level)
			begin
				data tempStr = string.Format("SessionId '{0}' {1}", DebugLogSession.CurrentSessionId, message)
				Console.WriteLine(tempStr)
				Trace.WriteLine(tempStr)
			end

		endmethod
			
			
			
		public virtual method LogMessage, void
			level, LogLevel 
			logKind, LogType 
			formatString, String 
			{ParamArray}
			args, [#]@object
			endparams
		proc
			if((int)level >= (int)this.Level)
			begin
				data tempStr = string.Format("SessionId '{0}' {1}", DebugLogSession.CurrentSessionId, string.Format(formatString, args))
				Console.WriteLine(tempStr)
				Trace.WriteLine(tempStr)
			end

		endmethod
			

		public readwrite property Level, LogLevel

	endclass
endnamespace
