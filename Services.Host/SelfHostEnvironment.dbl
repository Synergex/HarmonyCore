;;*****************************************************************************
;;
;; Title:       SelfHostEnvironment.dbl
;;
;; Description: Environment setup class for a Harmony Core self host program
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore
import Microsoft.AspNetCore.Hosting
import System.Collections.Generic
import System.IO
import System.Runtime.InteropServices
import System.Text
import Services
import Services.Models

namespace Services.Host

    public partial static class SelfHostEnvironment

        ;;Declare the InitializeCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to initialize the self hosting environment
        partial static method InitializeCustom, void

        endmethod

        public static method Initialize, void

        proc
            ;;Allows select to join when the keys in the file are not the same type as the keys in the code
            data status, int
            xcall setlog("SYNSEL_NUMALPHA_KEYS", 1, status)

            ;;Allows connections to older xfServer services
            xcall setlog("SRV_COMPAT", 1, status)

            ;;Configure the test environment (set logicals, create files in a known state, etc.)
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)
            setLogicals()
            deleteFiles()
            createFiles()

            ;;If we have an InitializeCustom method, call it
            InitializeCustom()

        endmethod

        ;;Declare the CleanupCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to cleanup the self hosting environment before close
        partial static method CleanupCustom, void

        endmethod

        public static method Cleanup, void

        proc
            ;;Delete the data files
            deleteFiles()

            ;;If we have a CleanupCustom method, call it
            CleanupCustom()

        endmethod

        ;;Declare the SetLogicalsCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to define logical names
        partial static method SetLogicalsCustom, void
            required in logicals, @List<string>
        endmethod

        private static method setLogicals, void
        proc
            data sampleDataFolder = findRelativeFolderForAssembly("SampleData")
            Startup.LogicalNames = new List<string>()
            data logical = String.Empty
            data fileSpec = String.Empty

            fileSpec = "DAT:customers.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:customer_notes.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:items.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:orders.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:order_items.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:vendors.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:CUSTOMER_EX.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:nonuniquepk.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:differentpk.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:testcar.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:testcarlot.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:testcarowner1.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:testcarowner2.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:testcarowner3.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            ;;If we have a SetLogicalsCustom method, call it
            SetLogicalsCustom(Startup.LogicalNames)

            ;;Now we'll check each logical. If it already has a value we'll do nothing, otherwise
            ;;we'll set the logical to point to the local folder whose name is identified by the
            ;;user-defined token DATA_FOLDER
            foreach logical in Startup.LogicalNames
            begin
                data sts, int
                data translation, a80
                ;;Is it set?
                xcall getlog(logical,translation,sts)
                if (!sts)
                begin
                    ;;No, we'll set it to SampleData
                    xcall setlog(logical,sampleDataFolder,sts)
                end
            end

        endmethod

        private static method createFiles, void
        proc
            data chout, int
            data dataFile, string
            data fileExtension, a10
            data xdlFile, string

            data customersData = loadCustomers()
            data customerNotesData = loadCustomerNotes()
            data itemsData = loadItems()
            data ordersData = loadOrders()
            data orderItemsData = loadOrderItems()
            data vendorsData = loadVendors()
            data customerExsData = loadCustomerExs()
            data nonuniquepksData = loadNonuniquepks()
            data differentpksData = loadDifferentpks()
            data testcarsData = loadTestcars()
            data testcarlotsData = loadTestcarlots()
            data testcarowner1sData = loadTestcarowner1s()
            data testcarowner2sData = loadTestcarowner2s()
            data testcarowner3sData = loadTestcarowner3s()

            ;;Create and load the customers file

            dataFile = "DAT:customers.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data customer, @Customer
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customer in customersData
                store(chout,customer.SynergyRecord)
            close chout

            ;;Create and load the customerNotes file

            dataFile = "DAT:customer_notes.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data customerNote, @CustomerNote
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customerNote in customerNotesData
                store(chout,customerNote.SynergyRecord)
            close chout

            ;;Create and load the items file

            dataFile = "DAT:items.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data item, @Item
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach item in itemsData
                store(chout,item.SynergyRecord)
            close chout

            ;;Create and load the orders file

            dataFile = "DAT:orders.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data order, @Order
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach order in ordersData
                store(chout,order.SynergyRecord)
            close chout

            ;;Create and load the orderItems file

            dataFile = "DAT:order_items.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data orderItem, @OrderItem
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach orderItem in orderItemsData
                store(chout,orderItem.SynergyRecord)
            close chout

            ;;Create and load the vendors file

            dataFile = "DAT:vendors.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data vendor, @Vendor
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach vendor in vendorsData
                store(chout,vendor.SynergyRecord)
            close chout

            ;;Create and load the customerExs file

            dataFile = "DAT:CUSTOMER_EX.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data customerEx, @CustomerEx
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customerEx in customerExsData
                store(chout,customerEx.SynergyRecord)
            close chout

            ;;Create and load the nonuniquepks file

            dataFile = "DAT:nonuniquepk.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data nonuniquepk, @Nonuniquepk
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach nonuniquepk in nonuniquepksData
                store(chout,nonuniquepk.SynergyRecord)
            close chout

            ;;Create and load the differentpks file

            dataFile = "DAT:differentpk.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data differentpk, @Differentpk
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach differentpk in differentpksData
                store(chout,differentpk.SynergyRecord)
            close chout

            ;;Create and load the testcars file

            dataFile = "DAT:testcar.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data testcar, @Testcar
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcar in testcarsData
                store(chout,testcar.SynergyRecord)
            close chout

            ;;Create and load the testcarlots file

            dataFile = "DAT:testcarlot.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data testcarlot, @Testcarlot
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarlot in testcarlotsData
                store(chout,testcarlot.SynergyRecord)
            close chout

            ;;Create and load the testcarowner1s file

            dataFile = "DAT:testcarowner1.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data testcarowner1, @Testcarowner1
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarowner1 in testcarowner1sData
                store(chout,testcarowner1.SynergyRecord)
            close chout

            ;;Create and load the testcarowner2s file

            dataFile = "DAT:testcarowner2.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data testcarowner2, @Testcarowner2
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarowner2 in testcarowner2sData
                store(chout,testcarowner2.SynergyRecord)
            close chout

            ;;Create and load the testcarowner3s file

            dataFile = "DAT:testcarowner3.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data testcarowner3, @Testcarowner3
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach testcarowner3 in testcarowner3sData
                store(chout,testcarowner3.SynergyRecord)
            close chout

        endmethod

        private static method deleteFiles, void
        proc
            ;;Delete the customers file
            try
            begin
                xcall delet("DAT:customers.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the customerNotes file
            try
            begin
                xcall delet("DAT:customer_notes.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the items file
            try
            begin
                xcall delet("DAT:items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orders file
            try
            begin
                xcall delet("DAT:orders.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orderItems file
            try
            begin
                xcall delet("DAT:order_items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the vendors file
            try
            begin
                xcall delet("DAT:vendors.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the customerExs file
            try
            begin
                xcall delet("DAT:CUSTOMER_EX.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the nonuniquepks file
            try
            begin
                xcall delet("DAT:nonuniquepk.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the differentpks file
            try
            begin
                xcall delet("DAT:differentpk.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcars file
            try
            begin
                xcall delet("DAT:testcar.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarlots file
            try
            begin
                xcall delet("DAT:testcarlot.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarowner1s file
            try
            begin
                xcall delet("DAT:testcarowner1.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarowner2s file
            try
            begin
                xcall delet("DAT:testcarowner2.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the testcarowner3s file
            try
            begin
                xcall delet("DAT:testcarowner3.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

        endmethod

        public static method loadCustomers, @List<Customer>
        proc
            data dataFile = "DAT:customers.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 161)
            data customerCh, int, 0
            data customerRec, strCustomer
            data customersData = new List<Customer>()
            data grfa, a10
            open(customerCh,i:s,textFile)
            repeat
            begin
                reads(customerCh,customerRec,eof)
                customersData.Add(new Customer(customerRec, grfa))
            end
        eof,
            close customerCh
            mreturn customersData
        endmethod

        public static method loadCustomerNotes, @List<CustomerNote>
        proc
            data dataFile = "DAT:customer_notes.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 30729)
            data customerNoteCh, int, 0
            data customerNoteRec, strCustomerNote
            data customerNotesData = new List<CustomerNote>()
            data grfa, a10
            open(customerNoteCh,i:s,textFile)
            repeat
            begin
                reads(customerNoteCh,customerNoteRec,eof)
                customerNotesData.Add(new CustomerNote(customerNoteRec, grfa))
            end
        eof,
            close customerNoteCh
            mreturn customerNotesData
        endmethod

        public static method loadItems, @List<Item>
        proc
            data dataFile = "DAT:items.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 151)
            data itemCh, int, 0
            data itemRec, strItem
            data itemsData = new List<Item>()
            data grfa, a10
            open(itemCh,i:s,textFile)
            repeat
            begin
                reads(itemCh,itemRec,eof)
                itemsData.Add(new Item(itemRec, grfa))
            end
        eof,
            close itemCh
            mreturn itemsData
        endmethod

        public static method loadOrders, @List<Order>
        proc
            data dataFile = "DAT:orders.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 100)
            data orderCh, int, 0
            data orderRec, strOrder
            data ordersData = new List<Order>()
            data grfa, a10
            open(orderCh,i:s,textFile)
            repeat
            begin
                reads(orderCh,orderRec,eof)
                ordersData.Add(new Order(orderRec, grfa))
            end
        eof,
            close orderCh
            mreturn ordersData
        endmethod

        public static method loadOrderItems, @List<OrderItem>
        proc
            data dataFile = "DAT:order_items.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 100)
            data orderItemCh, int, 0
            data orderItemRec, strOrderItem
            data orderItemsData = new List<OrderItem>()
            data grfa, a10
            open(orderItemCh,i:s,textFile)
            repeat
            begin
                reads(orderItemCh,orderItemRec,eof)
                orderItemsData.Add(new OrderItem(orderItemRec, grfa))
            end
        eof,
            close orderItemCh
            mreturn orderItemsData
        endmethod

        public static method loadVendors, @List<Vendor>
        proc
            data dataFile = "DAT:vendors.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 135)
            data vendorCh, int, 0
            data vendorRec, strVendor
            data vendorsData = new List<Vendor>()
            data grfa, a10
            open(vendorCh,i:s,textFile)
            repeat
            begin
                reads(vendorCh,vendorRec,eof)
                vendorsData.Add(new Vendor(vendorRec, grfa))
            end
        eof,
            close vendorCh
            mreturn vendorsData
        endmethod

        public static method loadCustomerExs, @List<CustomerEx>
        proc
            data dataFile = "DAT:CUSTOMER_EX.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 134)
            data customerExCh, int, 0
            data customerExRec, strCustomerEx
            data customerExsData = new List<CustomerEx>()
            data grfa, a10
            open(customerExCh,i:s,textFile)
            repeat
            begin
                reads(customerExCh,customerExRec,eof)
                customerExsData.Add(new CustomerEx(customerExRec, grfa))
            end
        eof,
            close customerExCh
            mreturn customerExsData
        endmethod

        public static method loadNonuniquepks, @List<Nonuniquepk>
        proc
            data dataFile = "DAT:nonuniquepk.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 36)
            data nonuniquepkCh, int, 0
            data nonuniquepkRec, strNonuniquepk
            data nonuniquepksData = new List<Nonuniquepk>()
            data grfa, a10
            open(nonuniquepkCh,i:s,textFile)
            repeat
            begin
                reads(nonuniquepkCh,nonuniquepkRec,eof)
                nonuniquepksData.Add(new Nonuniquepk(nonuniquepkRec, grfa))
            end
        eof,
            close nonuniquepkCh
            mreturn nonuniquepksData
        endmethod

        public static method loadDifferentpks, @List<Differentpk>
        proc
            data dataFile = "DAT:differentpk.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 36)
            data differentpkCh, int, 0
            data differentpkRec, strDifferentpk
            data differentpksData = new List<Differentpk>()
            data grfa, a10
            open(differentpkCh,i:s,textFile)
            repeat
            begin
                reads(differentpkCh,differentpkRec,eof)
                differentpksData.Add(new Differentpk(differentpkRec, grfa))
            end
        eof,
            close differentpkCh
            mreturn differentpksData
        endmethod

        public static method loadTestcars, @List<Testcar>
        proc
            data dataFile = "DAT:testcar.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 50)
            data testcarCh, int, 0
            data testcarRec, strTestcar
            data testcarsData = new List<Testcar>()
            data grfa, a10
            open(testcarCh,i:s,textFile)
            repeat
            begin
                reads(testcarCh,testcarRec,eof)
                testcarsData.Add(new Testcar(testcarRec, grfa))
            end
        eof,
            close testcarCh
            mreturn testcarsData
        endmethod

        public static method loadTestcarlots, @List<Testcarlot>
        proc
            data dataFile = "DAT:testcarlot.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 26)
            data testcarlotCh, int, 0
            data testcarlotRec, strTestcarlot
            data testcarlotsData = new List<Testcarlot>()
            data grfa, a10
            open(testcarlotCh,i:s,textFile)
            repeat
            begin
                reads(testcarlotCh,testcarlotRec,eof)
                testcarlotsData.Add(new Testcarlot(testcarlotRec, grfa))
            end
        eof,
            close testcarlotCh
            mreturn testcarlotsData
        endmethod

        public static method loadTestcarowner1s, @List<Testcarowner1>
        proc
            data dataFile = "DAT:testcarowner1.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 26)
            data testcarowner1Ch, int, 0
            data testcarowner1Rec, strTestcarowner1
            data testcarowner1sData = new List<Testcarowner1>()
            data grfa, a10
            open(testcarowner1Ch,i:s,textFile)
            repeat
            begin
                reads(testcarowner1Ch,testcarowner1Rec,eof)
                testcarowner1sData.Add(new Testcarowner1(testcarowner1Rec, grfa))
            end
        eof,
            close testcarowner1Ch
            mreturn testcarowner1sData
        endmethod

        public static method loadTestcarowner2s, @List<Testcarowner2>
        proc
            data dataFile = "DAT:testcarowner2.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 26)
            data testcarowner2Ch, int, 0
            data testcarowner2Rec, strTestcarowner2
            data testcarowner2sData = new List<Testcarowner2>()
            data grfa, a10
            open(testcarowner2Ch,i:s,textFile)
            repeat
            begin
                reads(testcarowner2Ch,testcarowner2Rec,eof)
                testcarowner2sData.Add(new Testcarowner2(testcarowner2Rec, grfa))
            end
        eof,
            close testcarowner2Ch
            mreturn testcarowner2sData
        endmethod

        public static method loadTestcarowner3s, @List<Testcarowner3>
        proc
            data dataFile = "DAT:testcarowner3.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT"), StringComparison.CurrentCultureIgnoreCase), 26)
            data testcarowner3Ch, int, 0
            data testcarowner3Rec, strTestcarowner3
            data testcarowner3sData = new List<Testcarowner3>()
            data grfa, a10
            open(testcarowner3Ch,i:s,textFile)
            repeat
            begin
                reads(testcarowner3Ch,testcarowner3Rec,eof)
                testcarowner3sData.Add(new Testcarowner3(testcarowner3Rec, grfa))
            end
        eof,
            close testcarowner3Ch
            mreturn testcarowner3sData
        endmethod

        private static method findRelativeFolderForAssembly, string
            folderName, string
        proc
            data assemblyLocation = ^typeof(SelfHostEnvironment).Assembly.Location
            data currentFolder = Path.GetDirectoryName(assemblyLocation)
            data rootPath = Path.GetPathRoot(currentFolder)
            while(currentFolder != rootPath)
            begin
                if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
                    mreturn Path.Combine(currentFolder, folderName)
                else
                begin
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) then
                        currentFolder = Path.GetFullPath(currentFolder + "..\")
                    else
                        currentFolder = Path.GetFullPath(currentFolder + "../")
                end
            end
            mreturn ^null
        endmethod

		public static method EnsurePlatformSpecificLineEndings, void
            filePath, string
            minLineLength, int
        proc
            data content = File.ReadAllBytes(filePath)
            data allBytes, @List<byte>, new List<byte>()
            data lineBytes, @List<byte>, new List<byte>()
            data i = 1
            while (i <= content.Length)
            begin 
                data c, char
                c = %char(content[i])
                if (c == %char(13) || c == %char(10)) then
                begin
                    allBytes.AddRange(lineBytes)

                    if (lineBytes.Count >= minLineLength) then
                    begin
                        allBytes.AddRange(Encoding.ASCII.GetBytes(Environment.NewLine))
                        if (c == %char(13) && i + 1 <= content.Length && %char(content[i + 1]) == %char(10))
                            i = i + 1
                    end
                    else
                    begin
                        if (c == %char(13) && i + 1 <= content.Length && %char(content[i + 1]) == %char(10)) then
                        begin
                            allBytes.AddRange(Encoding.ASCII.GetBytes(Environment.NewLine))
                            i = i + 1
                        end
                        else
                        begin
                            allBytes.Add(content[i])
                        end
                    end
                    lineBytes.Clear()
                end
                else
                begin
                    lineBytes.Add(content[i])
                end
                
                i = i + 1
            end

            allBytes.AddRange(lineBytes)
            File.WriteAllBytes(filePath, allBytes.ToArray())
        endmethod

    endclass

endnamespace
