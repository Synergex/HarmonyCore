;;*****************************************************************************
;;
;; Title:       SelfHostEnvironment.dbl
;;
;; Description: Environment setup class for a Harmony Core self host program
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore
import Microsoft.AspNetCore.Hosting
import System.Collections.Generic
import System.IO
import System.Text
import Services
import Services.Models

namespace Services.Host

    public partial static class SelfHostEnvironment

        ;;Declare the InitializeCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to initialize the self hosting environment
        partial static method InitializeCustom, void

        endmethod

        public static method Initialize, void

        proc
            ;;Allows select to join when the keys in the file are not the same type as the keys in the code
            data status, int
            xcall setlog("SYNSEL_NUMALPHA_KEYS", 1, status) 

            ;;Configure the test environment (set logicals, create files in a known state, etc.)
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)
            setLogicals()
            deleteFiles()
            createFiles()

            ;;If we have an InitializeCustom method, call it
            InitializeCustom()

        endmethod

        ;;Declare the CleanupCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to cleanup the self hosting environment before close
        partial static method CleanupCustom, void

        endmethod

        public static method Cleanup, void

        proc
            ;;Delete the data files
            deleteFiles()

            ;;If we have a CleanupCustom method, call it
            CleanupCustom()

        endmethod

        ;;Declare the SetLogicalsCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to define logical names
        partial static method SetLogicalsCustom, void
            required in logicals, @List<string>
        endmethod

        private static method setLogicals, void
        proc
            data sampleDataFolder = findRelativeFolderForAssembly("SampleData")
            Startup.LogicalNames = new List<string>()
            data logical = String.Empty
            data fileSpec = String.Empty

            fileSpec = "DAT:customers.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:customer_notes.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:items.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:orders.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:order_items.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:vendors.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:CUSTOMER_EX.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:nonuniquepk.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:differentpk.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            ;;If we have a SetLogicalsCustom method, call it
            SetLogicalsCustom(Startup.LogicalNames)

            ;;Now we'll check each logical. If it already has a value we'll do nothing, otherwise
            ;;we'll set the logical to point to the local folder whose name is identified by the
            ;;user-defined token DATA_FOLDER
            foreach logical in Startup.LogicalNames
            begin
                data sts, int
                data translation, a80
                ;;Is it set?
                xcall getlog(logical,translation,sts)
                if (!sts)
                begin
                    ;;No, we'll set it to SampleData
                    xcall setlog(logical,sampleDataFolder,sts)
                end
            end

        endmethod

        private static method createFiles, void
        proc
            data chout, int
            data dataFile, string
            data xdlFile, string

            data customers = loadCustomers()
            data customerNotes = loadCustomerNotes()
            data items = loadItems()
            data orders = loadOrders()
            data orderItems = loadOrderItems()
            data vendors = loadVendors()
            data customerExs = loadCustomerExs()
            data nonuniquepks = loadNonuniquepks()
            data differentpks = loadDifferentpks()

            ;;Create and load the customers file

            dataFile = "DAT:customers.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data customer, @Customer
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customer in customers
                store(chout,customer.SynergyRecord)
            close chout

            ;;Create and load the customerNotes file

            dataFile = "DAT:customer_notes.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data customerNote, @CustomerNote
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customerNote in customerNotes
                store(chout,customerNote.SynergyRecord)
            close chout

            ;;Create and load the items file

            dataFile = "DAT:items.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data item, @Item
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach item in items
                store(chout,item.SynergyRecord)
            close chout

            ;;Create and load the orders file

            dataFile = "DAT:orders.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data order, @Order
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach order in orders
                store(chout,order.SynergyRecord)
            close chout

            ;;Create and load the orderItems file

            dataFile = "DAT:order_items.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data orderItem, @OrderItem
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach orderItem in orderItems
                store(chout,orderItem.SynergyRecord)
            close chout

            ;;Create and load the vendors file

            dataFile = "DAT:vendors.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data vendor, @Vendor
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach vendor in vendors
                store(chout,vendor.SynergyRecord)
            close chout

            ;;Create and load the customerExs file

            dataFile = "DAT:CUSTOMER_EX.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data customerEx, @CustomerEx
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customerEx in customerExs
                store(chout,customerEx.SynergyRecord)
            close chout

            ;;Create and load the nonuniquepks file

            dataFile = "DAT:nonuniquepk.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data nonuniquepk, @Nonuniquepk
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach nonuniquepk in nonuniquepks
                store(chout,nonuniquepk.SynergyRecord)
            close chout

            ;;Create and load the differentpks file

            dataFile = "DAT:differentpk.ism"
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

            data differentpk, @Differentpk
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach differentpk in differentpks
                store(chout,differentpk.SynergyRecord)
            close chout

        endmethod

        private static method deleteFiles, void
        proc
            ;;Delete the customers file
            try
            begin
                xcall delet("DAT:customers.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the customerNotes file
            try
            begin
                xcall delet("DAT:customer_notes.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the items file
            try
            begin
                xcall delet("DAT:items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orders file
            try
            begin
                xcall delet("DAT:orders.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orderItems file
            try
            begin
                xcall delet("DAT:order_items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the vendors file
            try
            begin
                xcall delet("DAT:vendors.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the customerExs file
            try
            begin
                xcall delet("DAT:CUSTOMER_EX.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the nonuniquepks file
            try
            begin
                xcall delet("DAT:nonuniquepk.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the differentpks file
            try
            begin
                xcall delet("DAT:differentpk.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

        endmethod

        public static method loadCustomers, @List<Customer>
        proc
            data dataFile = "DAT:customers.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data customerCh, int, 0
            data customerRec, strCustomer
            data customers = new List<Customer>()
            data grfa, a10
            open(customerCh,i:s,textFile)
            repeat
            begin
                reads(customerCh,customerRec,eof)
                customers.Add(new Customer(customerRec, grfa))
            end
        eof,
            close customerCh
            mreturn customers
        endmethod

        public static method loadCustomerNotes, @List<CustomerNote>
        proc
            data dataFile = "DAT:customer_notes.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data customerNoteCh, int, 0
            data customerNoteRec, strCustomerNote
            data customerNotes = new List<CustomerNote>()
            data grfa, a10
            open(customerNoteCh,i:s,textFile)
            repeat
            begin
                reads(customerNoteCh,customerNoteRec,eof)
                customerNotes.Add(new CustomerNote(customerNoteRec, grfa))
            end
        eof,
            close customerNoteCh
            mreturn customerNotes
        endmethod

        public static method loadItems, @List<Item>
        proc
            data dataFile = "DAT:items.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data itemCh, int, 0
            data itemRec, strItem
            data items = new List<Item>()
            data grfa, a10
            open(itemCh,i:s,textFile)
            repeat
            begin
                reads(itemCh,itemRec,eof)
                items.Add(new Item(itemRec, grfa))
            end
        eof,
            close itemCh
            mreturn items
        endmethod

        public static method loadOrders, @List<Order>
        proc
            data dataFile = "DAT:orders.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data orderCh, int, 0
            data orderRec, strOrder
            data orders = new List<Order>()
            data grfa, a10
            open(orderCh,i:s,textFile)
            repeat
            begin
                reads(orderCh,orderRec,eof)
                orders.Add(new Order(orderRec, grfa))
            end
        eof,
            close orderCh
            mreturn orders
        endmethod

        public static method loadOrderItems, @List<OrderItem>
        proc
            data dataFile = "DAT:order_items.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data orderItemCh, int, 0
            data orderItemRec, strOrderItem
            data orderItems = new List<OrderItem>()
            data grfa, a10
            open(orderItemCh,i:s,textFile)
            repeat
            begin
                reads(orderItemCh,orderItemRec,eof)
                orderItems.Add(new OrderItem(orderItemRec, grfa))
            end
        eof,
            close orderItemCh
            mreturn orderItems
        endmethod

        public static method loadVendors, @List<Vendor>
        proc
            data dataFile = "DAT:vendors.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data vendorCh, int, 0
            data vendorRec, strVendor
            data vendors = new List<Vendor>()
            data grfa, a10
            open(vendorCh,i:s,textFile)
            repeat
            begin
                reads(vendorCh,vendorRec,eof)
                vendors.Add(new Vendor(vendorRec, grfa))
            end
        eof,
            close vendorCh
            mreturn vendors
        endmethod

        public static method loadCustomerExs, @List<CustomerEx>
        proc
            data dataFile = "DAT:CUSTOMER_EX.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data customerExCh, int, 0
            data customerExRec, strCustomerEx
            data customerExs = new List<CustomerEx>()
            data grfa, a10
            open(customerExCh,i:s,textFile)
            repeat
            begin
                reads(customerExCh,customerExRec,eof)
                customerExs.Add(new CustomerEx(customerExRec, grfa))
            end
        eof,
            close customerExCh
            mreturn customerExs
        endmethod

        public static method loadNonuniquepks, @List<Nonuniquepk>
        proc
            data dataFile = "DAT:nonuniquepk.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data nonuniquepkCh, int, 0
            data nonuniquepkRec, strNonuniquepk
            data nonuniquepks = new List<Nonuniquepk>()
            data grfa, a10
            open(nonuniquepkCh,i:s,textFile)
            repeat
            begin
                reads(nonuniquepkCh,nonuniquepkRec,eof)
                nonuniquepks.Add(new Nonuniquepk(nonuniquepkRec, grfa))
            end
        eof,
            close nonuniquepkCh
            mreturn nonuniquepks
        endmethod

        public static method loadDifferentpks, @List<Differentpk>
        proc
            data dataFile = "DAT:differentpk.ism"
            data textFile = dataFile.ToLower().Replace(".ism",".txt")
            data differentpkCh, int, 0
            data differentpkRec, strDifferentpk
            data differentpks = new List<Differentpk>()
            data grfa, a10
            open(differentpkCh,i:s,textFile)
            repeat
            begin
                reads(differentpkCh,differentpkRec,eof)
                differentpks.Add(new Differentpk(differentpkRec, grfa))
            end
        eof,
            close differentpkCh
            mreturn differentpks
        endmethod

        private static method findRelativeFolderForAssembly, string
            folderName, string
        proc
            data assemblyLocation = ^typeof(SelfHostEnvironment).Assembly.Location
            data currentFolder = Path.GetDirectoryName(assemblyLocation)
            data rootPath = Path.GetPathRoot(currentFolder)
            while(currentFolder != rootPath)
            begin
                if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
                    mreturn Path.Combine(currentFolder, folderName)
                else
                    currentFolder = Path.GetFullPath(currentFolder + "..\")
            end
            mreturn ^null
        endmethod

    endclass

endnamespace