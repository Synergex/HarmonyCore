import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Context
import System.IO
import System.Linq
import Microsoft.Extensions.DependencyInjection
import Microsoft.VisualStudio.TestTools.UnitTesting
import System.Threading.Tasks
import Newtonsoft.Json.Linq
import StreamJsonRpc
import Harmony.Core.Utility
import TraditionalBridge.Models

namespace TraditionalBridge.TestClient

    {TestClass}
    public class InteropTests

        public method InteropTests
			endparams
		proc
			contextPool = GetContextPool<ExternalCallContext>()
			data sp = new ServiceCollection().BuildServiceProvider()

			context = contextPool.MakeContext(sp)
		endmethod

        contextPool, @ExternalContextPool<ExternalCallContext>
		context, @ExternalCallContext
        {TestCleanup}
		public method Cleanup, void
		proc
			contextPool.ReturnContext(context)
			contextPool.TrimPool(0)
			contextPool.Dispose()
			contextPool = ^null
			context = ^null
		endmethod


		private static method findRelativeFolderForAssembly, string
			folderName, string
		proc
			data assemblyLocation = ^typeof(DateTimeTests).Assembly.Location
			data currentFolder = Path.GetDirectoryName(assemblyLocation)
			data rootPath = Path.GetPathRoot(currentFolder)
			while(currentFolder != rootPath)
			begin
				if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
					mreturn Path.Combine(currentFolder, folderName)
				else
					currentFolder = Path.GetFullPath(currentFolder + "..\")
			end
			mreturn ^null
		endmethod

        private method GetContextPool<T(IContextBase, class)>, @ExternalContextPool<T>
        proc
			data testDir = findRelativeFolderForAssembly("TestDir")
            ;data contextPool = new ExternalContextPool<T>(Environment.GetEnvironmentVariable("SYNERGYDE64") + "dbl\bin\dbr.exe", '-dv -rd 5000 TraditionalBridge.Test.dbr', Path.GetFullPath(Path.Combine(Environment.GetEnvironmentVariable("SolutionDir") ?? "..\..\..\..\", "TestDir")), ^null, 4) 
            data contextPool = new ExternalContextPool<T>(Environment.GetEnvironmentVariable("SYNERGYDE64") + "dbl\bin\dbs.exe", 'TraditionalBridge.Test.dbr', testDir, ^null, 4) 
            mreturn contextPool
        endmethod

        {TestMethod}
        public async method function_one_Test, @Task
        proc
            data return = await context.function_one("This is an alpha string that will likely be truncated", 12345, 9876543, 9876543)
            Assert.AreEqual(return.Item1, "This is an alpha string that will likely be truncated")
            Assert.AreEqual(return.Item2, 12345)
            Assert.AreEqual(return.Item3, 9876543)
            Assert.AreEqual(return.Item4, 9876543)
        endmethod
;;.9988332 is not considered a valid float/decimal in json. We might need to detect precision and length are the same to force a leading zero to exist on the server side
;        {TestMethod}
;        public async method function_two_Test, @Task
;        proc
;            data return = await context.function_two(-1234567891, 333.334, 123456.7891, 1234567.891, 123456789, 0.9988332, 1.2345, 88991010, 654321, 123456789)
;            Assert.AreEqual(return.Item1, -1234567891.12)
;            Assert.AreEqual(return.Item2, 333.334)
;            Assert.AreEqual(return.Item3, 123456.7891)
;            Assert.AreEqual(return.Item4, 1234567.891)
;            Assert.AreEqual(return.Item5, 123456789)
;            Assert.AreEqual(return.Item6, 0.9988332)
;            Assert.AreEqual(return.Item7, 1.2345)
;            Assert.AreEqual(return.Rest.Item1, -88991010)
;            Assert.AreEqual(return.Rest.Item2, 654321)
;            Assert.AreEqual(return.Rest.Item3, 123456789)
;        endmethod

        {TestMethod}
        public async method function_four_Test, @Task
        proc
            data return = await context.function_four("This;is;number 1", "This;is;number 2", "number 3", "This#is;number 4")
            Assert.AreEqual(return.Item1, "Coming back 1")
            Assert.AreEqual(return.Item2, "Coming back 2")
            Assert.AreEqual(return.Item3, "back 3")
            Assert.AreEqual(return.Item4, "backi1234567890 1234567890 1234567")
        endmethod

        {TestMethod}
        public async method function_eight_Test, @Task
        proc
            data return = await context.function_eight("abcde", 14321, 52345, "opqr", 123.567, new int[#] {1, 22, 333, 4444, 55555}, new string[#] {"abcde", "fghi", "jklmn", "opqr", "stuvw", "xyz"}, new decimal[#] {12.3, 987.65, 123.456, 987.654}, new int[#] {1, 22, 333, 4444, 55555})
            Assert.AreEqual(return.Item1, "aaaaa")
            Assert.AreEqual(return.Item2, 77777)
            Assert.AreEqual(return.Item3, 66655)
            Assert.AreEqual(return.Item4, "opqr")
            Assert.AreEqual(return.Item5, 333.444)
            Assert.IsTrue(return.Item6.SequenceEqual(new int[#] { 55555, 4444, 333, 22, 1 }))
            Assert.IsTrue(return.Item7.Select(lambda (k) { k.Trim() }).SequenceEqual(new string[#] { "a", "bb", "ccc", "dddd", "eeeee", "fffff" }))
            Assert.IsTrue(return.Rest.Item1.SequenceEqual(new decimal[#] { 0.12, 3333.44, 555555.667, 7777777.888 }))
            Assert.IsTrue(return.Rest.Item2.SequenceEqual(new int[#] { 999999999, 88888888, 7777777, 666666, 55555 }))
        endmethod

        {TestMethod}
        public async method function_nine_Test, @Task
        proc
            data return = await context.function_nine("abcde", "back2")
            Assert.AreEqual(return.Item1, "Return")
            Assert.AreEqual(return.Item2, "back1")
            Assert.AreEqual(return.Item3, "back2")
        endmethod

        {TestMethod}
        public async method function_ten_Test, @Task
        proc
            data return = await context.function_ten("abcde", "54321")
            Assert.AreEqual(return.Item1, 123456789)
            Assert.AreEqual(return.Item2, "abcde")
            Assert.AreEqual(return.Item3, "back")
        endmethod

        {TestMethod}
        public async method get_verno_tst_Test, @Task
        proc
            data return = await context.get_verno_tst("")
            Assert.IsTrue(return.StartsWith("DBL/MS-WINDOWS Version 11"))
        endmethod
    endclass
endnamespace
