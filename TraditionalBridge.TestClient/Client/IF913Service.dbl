;;*****************************************************************************
;;
;; Title:       IF913Service.dbl
;;
;; Description: Service to expose methods that are part of the former
;;              xfServerPlus / xfNetLink "IF913" interface.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.EF.Extensions
import Harmony.OData
import Harmony.OData.Adapter
import System.Threading.Tasks
import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNetCore.Authorization
import Newtonsoft.Json.Linq
import System.Linq

import TraditionalBridge.Models

namespace TraditionalBridge.TestClient

    public partial class IF913Service extends DynamicCallProvider

        static IsInitialized, boolean
        static method IF913Service
        proc
            DataObjectMetadataBase.LookupType(^typeof(Structuretest))
            DataObjectMetadataBase.LookupType(^typeof(Structuretest))
            DataObjectMetadataBase.LookupType(^typeof(Strtest1))
            DataObjectMetadataBase.LookupType(^typeof(Strtest1))
            DataObjectMetadataBase.LookupType(^typeof(Booleanstr))
            DataObjectMetadataBase.LookupType(^typeof(Booleanstr))
            DataObjectMetadataBase.LookupType(^typeof(Booleanstr))
            DataObjectMetadataBase.LookupType(^typeof(Coercestructure))
            DataObjectMetadataBase.LookupType(^typeof(Datatablestr))
            DataObjectMetadataBase.LookupType(^typeof(Strtest12))
            DataObjectMetadataBase.LookupType(^typeof(Datatablestr))
            DataObjectMetadataBase.LookupType(^typeof(Dateteblestr2))
            DataObjectMetadataBase.LookupType(^typeof(Strtest14))
            DataObjectMetadataBase.LookupType(^typeof(Nulldtstr))
            DataObjectMetadataBase.LookupType(^typeof(Nulldtary))
            DataObjectMetadataBase.LookupType(^typeof(Nulldtstr))
            DataObjectMetadataBase.LookupType(^typeof(Strtest1))
            IsInitialized = true
        endmethod

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        public method IF913Service
            connection, @IDynamicCallConnection
            endparams
            parent(connection)
        proc
            if(!IsInitialized)
                throw new Exception("cctor missing")
        endmethod

        ;;; <summary>
        ;;; AL out of alpha
        ;;; </summary>
        public async method ALofAlphaOut, @Task<ZDateTime-e.ALofAlphaOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.ALofAlphaOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofAlphaOut"
            &   ,response.AryLstAlpha
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.AryLstAlpha)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; An ArrayList of Alphas
        ;;; </summary>
        public async method ALofAlphas, @Task
            required in args, @ZDateTime-e.ALofAlphas_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofAlphas"
            &   ,args.AlphaArrayList
            &   )
        endmethod

        ;;; <summary>
        ;;; ArrayList of decimal
        ;;; </summary>
        public async method ALofDecimal, @Task
            required in args, @ZDateTime-e.ALofDecimal_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofDecimal"
            &   ,args.DecimalArrayList
            &   )
        endmethod

        ;;; <summary>
        ;;; An AryLst of dec 10 out
        ;;; </summary>
        public async method ALofDecimalOut, @Task<ZDateTime-e.ALofDecimalOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.ALofDecimalOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofDecimalOut"
            &   ,response.DecALOut
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.DecALOut)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; ArrayList of ID
        ;;; </summary>
        public async method ALofImpDec, @Task
            required in args, @ZDateTime-e.ALofImpDec_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofImpDec"
            &   ,args.IDArrayList
            &   )
        endmethod

        ;;; <summary>
        ;;; an arylist of id 7.2 out
        ;;; </summary>
        public async method ALofImpDecOut, @Task<ZDateTime-e.ALofImpDecOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.ALofImpDecOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofImpDecOut"
            &   ,response.IDALout
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.IDALout)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; An arraylist of integers
        ;;; </summary>
        public async method ALofInt, @Task
            required in args, @ZDateTime-e.ALofInt_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofInt"
            &   ,args.IntArrayList
            &   )
        endmethod

        ;;; <summary>
        ;;; arylst of i4 out
        ;;; </summary>
        public async method ALofIntOut, @Task<ZDateTime-e.ALofIntOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.ALofIntOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofIntOut"
            &   ,response.IntALOut
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.IntALOut)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; An arraylist of structures
        ;;; </summary>
        public async method ALofStr, @Task
            required in args, @ZDateTime-e.ALofStr_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofStr"
            &   ,args.STRUCTURETEST
            &   )
        endmethod

        ;;; <summary>
        ;;; an arylst of Str out
        ;;; </summary>
        public async method ALofStrOut, @Task<ZDateTime-e.ALofStrOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.ALofStrOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofStrOut"
            &   ,ArgumentHelper.MaybeNull(response.STRUCTURETEST)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.STRUCTURETEST)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; An arraylist of strings
        ;;; </summary>
        public async method ALofString, @Task
            required in args, @ZDateTime-e.ALofString_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofString"
            &   ,args.StringArrayList
            &   )
        endmethod

        ;;; <summary>
        ;;; arylst of string out
        ;;; </summary>
        public async method ALofStringOut, @Task<ZDateTime-e.ALofStringOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.ALofStringOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofStringOut"
            &   ,response.StringALOut
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.StringALOut)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method ALofStruct1, @Task
            required in args, @ZDateTime-e.ALofStruct1_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofStruct1"
            &   ,args.STRTEST1
            &   )
        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method ALofStruct1out, @Task<ZDateTime-e.ALofStruct1out_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.ALofStruct1out_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALofStruct1out"
            &   ,ArgumentHelper.MaybeNull(response.STRTEST1)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.STRTEST1)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; An input only method of ArrayList of datetime
        ;;; </summary>
        public async method AlofDateTime, @Task
            required in args, @ZDateTime-e.AlofDateTime_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofDateTime"
            &   ,args.DateTimeIn
            &   )
        endmethod

        ;;; <summary>
        ;;; Arraylist of dec to DateTime out
        ;;; </summary>
        public async method AlofDateTimeOut, @Task<ZDateTime-e.AlofDateTimeOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.AlofDateTimeOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofDateTimeOut"
            &   ,response.DateTimeOut
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.DateTimeOut)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; ArrayList of dec - Long
        ;;; </summary>
        public async method AlofDecLong, @Task
            required in args, @ZDateTime-e.AlofDecLong_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofDecLong"
            &   ,args.DecLong
            &   )
        endmethod

        ;;; <summary>
        ;;; ArrayList of Dec to long
        ;;; </summary>
        public async method AlofDecLongOut, @Task<ZDateTime-e.AlofDecLongOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.AlofDecLongOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofDecLongOut"
            &   ,response.DecLong
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.DecLong)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Arraylist of dec to short
        ;;; </summary>
        public async method AlofDecShort, @Task
            required in args, @ZDateTime-e.AlofDecShort_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofDecShort"
            &   ,args.DecShort
            &   )
        endmethod

        ;;; <summary>
        ;;; Arraylist of dec to Short
        ;;; </summary>
        public async method AlofDecShortOut, @Task<ZDateTime-e.AlofDecShortOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.AlofDecShortOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofDecShortOut"
            &   ,response.DecShort
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.DecShort)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; ArrayL:ist of ID to Double
        ;;; </summary>
        public async method AlofIDDouble, @Task
            required in args, @ZDateTime-e.AlofIDDouble_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofIDDouble"
            &   ,args.IDDouble
            &   )
        endmethod

        ;;; <summary>
        ;;; ArrayList of ID to double
        ;;; </summary>
        public async method AlofIDDoubleOut, @Task<ZDateTime-e.AlofIDDoubleOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.AlofIDDoubleOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofIDDoubleOut"
            &   ,response.IDDouble
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.IDDouble)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; ArrayList of int - boolean
        ;;; </summary>
        public async method AlofIntBool, @Task
            required in args, @ZDateTime-e.AlofIntBool_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofIntBool"
            &   ,args.BoolInt
            &   )
        endmethod

        ;;; <summary>
        ;;; Arraylist of out int - bool
        ;;; </summary>
        public async method AlofIntBoolOut, @Task<ZDateTime-e.AlofIntBoolOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.AlofIntBoolOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("AlofIntBoolOut"
            &   ,response.BoolInt
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.BoolInt)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method BoolStruct1, @Task<ZDateTime-e.BoolStruct1_Response>
            required in args, @ZDateTime-e.BoolStruct1_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.BoolStruct1_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BoolStruct1"
            &   ,args.BOOLEANSTR
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.BOOLEANSTR)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method BoolStruct2Al, @Task
            required in args, @ZDateTime-e.BoolStruct2Al_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BoolStruct2Al"
            &   ,args.BOOLEANSTR
            &   )
        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method BoolStruct3Alout, @Task<ZDateTime-e.BoolStruct3Alout_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.BoolStruct3Alout_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BoolStruct3Alout"
            &   ,ArgumentHelper.MaybeNull(response.BOOLEANSTR)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.BOOLEANSTR)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; True boolean test
        ;;; </summary>
        public async method BoolToBool, @Task<ZDateTime-e.BoolToBool_Response>
            required in args, @ZDateTime-e.BoolToBool_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.BoolToBool_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BoolToBool"
            &   ,args.Favorite
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Favorite)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerced data types within a structure
        ;;; </summary>
        public async method CoercedStructure, @Task<ZDateTime-e.CoercedStructure_Response>
            required in args, @ZDateTime-e.CoercedStructure_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.CoercedStructure_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("CoercedStructure"
            &   ,args.COERCESTRUCTURE
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.COERCESTRUCTURE)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; DataTable of ArrayList of structures out
        ;;; </summary>
        public async method DTALStructureOut, @Task<ZDateTime-e.DTALStructureOut_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DTALStructureOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DTALStructureOut"
            &   ,ArgumentHelper.MaybeNull(response.DATATABLESTR)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.DATATABLESTR)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; DataTable of a str with and array of sub structures
        ;;; </summary>
        public async method DTArrayGroupStrs, @Task<ZDateTime-e.DTArrayGroupStrs_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DTArrayGroupStrs_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DTArrayGroupStrs"
            &   ,ArgumentHelper.MaybeNull(response.STRTEST12)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.STRTEST12)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; DataTable as an ArrayList in parameter
        ;;; </summary>
        public async method DTALStructureIn, @Task
            required in args, @ZDateTime-e.DTALStructureIn_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DTALStructureIn"
            &   ,args.DATATABLESTR
            &   )
        endmethod

        ;;; <summary>
        ;;; DataTabkle collection
        ;;; </summary>
        public async method DTCollection, @Task<ZDateTime-e.DTCollection_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DTCollection_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DTCollection"
            &   ,ArgumentHelper.MaybeNull(response.DATETEBLESTR2)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.DATETEBLESTR2)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; A DataTable with groups of structures in structure
        ;;; </summary>
        public async method DTGroupStructs, @Task<ZDateTime-e.DTGroupStructs_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DTGroupStructs_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DTGroupStructs"
            &   ,ArgumentHelper.MaybeNull(response.STRTEST14)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.STRTEST14)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Datetime yyyymmddhhmmss
        ;;; </summary>
        public async method DateTime14, @Task<ZDateTime-e.DateTime14_Response>
            required in args, @ZDateTime-e.DateTime14_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DateTime14_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DateTime14"
            &   ,args.datetimeOf14
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.datetimeOf14)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Datetime yyjjj
        ;;; </summary>
        public async method Dateyyjjj, @Task<ZDateTime-e.Dateyyjjj_Response>
            required in args, @ZDateTime-e.Dateyyjjj_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.Dateyyjjj_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("Dateyyjjj"
            &   ,args.Dateyyjjj
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Dateyyjjj)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Datetime yymmdd
        ;;; </summary>
        public async method Dateyymmdd, @Task<ZDateTime-e.Dateyymmdd_Response>
            required in args, @ZDateTime-e.Dateyymmdd_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.Dateyymmdd_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("Dateyymmdd"
            &   ,args.Dateyymmdd
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Dateyymmdd)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Datetime yyyyjjj
        ;;; </summary>
        public async method Dateyyyyjjj, @Task<ZDateTime-e.Dateyyyyjjj_Response>
            required in args, @ZDateTime-e.Dateyyyyjjj_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.Dateyyyyjjj_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("Dateyyyyjjj"
            &   ,args.Dateyyyyjjj
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Dateyyyyjjj)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Datetime yyyymmdd
        ;;; </summary>
        public async method Dateyyyymmdd, @Task<ZDateTime-e.Dateyyyymmdd_Response>
            required in args, @ZDateTime-e.Dateyyyymmdd_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.Dateyyyymmdd_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("Dateyyyymmdd"
            &   ,args.DateTimeyyyymmdd
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DateTimeyyyymmdd)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce dec to boolean
        ;;; </summary>
        public async method DecBool, @Task<ZDateTime-e.DecBool_Response>
            required in args, @ZDateTime-e.DecBool_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecBool_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecBool"
            &   ,args.DecToBool
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToBool)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce dec to byte
        ;;; </summary>
        public async method DecByte, @Task<ZDateTime-e.DecByte_Response>
            required in args, @ZDateTime-e.DecByte_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecByte_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecByte"
            &   ,args.DecToByte
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToByte)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce dec to dec
        ;;; </summary>
        public async method DecDec, @Task<ZDateTime-e.DecDec_Response>
            required in args, @ZDateTime-e.DecDec_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecDec_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecDec"
            &   ,args.DecToDec
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToDec)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce dec to int
        ;;; </summary>
        public async method DecInt, @Task<ZDateTime-e.DecInt_Response>
            required in args, @ZDateTime-e.DecInt_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecInt_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecInt"
            &   ,args.DecToInt
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToInt)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce dec to long
        ;;; </summary>
        public async method DecLong, @Task<ZDateTime-e.DecLong_Response>
            required in args, @ZDateTime-e.DecLong_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecLong_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecLong"
            &   ,args.DecToLong
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToLong)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce dec to sbyte
        ;;; </summary>
        public async method DecSbyte, @Task<ZDateTime-e.DecSbyte_Response>
            required in args, @ZDateTime-e.DecSbyte_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecSbyte_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecSbyte"
            &   ,args.DecToSbyte
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToSbyte)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce dec to short
        ;;; </summary>
        public async method DecShort, @Task<ZDateTime-e.DecShort_Response>
            required in args, @ZDateTime-e.DecShort_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecShort_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecShort"
            &   ,args.DecToShort
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToShort)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; coerce dec to uint
        ;;; </summary>
        public async method DecUint, @Task<ZDateTime-e.DecUint_Response>
            required in args, @ZDateTime-e.DecUint_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecUint_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecUint"
            &   ,args.DecToUint
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToUint)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; coerce dec to ulong
        ;;; </summary>
        public async method DecUlong, @Task<ZDateTime-e.DecUlong_Response>
            required in args, @ZDateTime-e.DecUlong_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecUlong_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecUlong"
            &   ,args.DecToUlong
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToUlong)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; coerce dec to ushort
        ;;; </summary>
        public async method DecUshort, @Task<ZDateTime-e.DecUshort_Response>
            required in args, @ZDateTime-e.DecUshort_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.DecUshort_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DecUshort"
            &   ,args.DecToUshort
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.DecToUshort)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce id to decimal
        ;;; </summary>
        public async method IDDecimal, @Task<ZDateTime-e.IDDecimal_Response>
            required in args, @ZDateTime-e.IDDecimal_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IDDecimal_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IDDecimal"
            &   ,args.IDtoDecimal
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IDtoDecimal)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce id to double
        ;;; </summary>
        public async method IDDouble, @Task<ZDateTime-e.IDDouble_Response>
            required in args, @ZDateTime-e.IDDouble_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IDDouble_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IDDouble"
            &   ,args.IDtoDouble
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IDtoDouble)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce id to float
        ;;; </summary>
        public async method IDFloat, @Task<ZDateTime-e.IDFloat_Response>
            required in args, @ZDateTime-e.IDFloat_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IDFloat_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IDFloat"
            &   ,args.IDtoFloat
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IDtoFloat)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to boolean
        ;;; </summary>
        public async method IntBool, @Task<ZDateTime-e.IntBool_Response>
            required in args, @ZDateTime-e.IntBool_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntBool_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntBool"
            &   ,args.IntToBool
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToBool)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to byte
        ;;; </summary>
        public async method IntByte, @Task<ZDateTime-e.IntByte_Response>
            required in args, @ZDateTime-e.IntByte_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntByte_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntByte"
            &   ,args.IntToByte
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToByte)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int tp int
        ;;; </summary>
        public async method IntInt, @Task<ZDateTime-e.IntInt_Response>
            required in args, @ZDateTime-e.IntInt_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntInt_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntInt"
            &   ,args.IntToInt
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToInt)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to long
        ;;; </summary>
        public async method IntLong, @Task<ZDateTime-e.IntLong_Response>
            required in args, @ZDateTime-e.IntLong_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntLong_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntLong"
            &   ,args.IntToLong
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToLong)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to sbyte
        ;;; </summary>
        public async method IntSbyte, @Task<ZDateTime-e.IntSbyte_Response>
            required in args, @ZDateTime-e.IntSbyte_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntSbyte_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntSbyte"
            &   ,args.IntToSbyte
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToSbyte)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to short
        ;;; </summary>
        public async method IntShort, @Task<ZDateTime-e.IntShort_Response>
            required in args, @ZDateTime-e.IntShort_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntShort_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntShort"
            &   ,args.IntToShort
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToShort)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to uint
        ;;; </summary>
        public async method IntUint, @Task<ZDateTime-e.IntUint_Response>
            required in args, @ZDateTime-e.IntUint_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntUint_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntUint"
            &   ,args.IntToUint
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToUint)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to ulong
        ;;; </summary>
        public async method IntUlong, @Task<ZDateTime-e.IntUlong_Response>
            required in args, @ZDateTime-e.IntUlong_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntUlong_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntUlong"
            &   ,args.IntToUlong
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToUlong)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Coerce int to ushort
        ;;; </summary>
        public async method IntUshort, @Task<ZDateTime-e.IntUshort_Response>
            required in args, @ZDateTime-e.IntUshort_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.IntUshort_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("IntUshort"
            &   ,args.IntToUshort
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.IntToUshort)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Nullable DT yyyymmddhhmiss
        ;;; </summary>
        public async method NDateTime14, @Task<ZDateTime-e.NDateTime14_Response>
            required in args, @ZDateTime-e.NDateTime14_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.NDateTime14_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("NDateTime14"
            &   ,args.ndatetimeOf14
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.ndatetimeOf14)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; nullableDateTime
        ;;; </summary>
        public async method NDateyyyymmdd, @Task<ZDateTime-e.NDateyyyymmdd_Response>
            required in args, @ZDateTime-e.NDateyyyymmdd_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.NDateyyyymmdd_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("NDateyyyymmdd"
            &   ,args.NDateTime8
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.NDateTime8)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; A str with nullable dateTime fileds
        ;;; </summary>
        public async method NullableDTStr, @Task<ZDateTime-e.NullableDTStr_Response>
            required in args, @ZDateTime-e.NullableDTStr_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.NullableDTStr_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("NullableDTStr"
            &   ,args.NULLDTSTR
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.NULLDTSTR)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method NullableDTAry, @Task<ZDateTime-e.NullableDTAry_Response>
            required in args, @ZDateTime-e.NullableDTAry_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.NullableDTAry_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("NullableDTAry"
            &   ,args.NULLDTARY
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.NULLDTARY)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Arraylist of out strusts with nullable DateTime
        ;;; </summary>
        public async method NullableDTStrAL, @Task<ZDateTime-e.NullableDTStrAL_Response>
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.NullableDTStrAL_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("NullableDTStrAL"
            &   ,ArgumentHelper.MaybeNull(response.NULLDTSTR)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.NULLDTSTR)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; null string followed by an out AL of structures.
        ;;; </summary>
        public async method NullssAL, @Task<ZDateTime-e.NullssAL_Response>
            required in args, @ZDateTime-e.NullssAL_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.NullssAL_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("NullssAL"
            &   ,args.CustNumber
            &   ,args.aDate
            &   ,response.info
            &   ,ArgumentHelper.MaybeNull(response.STRTEST1)
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(3, resultTuple, response.info)
            ArgumentHelper.Argument(4, resultTuple, response.STRTEST1)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Time hhmm
        ;;; </summary>
        public async method Time4, @Task<ZDateTime-e.Time4_Response>
            required in args, @ZDateTime-e.Time4_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.Time4_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("Time4"
            &   ,args.timehhmm
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.timehhmm)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Time hhmmss
        ;;; </summary>
        public async method Time6, @Task<ZDateTime-e.Time6_Response>
            required in args, @ZDateTime-e.Time6_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.Time6_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("Time6"
            &   ,args.timehhmmss
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.timehhmmss)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; A system.string
        ;;; </summary>
        public async method TrueString, @Task<ZDateTime-e.TrueString_Response>
            required in args, @ZDateTime-e.TrueString_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.TrueString_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("TrueString"
            &   ,args.astring
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.astring)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method TrueStringParmOnly, @Task<ZDateTime-e.TrueStringParmOnly_Response>
            required in args, @ZDateTime-e.TrueStringParmOnly_Request
        proc
            ;;Prepare the response object
            data response = new ZDateTime-e.TrueStringParmOnly_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("TrueStringParmOnly"
            &   ,args.SysStr
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.SysStr)

            ;;Return the response
            mreturn response

        endmethod

    endclass

endnamespace
