;;*****************************************************************************
;;
;; Title:       V93IFService.dbl
;;
;; Description: Service to expose methods that are part of the former
;;              xfServerPlus / xfNetLink "V93IF" interface.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.EF.Extensions
import Harmony.OData
import Harmony.OData.Adapter
import System.Threading.Tasks
import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData
import Microsoft.AspNetCore.Authorization
import Newtonsoft.Json.Linq
import System.Linq

import Services.Models

namespace Services.Controllers

    public partial class V93IFService extends DynamicCallProvider

        static IsInitialized, boolean

        static method V93IFService
        proc
            DataObjectMetadataBase.LookupType(^typeof(V93reposopt))
            DataObjectMetadataBase.LookupType(^typeof(V93reposopt))
            DataObjectMetadataBase.LookupType(^typeof(Binarytest))
            DataObjectMetadataBase.LookupType(^typeof(Fuente))
            DataObjectMetadataBase.LookupType(^typeof(Fuente))
            DataObjectMetadataBase.LookupType(^typeof(Fuente))
            DataObjectMetadataBase.LookupType(^typeof(Enumstructure))
            DataObjectMetadataBase.LookupType(^typeof(Enumstructure))
            DataObjectMetadataBase.LookupType(^typeof(Enumstructure))
            DataObjectMetadataBase.LookupType(^typeof(Enumstructure))
            DataObjectMetadataBase.LookupType(^typeof(Timekey))
            DataObjectMetadataBase.LookupType(^typeof(V93reposopt))
            DataObjectMetadataBase.LookupType(^typeof(Stroptsoutter))

            ;;If there is a V93IFServiceCustom method, call it
            V93IFServiceCustom()

            IsInitialized = true

        endmethod

        ;;; <summary>
        ;;; Partial method to allow custom constructor code.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial static method V93IFServiceCustom, void

        endmethod

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        public method V93IFService
            connection, @IDynamicCallConnection
            endparams
            parent(connection)
        proc
            if(!IsInitialized)
                throw new Exception("cctor missing")
        endmethod

        ;;; <summary>
        ;;; out ArrayList of Repossitory opts structure
        ;;; </summary>
        public async method ALReposOpts, @Task<V93IF.ALReposOpts_Response>
        proc
            ;;Prepare the response object
            data response = new V93IF.ALReposOpts_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALReposOpts"
            &   ,ArgumentHelper.MaybeNull(response.V93REPOSOPTS)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.V93REPOSOPTS)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; ArrayList of reposOpts as In
        ;;; </summary>
        public async method ALReposOptsIn, @Task
            required in args, @V93IF.ALReposOptsIn_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ALReposOptsIn"
            &   ,args.V93REPOSOPTS
            &   )
        endmethod

        ;;; <summary>
        ;;; a binary byte array filed in a Array
        ;;; </summary>
        public async method BinArrayStr, @Task<V93IF.BinArrayStr_Response>
            required in args, @V93IF.BinArrayStr_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.BinArrayStr_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BinArrayStr"
            &   ,args.BINARYTEST
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.BINARYTEST)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method BinaryHdlIn, @Task<V93IF.BinaryHdlIn_Response>
            required in args, @V93IF.BinaryHdlIn_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.BinaryHdlIn_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BinaryHdlIn"
            &   ,args.CustID
            &   ,args.AddressID
            &   ,ArgumentHelper.MaybeNull(response.Structure)
            &   ,args.GRFA
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(3, resultTuple, response.Structure)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method BinaryHdlInOut, @Task<V93IF.BinaryHdlInOut_Response>
            required in args, @V93IF.BinaryHdlInOut_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.BinaryHdlInOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BinaryHdlInOut"
            &   ,args.CustID
            &   ,args.AddressID
            &   ,ArgumentHelper.MaybeNull(response.Structure)
            &   ,args.GRFA
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(3, resultTuple, response.Structure)
            ArgumentHelper.Argument(4, resultTuple, response.GRFA)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method BinaryHdlOut, @Task<V93IF.BinaryHdlOut_Response>
            required in args, @V93IF.BinaryHdlOut_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.BinaryHdlOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BinaryHdlOut"
            &   ,args.CustID
            &   ,args.AddressID
            &   ,ArgumentHelper.MaybeNull(response.Structure)
            &   ,response.GRFA
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(3, resultTuple, response.Structure)
            ArgumentHelper.Argument(4, resultTuple, response.GRFA)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Structure test with GRFA binary byte array
        ;;; </summary>
        public async method DoFuentes, @Task<V93IF.DoFuentes_Response>
            required in args, @V93IF.DoFuentes_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.DoFuentes_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DoFuentes"
            &   ,args.FUENTES
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.FUENTES)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Arraylist of strucuter with a binary array
        ;;; </summary>
        public async method DoFuentesALin, @Task
            required in args, @V93IF.DoFuentesALin_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DoFuentesALin"
            &   ,args.FUENTES
            &   )
        endmethod

        ;;; <summary>
        ;;; Arraylist of structure containing binary array
        ;;; </summary>
        public async method DoFuentesALout, @Task<V93IF.DoFuentesALout_Response>
        proc
            ;;Prepare the response object
            data response = new V93IF.DoFuentesALout_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("DoFuentesALout"
            &   ,ArgumentHelper.MaybeNull(response.FUENTES)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.FUENTES)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Enum io param
        ;;; </summary>
        public async method EnumTest1, @Task<V93IF.EnumTest1_Response>
            required in args, @V93IF.EnumTest1_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.EnumTest1_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("EnumTest1"
            &   ,args.AColor
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.AColor)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Enum test as a return value
        ;;; </summary>
        public async method EnumTest2, @Task<V93IF.EnumTest2_Response>
        proc
            ;;Prepare the response object
            data response = new V93IF.EnumTest2_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("EnumTest2"
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)


            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; enum return and in and out parms
        ;;; </summary>
        public async method EnumTest3, @Task<V93IF.EnumTest3_Response>
            required in args, @V93IF.EnumTest3_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.EnumTest3_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("EnumTest3"
            &   ,args.aColor
            &   ,args.Alpha1
            &   ,response.bColor
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(2, resultTuple, response.Alpha1)
            ArgumentHelper.Argument(3, resultTuple, response.bColor)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method EnumTest4, @Task<V93IF.EnumTest4_Response>
            required in args, @V93IF.EnumTest4_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.EnumTest4_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("EnumTest4"
            &   ,args.ENUMSTRUCTURE
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.ENUMSTRUCTURE)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; enumstructure as an array of structures
        ;;; </summary>
        public async method EnumTest5, @Task<V93IF.EnumTest5_Response>
            required in args, @V93IF.EnumTest5_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.EnumTest5_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("EnumTest5"
            &   ,args.ENUMSTRUCTURE
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.ENUMSTRUCTURE)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Enum Structure as an ArrayList
        ;;; </summary>
        public async method EnumTest6, @Task
            required in args, @V93IF.EnumTest6_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("EnumTest6"
            &   ,args.ENUMSTRUCTURE
            &   )
        endmethod

        ;;; <summary>
        ;;; enum struct as an out arraylist
        ;;; </summary>
        public async method EnumTest7, @Task<V93IF.EnumTest7_Response>
        proc
            ;;Prepare the response object
            data response = new V93IF.EnumTest7_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("EnumTest7"
            &   ,ArgumentHelper.MaybeNull(response.ENUMSTRUCTURE)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.ENUMSTRUCTURE)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method LargeDTOut, @Task<V93IF.LargeDTOut_Response>
        proc
            ;;Prepare the response object
            data response = new V93IF.LargeDTOut_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("LargeDTOut"
            &   ,ArgumentHelper.MaybeNull(response.TIMEKEY)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.TIMEKEY)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; New repository Options for v93
        ;;; </summary>
        public async method ReposOptionsV93, @Task<V93IF.ReposOptionsV93_Response>
            required in args, @V93IF.ReposOptionsV93_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.ReposOptionsV93_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ReposOptionsV93"
            &   ,args.V93REPOSOPTS
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.V93REPOSOPTS)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; Inner structure within an outter structure
        ;;; </summary>
        public async method StrOptTest1, @Task<V93IF.StrOptTest1_Response>
            required in args, @V93IF.StrOptTest1_Request
        proc
            ;;Prepare the response object
            data response = new V93IF.StrOptTest1_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("StrOptTest1"
            &   ,args.STROPTSOUTTER
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.STROPTSOUTTER)

            ;;Return the response
            mreturn response

        endmethod

    endclass

endnamespace
