;;*****************************************************************************
;;
;; Title:       DifferentpksController.dbl
;;
;; Description: OData controller for the DIFFERENTPK structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Net.Mime
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Produces("application/json")}
    ;;; <summary>
    ;;; Str with different PK types
    ;;; </summary>
    ;;; <remarks>
    ;;; OData endpoints for Str with different PK types
    ;;; </remarks>
    public partial class DifferentpksController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of DifferentpksController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method DifferentpksController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("Differentpks")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Differentpk>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query the entire collection of records
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadAllDifferentpks, @IActionResult
        proc
            mreturn Ok(_DbContext.Differentpks.AsNoTracking())
        endmethod

        {HttpGet("Differentpks(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Differentpk),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a single record identified by unique primary key
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">ID</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadDifferentpk, @SingleResult<Differentpk>
            required in aId, int
        proc
            mreturn new SingleResult<Differentpk>(_DbContext.Differentpks.AsNoTracking().FindQuery<Differentpk>(_DbContext, aId))
        endmethod

        {HttpGet("Differentpks(Alphapk={aAlphapk})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Differentpk>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Alphapk
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aAlphapk" example="ABC">Alpha PK</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadDifferentpksByAlphapk, @IActionResult
            required in aAlphapk, String
        proc
            data result = _DbContext.Differentpks.AsNoTracking().FindAlternate("Alphapk",aAlphapk)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Differentpks(Decimalpk={aDecimalpk})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Differentpk>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Decimalpk
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aDecimalpk" example="123">Decimal PK</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadDifferentpksByDecimalpk, @IActionResult
            required in aDecimalpk, int
        proc
            data result = _DbContext.Differentpks.AsNoTracking().FindAlternate("Decimalpk",aDecimalpk)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Differentpks(Intergerpk={aIntergerpk})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Differentpk>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Intergerpk
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aIntergerpk" example="123">Integer PK</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadDifferentpksByIntergerpk, @IActionResult
            required in aIntergerpk, int
        proc
            data result = _DbContext.Differentpks.AsNoTracking().FindAlternate("Intergerpk",aIntergerpk)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Differentpks(Datepk={aDatepk})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Differentpk>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Datepk
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aDatepk" example="123">Date PK</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadDifferentpksByDatepk, @IActionResult
            required in aDatepk, DateTime
        proc
            data result = _DbContext.Differentpks.AsNoTracking().FindAlternate("Datepk",aDatepk)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Differentpks(Timepk={aTimepk})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Differentpk>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Timepk
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aTimepk" example="123">Time PK</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadDifferentpksByTimepk, @IActionResult
            required in aTimepk, DateTime
        proc
            data result = _DbContext.Differentpks.AsNoTracking().FindAlternate("Timepk",aTimepk)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Differentpks(Booleanpk={aBooleanpk})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Differentpk>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Booleanpk
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aBooleanpk" example="True">Boolean PK</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method ReadDifferentpksByBooleanpk, @IActionResult
            required in aBooleanpk, boolean
        proc
            data result = _DbContext.Differentpks.AsNoTracking().FindAlternate("Booleanpk",aBooleanpk)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Differentpk),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost("Differentpks")}
        ;;; <summary>
        ;;; Create a new record (automatically assigned primary key)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PostDifferentpk, @IActionResult
            {FromBody}
            required in aDifferentpk, @Differentpk
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("Id")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aDifferentpk)

            ;;Add the new differentpk
            try
            begin
                _DbContext.Differentpks.Add(aDifferentpk)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aDifferentpk)

        endmethod

        {HttpPut("Differentpks(Id={aId})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Update a record if it exists otherwise create a new record (primary key provided by client)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="201">Created. The entity was created but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PutDifferentpk, @IActionResult
            required in aId, int
            {FromBody}
            required in aDifferentpk, @Differentpk
        proc

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aDifferentpk.Id = aId

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Differentpks.Find(aId)
                if(existing == ^null) then
                begin
                    _DbContext.Differentpks.Add(aDifferentpk)
                    _DbContext.SaveChanges()
                    mreturn Created(aDifferentpk)
                end
                else
                begin
                    aDifferentpk.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {HttpPatch("Differentpks(Id={aId})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch (partial update) an existing record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PatchDifferentpk, @IActionResult
            required in aId, int
            {FromBody}
            required in aDifferentpk, @JsonPatchDocument<Differentpk>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing differentpk
            try
            begin
                ;;Get the differentpk to be updated
                data differentpkToUpdate = _DbContext.Differentpks.Find(aId)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(differentpkToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the differentpk we read
                aDifferentpk.ApplyTo(differentpkToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Differentpks.Update(differentpkToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {HttpDelete("Differentpks(Id={aId})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method DeleteDifferentpk, @IActionResult
            required in aId, int
        proc
            ;;Get the differentpk to be deleted
            data differentpkToRemove = _DbContext.Differentpks.Find(aId)

            ;;Did we find it?
            if (differentpkToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Differentpks.Remove(differentpkToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace
