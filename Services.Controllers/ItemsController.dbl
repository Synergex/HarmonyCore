;;*****************************************************************************
;;
;; Title:       ItemsController.dbl
;;
;; Description: OData controller for the ITEMS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Net.Mime
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Produces("application/json")}
    ;;; <summary>
    ;;; Item master record
    ;;; </summary>
    ;;; <remarks>
    ;;; OData endpoints for Item master record
    ;;; </remarks>
    public partial class ItemsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of ItemsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method ItemsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("Items")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Item>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query the entire collection of records
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method GetItems, @IActionResult
        proc
            mreturn Ok(_DbContext.Items.AsNoTracking())
        endmethod

        {HttpGet("Items(ItemNumber={aItemNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Item),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a single record identified by unique primary key
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aItemNumber" example="19">Item number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="404"><HTTP_404_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method GetItemByPK, @SingleResult<Item>
            required in aItemNumber, int
        proc
            mreturn new SingleResult<Item>(_DbContext.Items.AsNoTracking().FindQuery<Item>(_DbContext, aItemNumber))
        endmethod

        {HttpGet("Items(VendorNumber={aVendorNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Item>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key VendorNumber
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aVendorNumber" example="41">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="404"><HTTP_404_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method GetItemsByVendorNumber, @IActionResult
            required in aVendorNumber, int
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("VendorNumber",aVendorNumber)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Items(FlowerColor={aFlowerColor})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Item>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Color
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aFlowerColor" example="Red">Flower color</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="404"><HTTP_404_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method GetItemsByColor, @IActionResult
            required in aFlowerColor, String
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("FlowerColor",aFlowerColor)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Items(Size={aSize})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Item>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Size
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aSize" example="5">Size in gallons</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="404"><HTTP_404_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method GetItemsBySize, @IActionResult
            required in aSize, int
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("Size",aSize)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Items(CommonName={aCommonName})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Item>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Name
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCommonName" example="European Hackberry">Common name</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="404"><HTTP_404_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method GetItemsByName, @IActionResult
            required in aCommonName, String
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("CommonName",aCommonName)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Item),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost("Items")}
        ;;; <summary>
        ;;; Create a new record (automatically assigned primary key)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200"><HTTP_200_MESSAGE></response>
        ;;; <response code="400"><HTTP_400_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method PostItem, @IActionResult
            {FromBody}
            required in aItem, @Item
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("ItemNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aItem)

            ;;Add the new item
            try
            begin
                _DbContext.Items.Add(aItem)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aItem)

        endmethod

        {HttpPut("Items(ItemNumber={aItemNumber})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Update a record if it exists otherwise create a new record (primary key provided by client)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aItemNumber" example="19">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="201"><HTTP_201_MESSAGE></response>
        ;;; <response code="400"><HTTP_400_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method PutItem, @IActionResult
            required in aItemNumber, int
            {FromBody}
            required in aItem, @Item
        proc

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aItem.ItemNumber = aItemNumber

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Items.Find(aItemNumber)
                if(existing == ^null) then
                begin
                    _DbContext.Items.Add(aItem)
                    _DbContext.SaveChanges()
                    mreturn Created(aItem)
                end
                else
                begin
                    aItem.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {HttpPatch("Items(ItemNumber={aItemNumber})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch (partial update) an existing record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aItemNumber" example="19">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204"><HTTP_204_MESSAGE></response>
        ;;; <response code="400"><HTTP_400_MESSAGE></response>
        ;;; <response code="404"><HTTP_404_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method PatchItem, @IActionResult
            required in aItemNumber, int
            {FromBody}
            required in aItem, @JsonPatchDocument<Item>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing item
            try
            begin
                ;;Get the item to be updated
                data itemToUpdate = _DbContext.Items.Find(aItemNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(itemToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the item we read
                aItem.ApplyTo(itemToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Items.Update(itemToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {HttpDelete("Items(ItemNumber={aItemNumber})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aItemNumber" example="19">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204"><HTTP_204_MESSAGE></response>
        ;;; <response code="404"><HTTP_404_MESSAGE></response>
        ;;; <response code="500"><HTTP_500_MESSAGE></response>
        public method DeleteItem, @IActionResult
            required in aItemNumber, int
        proc
            ;;Get the item to be deleted
            data itemToRemove = _DbContext.Items.Find(aItemNumber)

            ;;Did we find it?
            if (itemToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Items.Remove(itemToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace
