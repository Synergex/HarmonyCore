;;*****************************************************************************
;;
;; Title:       Testcarowner1sController.dbl
;;
;; Description: OData controller for the TESTCAROWNER1 structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {ApiVersion("1")}
    {ODataRoutePrefix("Testcarowner1s")}
    ;;; <summary>
    ;;; OData controller for Testcarowner1s
    ;;; </summary>
    public partial class Testcarowner1sController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of Testcarowner1sController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method Testcarowner1sController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<Testcarowner1>>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Testcarowner1s
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetTestcarowner1s, @IActionResult
        proc
            mreturn Ok(_DbContext.Testcarowner1s.AsNoTracking())
        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Testcarowner1),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Testcarowner1 by primary key.
        ;;; </summary>
        ;;; <param name="aId">Owner ID</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetTestcarowner1, @SingleResult<Testcarowner1>
            {FromODataUri}
            required in aId, int
        proc
            mreturn new SingleResult<Testcarowner1>(_DbContext.Testcarowner1s.AsNoTracking().FindQuery<Testcarowner1>(_DbContext, aId))
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Testcarowner1),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost}
        ;;; <summary>
        ;;; Create a new testcarowner1 (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostTestcarowner1, @IActionResult
            {FromBody}
            required in aTestcarowner1, @Testcarowner1
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("Id")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aTestcarowner1)

            ;;Add the new testcarowner1
            try
            begin
                _DbContext.Testcarowner1s.Add(aTestcarowner1)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aTestcarowner1)

        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPut}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a testcarowner1.
        ;;; </summary>
        ;;; <param name="aId">Owner ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutTestcarowner1, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aTestcarowner1, @Testcarowner1
        proc

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aTestcarowner1.Id = aId

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Testcarowner1s.Find(aId)
                if(existing == ^null) then
                begin
                    _DbContext.Testcarowner1s.Add(aTestcarowner1)
                    _DbContext.SaveChanges()
                    mreturn Created(aTestcarowner1)
                end
                else
                begin
                    aTestcarowner1.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPatch}
        ;;; <summary>
        ;;; Patch  (partial update) a testcarowner1.
        ;;; </summary>
        ;;; <param name="aId">Owner ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchTestcarowner1, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aTestcarowner1, @JsonPatchDocument<Testcarowner1>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing testcarowner1
            try
            begin
                ;;Get the testcarowner1 to be updated
                data testcarowner1ToUpdate = _DbContext.Testcarowner1s.Find(aId)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(testcarowner1ToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the testcarowner1 we read
                aTestcarowner1.ApplyTo(testcarowner1ToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Testcarowner1s.Update(testcarowner1ToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {ODataRoute("(Id={aId})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpDelete}
        ;;; <summary>
        ;;; Delete a testcarowner1.
        ;;; </summary>
        ;;; <param name="aId">Owner ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteTestcarowner1, @IActionResult
            {FromODataUri}
            required in aId, int
        proc
            ;;Get the testcarowner1 to be deleted
            data testcarowner1ToRemove = _DbContext.Testcarowner1s.Find(aId)

            ;;Did we find it?
            if (testcarowner1ToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Testcarowner1s.Remove(testcarowner1ToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace