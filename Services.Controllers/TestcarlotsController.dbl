;;*****************************************************************************
;;
;; Title:       TestcarlotsController.dbl
;;
;; Description: OData controller for the TESTCARLOT structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {ApiVersion("1")}
    {ODataRoutePrefix("Testcarlots")}
    ;;; <summary>
    ;;; OData controller for Testcarlots
    ;;; </summary>
    public partial class TestcarlotsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of TestcarlotsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method TestcarlotsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<Testcarlot>>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Testcarlots
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetTestcarlots, @IActionResult
        proc
            mreturn Ok(_DbContext.Testcarlots.AsNoTracking())
        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Testcarlot),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Testcarlot by primary key.
        ;;; </summary>
        ;;; <param name="aId">Car lot ID</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetTestcarlot, @SingleResult<Testcarlot>
            {FromODataUri}
            required in aId, int
        proc
            mreturn new SingleResult<Testcarlot>(_DbContext.Testcarlots.AsNoTracking().FindQuery<Testcarlot>(_DbContext, aId))
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Testcarlot),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost}
        ;;; <summary>
        ;;; Create a new testcarlot (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostTestcarlot, @IActionResult
            {FromBody}
            required in aTestcarlot, @Testcarlot
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("Id")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aTestcarlot)

            ;;Add the new testcarlot
            try
            begin
                _DbContext.Testcarlots.Add(aTestcarlot)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aTestcarlot)

        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPut}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a testcarlot.
        ;;; </summary>
        ;;; <param name="aId">Car lot ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutTestcarlot, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aTestcarlot, @Testcarlot
        proc

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aTestcarlot.Id = aId

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Testcarlots.Find(aId)
                if(existing == ^null) then
                begin
                    _DbContext.Testcarlots.Add(aTestcarlot)
                    _DbContext.SaveChanges()
                    mreturn Created(aTestcarlot)
                end
                else
                begin
                    aTestcarlot.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPatch}
        ;;; <summary>
        ;;; Patch  (partial update) a testcarlot.
        ;;; </summary>
        ;;; <param name="aId">Car lot ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchTestcarlot, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aTestcarlot, @JsonPatchDocument<Testcarlot>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing testcarlot
            try
            begin
                ;;Get the testcarlot to be updated
                data testcarlotToUpdate = _DbContext.Testcarlots.Find(aId)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(testcarlotToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the testcarlot we read
                aTestcarlot.ApplyTo(testcarlotToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Testcarlots.Update(testcarlotToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {ODataRoute("(Id={aId})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpDelete}
        ;;; <summary>
        ;;; Delete a testcarlot.
        ;;; </summary>
        ;;; <param name="aId">Car lot ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteTestcarlot, @IActionResult
            {FromODataUri}
            required in aId, int
        proc
            ;;Get the testcarlot to be deleted
            data testcarlotToRemove = _DbContext.Testcarlots.Find(aId)

            ;;Did we find it?
            if (testcarlotToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Testcarlots.Remove(testcarlotToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace