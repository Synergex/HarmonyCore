;;*****************************************************************************
;;
;; Title:       data64kService.dbl
;;
;; Description: Service to expose methods that are part of the former
;;              xfServerPlus / xfNetLink "data64k" interface.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.EF.Extensions
import Harmony.OData
import Harmony.OData.Adapter
import System.Threading.Tasks
import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData
import Microsoft.AspNetCore.Authorization
import Newtonsoft.Json.Linq
import System.Linq

import Services.Models

namespace Services.Controllers

    public partial class data64kService extends DynamicCallProvider

        static IsInitialized, boolean

        static method data64kService
        proc
            DataObjectMetadataBase.LookupType(^typeof(Dataset))

            ;;If there is a data64kServiceCustom method, call it
            data64kServiceCustom()

            IsInitialized = true

        endmethod

        ;;; <summary>
        ;;; Partial method to allow custom constructor code.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial static method data64kServiceCustom, void

        endmethod

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        public method data64kService
            connection, @IDynamicCallConnection
            endparams
            parent(connection)
        proc
            if(!IsInitialized)
                throw new Exception("cctor missing")
        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method P1StrAryO64k, @Task<data64k.P1StrAryO64k_Response>
            required in args, @data64k.P1StrAryO64k_Request
        proc
            ;;Prepare the response object
            data response = new data64k.P1StrAryO64k_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("P1StrAryO64k"
            &   ,args.DATASET
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.DATASET)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method BinaryArrayTest, @Task<data64k.BinaryArrayTest_Response>
            required in args, @data64k.BinaryArrayTest_Request
        proc
            ;;Prepare the response object
            data response = new data64k.BinaryArrayTest_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("BinaryArrayTest"
            &   ,args.decparm1
            &   ,args.inba
            &   ,args.alparm
            &   ,response.outba
            &   ,args.idparm
            &   ,args.inoutba
            &   ,args.decparm2
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.decparm1)
            ArgumentHelper.Argument(3, resultTuple, response.alparm)
            ArgumentHelper.Argument(4, resultTuple, response.outba)
            ArgumentHelper.Argument(5, resultTuple, response.idparm)
            ArgumentHelper.Argument(6, resultTuple, response.inoutba)
            ArgumentHelper.Argument(7, resultTuple, response.decparm2)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method inBinaryArrayTest, @Task
            required in args, @data64k.inBinaryArrayTest_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("inBinaryArrayTest"
            &   ,args.inBA
            &   )
        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method inHandle, @Task
            required in args, @data64k.inHandle_Request
        proc
            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("inHandle"
            &   ,args.p1
            &   )
        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method inOutBinaryArrayTest, @Task<data64k.inOutBinaryArrayTest_Response>
            required in args, @data64k.inOutBinaryArrayTest_Request
        proc
            ;;Prepare the response object
            data response = new data64k.inOutBinaryArrayTest_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("inOutBinaryArrayTest"
            &   ,args.inoutba
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.inoutba)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method inoutHandle, @Task<data64k.inoutHandle_Response>
            required in args, @data64k.inoutHandle_Request
        proc
            ;;Prepare the response object
            data response = new data64k.inoutHandle_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("inoutHandle"
            &   ,args.p1
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.p1)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method inoutHandle2, @Task<data64k.inoutHandle2_Response>
            required in args, @data64k.inoutHandle2_Request
        proc
            ;;Prepare the response object
            data response = new data64k.inoutHandle2_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("inoutHandle2"
            &   ,args.p1
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.p1)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method outBinaryArrayTest, @Task<data64k.outBinaryArrayTest_Response>
        proc
            ;;Prepare the response object
            data response = new data64k.outBinaryArrayTest_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("outBinaryArrayTest"
            &   ,response.outba
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.outba)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method outFileBinaryArrayTest, @Task<data64k.outFileBinaryArrayTest_Response>
            required in args, @data64k.outFileBinaryArrayTest_Request
        proc
            ;;Prepare the response object
            data response = new data64k.outFileBinaryArrayTest_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("outFileBinaryArrayTest"
            &   ,args.filename
            &   ,response.outba
            &   )

            ArgumentHelper.Argument(2, resultTuple, response.outba)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method outHandle, @Task<data64k.outHandle_Response>
        proc
            ;;Prepare the response object
            data response = new data64k.outHandle_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("outHandle"
            &   ,response.p1
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.p1)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method twoparmsrtn, @Task<data64k.twoparmsrtn_Response>
            required in args, @data64k.twoparmsrtn_Request
        proc
            ;;Prepare the response object
            data response = new data64k.twoparmsrtn_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("twoparmsrtn"
            &   ,args.P1Handle
            &   ,ArgumentHelper.MaybeNull(response.P2Alpha)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.P1Handle)
            ArgumentHelper.Argument(2, resultTuple, response.P2Alpha)

            ;;Return the response
            mreturn response

        endmethod

    endclass

endnamespace
