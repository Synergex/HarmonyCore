;;*****************************************************************************
;;
;; Title:       SampleXfplEnvService.dbl
;;
;; Description: Service to expose methods that are part of the former
;;              xfServerPlus / xfNetLink "SampleXfplEnv" interface.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.EF.Extensions
import Harmony.OData
import Harmony.OData.Adapter
import System.Threading.Tasks
import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData
import Microsoft.AspNetCore.Authorization
import Newtonsoft.Json.Linq
import System.Linq

import Services.Models

namespace Services.Controllers

    public partial class SampleXfplEnvService extends DynamicCallProvider

        static IsInitialized, boolean

        static method SampleXfplEnvService
        proc
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Item))
            DataObjectMetadataBase.LookupType(^typeof(Order))
            DataObjectMetadataBase.LookupType(^typeof(Vendor))
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Customer))
            DataObjectMetadataBase.LookupType(^typeof(Customer))

            ;;If there is a SampleXfplEnvServiceCustom method, call it
            SampleXfplEnvServiceCustom()

            IsInitialized = true

        endmethod

        ;;; <summary>
        ;;; Partial method to allow custom constructor code.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial static method SampleXfplEnvServiceCustom, void

        endmethod

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        public method SampleXfplEnvService
            connection, @IDynamicCallConnection
            endparams
            parent(connection)
        proc
            if(!IsInitialized)
                throw new Exception("cctor missing")
        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method ArrayListParameters, @Task<SampleXfplEnv.ArrayListParameters_Response>
            required in args, @SampleXfplEnv.ArrayListParameters_Request
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.ArrayListParameters_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ArrayListParameters"
            &   ,args.p1
            &   ,ArgumentHelper.MaybeNull(response.p2)
            &   ,args.p4
            &   ,ArgumentHelper.MaybeNull(response.p5)
            &   ,args.p7
            &   ,ArgumentHelper.MaybeNull(response.p8)
            &   ,args.p10
            &   ,ArgumentHelper.MaybeNull(response.p11)
            &   ,args.p13
            &   ,ArgumentHelper.MaybeNull(response.p14)
            &   ,args.p16
            &   ,ArgumentHelper.MaybeNull(response.p17)
            &   ,args.p19
            &   ,ArgumentHelper.MaybeNull(response.p20)
            &   ,args.p22
            &   ,ArgumentHelper.MaybeNull(response.p23)
            &   ,args.p25
            &   ,ArgumentHelper.MaybeNull(response.p26)
            &   ,args.p28
            &   ,ArgumentHelper.MaybeNull(response.p29)
            &   ,args.p31
            &   ,ArgumentHelper.MaybeNull(response.p32)
            &   ,args.p34
            &   ,ArgumentHelper.MaybeNull(response.p35)
            &   ,args.p37
            &   ,ArgumentHelper.MaybeNull(response.p38)
            &   ,args.p40
            &   ,ArgumentHelper.MaybeNull(response.p41)
            &   ,args.p43
            &   ,ArgumentHelper.MaybeNull(response.p44)
            &   ,args.p46
            &   ,ArgumentHelper.MaybeNull(response.p47)
            &   ,args.p49
            &   ,ArgumentHelper.MaybeNull(response.p50)
            &   )

            ArgumentHelper.Argument(2, resultTuple, response.p2)
            ArgumentHelper.Argument(4, resultTuple, response.p5)
            ArgumentHelper.Argument(6, resultTuple, response.p8)
            ArgumentHelper.Argument(8, resultTuple, response.p11)
            ArgumentHelper.Argument(10, resultTuple, response.p14)
            ArgumentHelper.Argument(12, resultTuple, response.p17)
            ArgumentHelper.Argument(14, resultTuple, response.p20)
            ArgumentHelper.Argument(16, resultTuple, response.p23)
            ArgumentHelper.Argument(18, resultTuple, response.p26)
            ArgumentHelper.Argument(20, resultTuple, response.p29)
            ArgumentHelper.Argument(22, resultTuple, response.p32)
            ArgumentHelper.Argument(24, resultTuple, response.p35)
            ArgumentHelper.Argument(26, resultTuple, response.p38)
            ArgumentHelper.Argument(28, resultTuple, response.p41)
            ArgumentHelper.Argument(30, resultTuple, response.p44)
            ArgumentHelper.Argument(32, resultTuple, response.p47)
            ArgumentHelper.Argument(34, resultTuple, response.p50)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method ArrayParameters, @Task<SampleXfplEnv.ArrayParameters_Response>
            required in args, @SampleXfplEnv.ArrayParameters_Request
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.ArrayParameters_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("ArrayParameters"
            &   ,args.p1
            &   ,ArgumentHelper.MaybeNull(response.p2)
            &   ,args.p3
            &   ,args.p25
            &   ,ArgumentHelper.MaybeNull(response.p26)
            &   ,args.p27
            &   )

            ArgumentHelper.Argument(2, resultTuple, response.p2)
            ArgumentHelper.Argument(3, resultTuple, response.p3)
            ArgumentHelper.Argument(5, resultTuple, response.p26)
            ArgumentHelper.Argument(6, resultTuple, response.p27)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method GetAllCustomers, @Task<SampleXfplEnv.GetAllCustomers_Response>
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.GetAllCustomers_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("GetAllCustomers"
            &   ,ArgumentHelper.MaybeNull(response.Customers)
            &   ,ArgumentHelper.MaybeNull(response.ErrorMessage)
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Customers)
            ArgumentHelper.Argument(2, resultTuple, response.ErrorMessage)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method GetAllItems, @Task<SampleXfplEnv.GetAllItems_Response>
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.GetAllItems_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("GetAllItems"
            &   ,ArgumentHelper.MaybeNull(response.Items)
            &   ,ArgumentHelper.MaybeNull(response.ErrorMessage)
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Items)
            ArgumentHelper.Argument(2, resultTuple, response.ErrorMessage)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method GetAllOrders, @Task<SampleXfplEnv.GetAllOrders_Response>
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.GetAllOrders_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("GetAllOrders"
            &   ,ArgumentHelper.MaybeNull(response.Orders)
            &   ,ArgumentHelper.MaybeNull(response.ErrorMessage)
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Orders)
            ArgumentHelper.Argument(2, resultTuple, response.ErrorMessage)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method GetAllVendors, @Task<SampleXfplEnv.GetAllVendors_Response>
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.GetAllVendors_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("GetAllVendors"
            &   ,ArgumentHelper.MaybeNull(response.Vendors)
            &   ,ArgumentHelper.MaybeNull(response.ErrorMessage)
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Vendors)
            ArgumentHelper.Argument(2, resultTuple, response.ErrorMessage)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method GetCustomerArray, @Task<SampleXfplEnv.GetCustomerArray_Response>
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.GetCustomerArray_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("GetCustomerArray"
            &   ,ArgumentHelper.MaybeNull(response.Customers)
            &   ,ArgumentHelper.MaybeNull(response.ErrorMessage)
            &   )

             ;;Set the return value in the return data
            ArgumentHelper.Argument(0, resultTuple, response.ReturnValue)

            ArgumentHelper.Argument(1, resultTuple, response.Customers)
            ArgumentHelper.Argument(2, resultTuple, response.ErrorMessage)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method SimpleParameters, @Task<SampleXfplEnv.SimpleParameters_Response>
            required in args, @SampleXfplEnv.SimpleParameters_Request
        proc
            ;;Prepare the response object
            data response = new SampleXfplEnv.SimpleParameters_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("SimpleParameters"
            &   ,args.p1
            &   ,ArgumentHelper.MaybeNull(response.p2)
            &   ,args.p3
            &   ,args.p4
            &   ,response.p5
            &   ,args.p6
            &   ,args.p7
            &   ,response.p8
            &   ,args.p9
            &   ,args.p10
            &   ,response.p11
            &   ,args.p12
            &   ,args.p13
            &   ,response.p14
            &   ,args.p15
            &   ,args.p16
            &   ,response.p17
            &   ,args.p18
            &   ,args.p19
            &   ,response.p20
            &   ,args.p21
            &   ,args.p22
            &   ,response.p23
            &   ,args.p24
            &   ,args.p25
            &   ,ArgumentHelper.MaybeNull(response.p26)
            &   ,args.p27
            &   ,args.p28
            &   ,response.p29
            &   ,args.p30
            &   ,args.p31
            &   ,response.p32
            &   ,args.p33
            &   ,args.p34
            &   ,response.p35
            &   ,args.p36
            &   ,args.p37
            &   ,response.p38
            &   ,args.p39
            &   ,args.p40
            &   ,response.p41
            &   ,args.p42
            &   ,args.p43
            &   ,response.p44
            &   ,args.p45
            &   ,args.p46
            &   ,response.p47
            &   ,args.p48
            &   ,args.p49
            &   ,response.p50
            &   ,args.p51
            &   ,args.p52
            &   ,response.p53
            &   ,args.p54
            &   ,args.p55
            &   ,response.p56
            &   ,args.p57
            &   ,args.p58
            &   ,response.p59
            &   ,args.p60
            &   )

            ArgumentHelper.Argument(2, resultTuple, response.p2)
            ArgumentHelper.Argument(3, resultTuple, response.p3)
            ArgumentHelper.Argument(5, resultTuple, response.p5)
            ArgumentHelper.Argument(6, resultTuple, response.p6)
            ArgumentHelper.Argument(8, resultTuple, response.p8)
            ArgumentHelper.Argument(9, resultTuple, response.p9)
            ArgumentHelper.Argument(11, resultTuple, response.p11)
            ArgumentHelper.Argument(12, resultTuple, response.p12)
            ArgumentHelper.Argument(14, resultTuple, response.p14)
            ArgumentHelper.Argument(15, resultTuple, response.p15)
            ArgumentHelper.Argument(17, resultTuple, response.p17)
            ArgumentHelper.Argument(18, resultTuple, response.p18)
            ArgumentHelper.Argument(20, resultTuple, response.p20)
            ArgumentHelper.Argument(21, resultTuple, response.p21)
            ArgumentHelper.Argument(23, resultTuple, response.p23)
            ArgumentHelper.Argument(24, resultTuple, response.p24)
            ArgumentHelper.Argument(26, resultTuple, response.p26)
            ArgumentHelper.Argument(27, resultTuple, response.p27)
            ArgumentHelper.Argument(29, resultTuple, response.p29)
            ArgumentHelper.Argument(30, resultTuple, response.p30)
            ArgumentHelper.Argument(32, resultTuple, response.p32)
            ArgumentHelper.Argument(33, resultTuple, response.p33)
            ArgumentHelper.Argument(35, resultTuple, response.p35)
            ArgumentHelper.Argument(36, resultTuple, response.p36)
            ArgumentHelper.Argument(38, resultTuple, response.p38)
            ArgumentHelper.Argument(39, resultTuple, response.p39)
            ArgumentHelper.Argument(41, resultTuple, response.p41)
            ArgumentHelper.Argument(42, resultTuple, response.p42)
            ArgumentHelper.Argument(44, resultTuple, response.p44)
            ArgumentHelper.Argument(45, resultTuple, response.p45)
            ArgumentHelper.Argument(47, resultTuple, response.p47)
            ArgumentHelper.Argument(48, resultTuple, response.p48)
            ArgumentHelper.Argument(50, resultTuple, response.p50)
            ArgumentHelper.Argument(51, resultTuple, response.p51)
            ArgumentHelper.Argument(53, resultTuple, response.p53)
            ArgumentHelper.Argument(54, resultTuple, response.p54)
            ArgumentHelper.Argument(56, resultTuple, response.p56)
            ArgumentHelper.Argument(57, resultTuple, response.p57)
            ArgumentHelper.Argument(59, resultTuple, response.p59)
            ArgumentHelper.Argument(60, resultTuple, response.p60)

            ;;Return the response
            mreturn response

        endmethod

    endclass

endnamespace
