;;*****************************************************************************
;;
;; Title:       CustomerNotesController.dbl
;;
;; Description: OData controller for the CUSTOMER_NOTES structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Net.Mime
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Produces("application/json")}
    ;;; <summary>
    ;;; Customer notes
    ;;; </summary>
    ;;; <remarks>
    ;;; OData endpoints for Customer notes
    ;;; </remarks>
    public partial class CustomerNotesController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of CustomerNotesController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method CustomerNotesController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("CustomerNotes")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<CustomerNote>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query the entire collection of records
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetCustomerNotes, @IActionResult
        proc
            mreturn Ok(_DbContext.CustomerNotes.AsNoTracking())
        endmethod

        {HttpGet("CustomerNotes(CustomerNumber={aCustomerNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<CustomerNote>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique primary key
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="123">Customer number</param>
        ;;; <returns>Returns a collection of any CustomerNotes matching non-unique primary key, or an empty collection if no matching records are found.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetCustomerNotesByPK, @IActionResult
            required in aCustomerNumber, int
        proc
            mreturn Ok(_DbContext.CustomerNotes.AsNoTracking().FindQuery<CustomerNote>(_DbContext,aCustomerNumber))
        endmethod

        {HttpPut("CustomerNotes(CustomerNumber={aCustomerNumber})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Update a record if it exists otherwise create a new record (primary key provided by client)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="123">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="201">Created. The entity was created but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PutCustomerNoteByCustomerNumber, @IActionResult
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomerNote, @CustomerNote
        proc
            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aCustomerNote.CustomerNumber = aCustomerNumber
            ModelState.Remove("CustomerNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)


            try
            begin
                _DbContext.CustomerNotes.Add(aCustomerNote)
                _DbContext.SaveChanges()
                mreturn Created(aCustomerNote)
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {HttpPatch("CustomerNotes(CustomerNumber={aCustomerNumber})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch (partial update) an existing record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="123">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PatchCustomerNoteByCustomerNumber, @IActionResult
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomerNote, @JsonPatchDocument<CustomerNote>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing customerNote
            try
            begin
                ;;Get the customerNote to be updated
                data customerNoteToUpdate = _DbContext.CustomerNotes.FindQuery<CustomerNote>(aCustomerNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(customerNoteToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the customerNote we read
                data item, @CustomerNote
                foreach item in customerNoteToUpdate
                begin
                    aCustomerNote.ApplyTo(item, lambda(error) { patchError = error })
                    ;;if the patchdoc was bad return the error info
                    if(patchError != ^null)
                        mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                    ;;Update and commit
                    _DbContext.CustomerNotes.Update(item)
                end
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {HttpDelete("CustomerNotes(CustomerNumber={aCustomerNumber})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="123">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method DeleteCustomerNoteByCustomerNumber, @IActionResult
            required in aCustomerNumber, int
        proc
            ;;Get the customerNote to be deleted
            data customerNoteToRemove = _DbContext.CustomerNotes.FindQuery<CustomerNote>(aCustomerNumber)

            ;;Did we find it?
            if (customerNoteToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            data item, @CustomerNote
            foreach item in customerNoteToRemove
            begin
                _DbContext.CustomerNotes.Remove(item)
            end
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace
