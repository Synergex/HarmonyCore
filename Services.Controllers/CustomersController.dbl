;;*****************************************************************************
;;
;; Title:       CustomersController.dbl
;;
;; Description: OData controller for the CUSTOMERS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for Customers
    ;;; </summary>
    public partial class CustomersController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of CustomersController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method CustomersController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("Customers")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customer>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Customers
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomers, @IActionResult
        proc
            mreturn Ok(_DbContext.Customers.AsNoTracking())
        endmethod

        {HttpGet("Customers(CustomerNumber={aCustomerNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Customer),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Customer by primary key.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomer, @SingleResult<Customer>
            {FromODataUri}
            required in aCustomerNumber, int
        proc
            mreturn new SingleResult<Customer>(_DbContext.Customers.AsNoTracking().FindQuery<Customer>(_DbContext, aCustomerNumber))
        endmethod

        {HttpGet("Customers(State={aState})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customer>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get customers by alternate key key State.
        ;;; </summary>
        ;;; <param name="aState">State</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomersByState, @IActionResult
            {FromODataUri}
            required in aState, String
        proc
            data result = _DbContext.Customers.AsNoTracking().FindAlternate("State",aState)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Customers(ZipCode={aZipCode})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customer>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get customers by alternate key key Zip.
        ;;; </summary>
        ;;; <param name="aZipCode">Zip code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomersByZip, @IActionResult
            {FromODataUri}
            required in aZipCode, int
        proc
            data result = _DbContext.Customers.AsNoTracking().FindAlternate("ZipCode",aZipCode)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Customers(PaymentTermsCode={aPaymentTermsCode})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customer>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get customers by alternate key key PaymentTerms.
        ;;; </summary>
        ;;; <param name="aPaymentTermsCode">Payment terms code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomersByPaymentTerms, @IActionResult
            {FromODataUri}
            required in aPaymentTermsCode, String
        proc
            data result = _DbContext.Customers.AsNoTracking().FindAlternate("PaymentTermsCode",aPaymentTermsCode)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {Produces("application/json")}
        {ProducesResponseType(^typeof(Customer),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost("Customers")}
        ;;; <summary>
        ;;; Create a new customer (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostCustomer, @IActionResult
            {FromBody}
            required in aCustomer, @Customer
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("CustomerNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aCustomer)

            ;;Add the new customer
            try
            begin
                _DbContext.Customers.Add(aCustomer)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aCustomer)

        endmethod

        {HttpPut("Customers(CustomerNumber={aCustomerNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a customer.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutCustomer, @IActionResult
            {FromODataUri}
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomer, @Customer
        proc

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aCustomer.CustomerNumber = aCustomerNumber

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Customers.Find(aCustomerNumber)
                if(existing == ^null) then
                begin
                    _DbContext.Customers.Add(aCustomer)
                    _DbContext.SaveChanges()
                    mreturn Created(aCustomer)
                end
                else
                begin
                    aCustomer.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {HttpPatch("Customers(CustomerNumber={aCustomerNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch  (partial update) a customer.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchCustomer, @IActionResult
            {FromODataUri}
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomer, @JsonPatchDocument<Customer>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing customer
            try
            begin
                ;;Get the customer to be updated
                data customerToUpdate = _DbContext.Customers.Find(aCustomerNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(customerToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the customer we read
                aCustomer.ApplyTo(customerToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Customers.Update(customerToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {HttpDelete("Customers(CustomerNumber={aCustomerNumber})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a customer.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteCustomer, @IActionResult
            {FromODataUri}
            required in aCustomerNumber, int
        proc
            ;;Get the customer to be deleted
            data customerToRemove = _DbContext.Customers.Find(aCustomerNumber)

            ;;Did we find it?
            if (customerToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Customers.Remove(customerToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace
