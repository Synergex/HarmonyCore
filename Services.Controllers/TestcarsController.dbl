;;*****************************************************************************
;;
;; Title:       TestcarsController.dbl
;;
;; Description: OData controller for the TESTCAR structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Net.Mime
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Produces("application/json")}
    ;;; <summary>
    ;;; Test car
    ;;; </summary>
    ;;; <remarks>
    ;;; OData endpoints for Test car
    ;;; </remarks>
    public partial class TestcarsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of TestcarsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method TestcarsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("Testcars")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Testcar>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query the entire collection of records
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetTestcars, @IActionResult
        proc
            mreturn Ok(_DbContext.Testcars.AsNoTracking())
        endmethod

        {HttpGet("Testcars(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Testcar),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a single record identified by unique primary key
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">Car ID</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetTestcarByPK, @SingleResult<Testcar>
            required in aId, int
        proc
            mreturn new SingleResult<Testcar>(_DbContext.Testcars.AsNoTracking().FindQuery<Testcar>(_DbContext,aId))
        endmethod

        {HttpGet("Testcars(Lotid={aLotid})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Testcar>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Lotid
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aLotid" example="123">Car lot ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetTestcarsByLotid, @IActionResult
            required in aLotid, int
        proc
            data result = _DbContext.Testcars.AsNoTracking().FindAlternate("Lotid",aLotid)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Testcars(Owner1={aOwner1})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Testcar>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Ownerid1
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aOwner1" example="123">Car owner 1</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetTestcarsByOwnerid1, @IActionResult
            required in aOwner1, int
        proc
            data result = _DbContext.Testcars.AsNoTracking().FindAlternate("Owner1",aOwner1)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Testcars(Owner2={aOwner2})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Testcar>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Ownerid2
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aOwner2" example="123">Car owner 2</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetTestcarsByOwnerid2, @IActionResult
            required in aOwner2, int
        proc
            data result = _DbContext.Testcars.AsNoTracking().FindAlternate("Owner2",aOwner2)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Testcars(Owner3={aOwner3})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Testcar>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Ownerid3
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aOwner3" example="123">Car owner 3</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetTestcarsByOwnerid3, @IActionResult
            required in aOwner3, int
        proc
            data result = _DbContext.Testcars.AsNoTracking().FindAlternate("Owner3",aOwner3)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Testcar),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost("Testcars")}
        ;;; <summary>
        ;;; Create a new record (automatically assigned primary key)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PostTestcar, @IActionResult
            {FromBody}
            required in aTestcar, @Testcar
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("Id")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aTestcar)

            ;;Add the new testcar
            try
            begin
                _DbContext.Testcars.Add(aTestcar)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aTestcar)

        endmethod

        {HttpPut("Testcars(Id={aId})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Update a record if it exists otherwise create a new record (primary key provided by client)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">Car ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="201">Created. The entity was created but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PutTestcar, @IActionResult
            required in aId, int
            {FromBody}
            required in aTestcar, @Testcar
        proc

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aTestcar.Id = aId

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Testcars.Find(aId)
                if(existing == ^null) then
                begin
                    _DbContext.Testcars.Add(aTestcar)
                    _DbContext.SaveChanges()
                    mreturn Created(aTestcar)
                end
                else
                begin
                    aTestcar.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {HttpPatch("Testcars(Id={aId})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch (partial update) an existing record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">Car ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PatchTestcar, @IActionResult
            required in aId, int
            {FromBody}
            required in aTestcar, @JsonPatchDocument<Testcar>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing testcar
            try
            begin
                ;;Get the testcar to be updated
                data testcarToUpdate = _DbContext.Testcars.Find(aId)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(testcarToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the testcar we read
                aTestcar.ApplyTo(testcarToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Testcars.Update(testcarToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {HttpDelete("Testcars(Id={aId})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aId" example="123">Car ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method DeleteTestcar, @IActionResult
            required in aId, int
        proc
            ;;Get the testcar to be deleted
            data testcarToRemove = _DbContext.Testcars.Find(aId)

            ;;Did we find it?
            if (testcarToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Testcars.Remove(testcarToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace
