import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNetCore.SignalR
import System.Threading.Tasks
import Harmony.Core.Context

namespace Services.Controllers

	public class OrdersHub extends Hub<IOrdersHubClient>

        class ExternalCallContextCallbacks implements IExternalCallContextCallbacks
            internal connectionId, @string
            private tcs, @TaskCompletionSource<[#]string>
            private hub, @IHubContext<OrdersHub>
            private clients, @IHubClients<IOrdersHubClient>
            private hubClientType, @Type
            public method ExternalCallContextCallbacks
                hub, @OrdersHub
                callers, @IHubClients<IOrdersHubClient>
            proc
                clients = callers
                this.hub = hub._context
            endmethod

            internal method MaybeResponse, void
                response, [#]string
            proc
                if(tcs != ^null)
                    tcs.TrySetResult(response)
            endmethod 

            public async method Maybe, @Task<[#]string>
                param1, @string
                param2, @string
            proc  
                data client = clients.Client(connectionId)
                
                ;serviceProvider.GetService()
                tcs = new TaskCompletionSource<[#]string>()
                data maybeTask, @Task, client.Maybe(param1, param2)
                await maybeTask
                mreturn await tcs.Task
            endmethod
        endclass


        private _contextFactory, @IContextFactory<ExternalCallContext>
        private _context, @IHubContext<OrdersHub>
        private _clients, @IHubClients<IOrdersHubClient>
        private _serviceProvider, @IServiceProvider
        public method OrdersHub
            contextFactory, @IContextFactory<ExternalCallContext>
            hubContext, @IHubContext<OrdersHub>
            serviceProvider, @IServiceProvider
        proc
            _context = hubContext
            _contextFactory = contextFactory
            _serviceProvider = serviceProvider
            data hubClientType = ^typeof(IHubContext<OrdersHub>).Assembly.GetType("Microsoft.AspNetCore.SignalR.IHubContext`2").MakeGenericType(new Type[#] { ^typeof(OrdersHub), ^typeof(IOrdersHubClient) }) 
            _clients = (@IHubClients<IOrdersHubClient>) hubClientType.GetProperty("Clients").GetValue(serviceProvider.GetService(hubClientType))
        endmethod

        public override async method OnConnectedAsync, @Task
        proc
            await parent.OnConnectedAsync()
            data madeContext, @ExternalCallContext
            madeContext = await _contextFactory.MakeContextAsync(_serviceProvider)
            data callbacks = new OrdersHub.ExternalCallContextCallbacks(this, _clients)
            Context.Items.Add("Callbacks", callbacks)
            madeContext.InitCallbacks(callbacks)
            Context.Items.Add("RPCContext", madeContext)
        endmethod

        public override async method OnDisconnectedAsync, @Task
            ex, @Exception
        proc
            data contextObject, @Object
            await parent.OnDisconnectedAsync(ex)
            if(Context.Items.TryGetValue("RPCContext", contextObject))
            begin
                data callContext = ^as(contextObject, @ExternalCallContext)
                if(callContext != ^null)
                begin
                    _contextFactory.ReturnContext(callContext)
                end
            end
        endmethod

        public method MaybeResponse, void
            strings, [#]string
        proc
            data callback = ^as(Context.Items["Callbacks"], @OrdersHub.ExternalCallContextCallbacks)
            callback.MaybeResponse(strings)
        endmethod

        public async method Arbitrario_MethodWithParameters, void
            aNumber, int
            aString, @string
            aStringArray, [#]string
            aIntArray, [#]int
        proc
            data callback = ^as(Context.Items["Callbacks"], @OrdersHub.ExternalCallContextCallbacks)
            callback.connectionId = Context.ConnectionId
            data callContext = ^as(Context.Items["RPCContext"], @ExternalCallContext)
            data result = await callContext.Arbitrario_MethodWithParameters2(aNumber, aString, aStringArray, aIntArray)
            await _clients.Client(callback.connectionId).Arbitrario_MethodWithParametersResult(result)
        endmethod

        public async method Arbitrario_Optional, @Task
            parm, @ExternalCallContext.ArbitrarioOptionalParameter
        proc
            data callback = ^as(Context.Items["Callbacks"], @OrdersHub.ExternalCallContextCallbacks)
            callback.connectionId = Context.ConnectionId
            data callContext = ^as(Context.Items["RPCContext"], @ExternalCallContext)
            data result = await callContext.Arbitrario_Optional(parm)
            await _clients.Client(callback.connectionId).Arbitrario_OptionalResult(result)
        endmethod


	endclass

    public interface IOrdersHubClient
        method Arbitrario_MethodWithParametersResult, @Task
            param, @ExternalCallContext.ArbitrarioReturnType
        endmethod

        method Arbitrario_OptionalResult, @Task
            param, @ExternalCallContext.ArbitrarioOptionalReturnType
        endmethod
        
        method Maybe, @Task
            param1, @string
            param2, @string
        endmethod

    endinterface

    public static class HubTExtension
        
    endclass


endnamespace
