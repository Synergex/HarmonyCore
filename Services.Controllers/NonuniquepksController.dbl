;;*****************************************************************************
;;
;; Title:       NonuniquepksController.dbl
;;
;; Description: OData controller for the NONUNIQUEPK structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for Nonuniquepks
    ;;; </summary>
    public partial class NonuniquepksController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of NonuniquepksController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method NonuniquepksController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("Nonuniquepks")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Nonuniquepk>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Nonuniquepks
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetNonuniquepks, @IActionResult
        proc
            mreturn Ok(_DbContext.Nonuniquepks.AsNoTracking())
        endmethod

        {HttpGet("Nonuniquepks(Pk={aPk})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Nonuniquepk>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Nonuniquepks matching non-unique primary key.
        ;;; </summary>
        ;;; <param name="aPk">Primary Key</param>
        ;;; <returns>Returns a collection of any Nonuniquepks matching non-unique primary key, or an empty collection if no matching records are found.</returns>
        public method GetNonuniquepk, @IActionResult
            {FromODataUri}
            required in aPk, int
        proc
            mreturn Ok(_DbContext.Nonuniquepks.AsNoTracking().FindQuery<Nonuniquepk>(_DbContext, aPk))
        endmethod

        {HttpPut("Nonuniquepks(Pk={aPk})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a nonuniquepk.
        ;;; </summary>
        ;;; <param name="aPk">Primary Key</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutNonuniquepkByPk, @IActionResult
            {FromODataUri}
            required in aPk, int
            {FromBody}
            required in aNonuniquepk, @Nonuniquepk
        proc
            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aNonuniquepk.Pk = aPk
            ModelState.Remove("Pk")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)


            try
            begin
                _DbContext.Nonuniquepks.Add(aNonuniquepk)
                _DbContext.SaveChanges()
                mreturn Created(aNonuniquepk)
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {HttpPatch("Nonuniquepks(Pk={aPk})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch  (partial update) a nonuniquepk.
        ;;; </summary>
        ;;; <param name="aPk">Primary Key</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchNonuniquepkByPk, @IActionResult
            {FromODataUri}
            required in aPk, int
            {FromBody}
            required in aNonuniquepk, @JsonPatchDocument<Nonuniquepk>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing nonuniquepk
            try
            begin
                ;;Get the nonuniquepk to be updated
                data nonuniquepkToUpdate = _DbContext.Nonuniquepks.FindQuery<Nonuniquepk>(aPk)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(nonuniquepkToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the nonuniquepk we read
                data item, @Nonuniquepk
                foreach item in nonuniquepkToUpdate
                begin
                    aNonuniquepk.ApplyTo(item, lambda(error) { patchError = error })
                    ;;if the patchdoc was bad return the error info
                    if(patchError != ^null)
                        mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                    ;;Update and commit
                    _DbContext.Nonuniquepks.Update(item)
                end
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {HttpDelete("Nonuniquepks(Pk={aPk})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a nonuniquepk.
        ;;; </summary>
        ;;; <param name="aPk">Primary Key</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteNonuniquepkByPk, @IActionResult
            {FromODataUri}
            required in aPk, int
        proc
            ;;Get the nonuniquepk to be deleted
            data nonuniquepkToRemove = _DbContext.Nonuniquepks.FindQuery<Nonuniquepk>(aPk)

            ;;Did we find it?
            if (nonuniquepkToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            data item, @Nonuniquepk
            foreach item in nonuniquepkToRemove
            begin
                _DbContext.Nonuniquepks.Remove(item)
            end
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace
