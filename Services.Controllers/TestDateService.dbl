;;*****************************************************************************
;;
;; Title:       TestDateService.dbl
;;
;; Description: Service to expose methods that are part of the former
;;              xfServerPlus / xfNetLink "TestDate" interface.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.EF.Extensions
import Harmony.OData
import Harmony.OData.Adapter
import System.Threading.Tasks
import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData
import Microsoft.AspNetCore.Authorization
import Newtonsoft.Json.Linq
import System.Linq

import Services.Models

namespace Services.Controllers

    public partial class TestDateService extends DynamicCallProvider

        static IsInitialized, boolean

        static method TestDateService
        proc
            DataObjectMetadataBase.LookupType(^typeof(Datetimestr))
            DataObjectMetadataBase.LookupType(^typeof(Userdate))

            ;;If there is a TestDateServiceCustom method, call it
            TestDateServiceCustom()

            IsInitialized = true

        endmethod

        ;;; <summary>
        ;;; Partial method to allow custom constructor code.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial static method TestDateServiceCustom, void

        endmethod

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        public method TestDateService
            connection, @IDynamicCallConnection
            endparams
            parent(connection)
        proc
            if(!IsInitialized)
                throw new Exception("cctor missing")
        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method GetDate8, @Task<TestDate.GetDate8_Response>
            required in args, @TestDate.GetDate8_Request
        proc
            ;;Prepare the response object
            data response = new TestDate.GetDate8_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("GetDate8"
            &   ,args.idx
            &   ,ArgumentHelper.MaybeNull(response.dstruct)
            &   )

            ArgumentHelper.Argument(2, resultTuple, response.dstruct)

            ;;Return the response
            mreturn response

        endmethod

        ;;; <summary>
        ;;; No description found in method catalog
        ;;; </summary>
        public async method UserDates, @Task<TestDate.UserDates_Response>
        proc
            ;;Prepare the response object
            data response = new TestDate.UserDates_Response()

            ;;Make the JSON-RPC call the traditional Synergy routine
            data resultTuple = await CallMethod("UserDates"
            &   ,ArgumentHelper.MaybeNull(response.USERDATES)
            &   )

            ArgumentHelper.Argument(1, resultTuple, response.USERDATES)

            ;;Return the response
            mreturn response

        endmethod

    endclass

endnamespace
