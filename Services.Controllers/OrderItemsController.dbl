;;*****************************************************************************
;;
;; Title:       OrderItemsController.dbl
;;
;; Description: OData controller for the ORDER_ITEMS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {ApiVersion("1")}
    {ODataRoutePrefix("OrderItems")}
    ;;; <summary>
    ;;; OData controller for OrderItems
    ;;; </summary>
    public partial class OrderItemsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of OrderItemsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method OrderItemsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<OrderItem>>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all OrderItems
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItems, @IActionResult
        proc
            mreturn Ok(_DbContext.OrderItems.AsNoTracking())
        endmethod

        {ODataRoute("(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(OrderItem),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single OrderItem by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItem, @SingleResult<OrderItem>
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            mreturn new SingleResult<OrderItem>(_DbContext.OrderItems.AsNoTracking().FindQuery<OrderItem>(_DbContext, aOrderNumber,aItemNumber))
        endmethod

        {ODataRoute("(ItemOrdered={aItemOrdered})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<OrderItem>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItems by alternate key key ItemOrdered.
        ;;; </summary>
        ;;; <param name="aItemOrdered">Item ordered</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsByItemOrdered, @IActionResult
            {FromODataUri}
            required in aItemOrdered, int
        proc
            data result = _DbContext.OrderItems.AsNoTracking().FindAlternate("ItemOrdered",aItemOrdered)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("(DateShipped={aDateShipped})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<OrderItem>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItems by alternate key key DateShipped.
        ;;; </summary>
        ;;; <param name="aDateShipped">Date shipped</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsByDateShipped, @IActionResult
            {FromODataUri}
            required in aDateShipped, DateTime
        proc
            data result = _DbContext.OrderItems.AsNoTracking().FindAlternate("DateShipped",aDateShipped)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("(InvoiceNumber={aInvoiceNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<OrderItem>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItems by alternate key key InvoiceNumber.
        ;;; </summary>
        ;;; <param name="aInvoiceNumber">Invoice number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsByInvoiceNumber, @IActionResult
            {FromODataUri}
            required in aInvoiceNumber, int
        proc
            data result = _DbContext.OrderItems.AsNoTracking().FindAlternate("InvoiceNumber",aInvoiceNumber)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(OrderItem),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost}
        ;;; <summary>
        ;;; Create a new orderItem (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostOrderItem, @IActionResult
            {FromBody}
            required in aOrderItem, @OrderItem
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("OrderNumber")
            ModelState.Remove("ItemNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aOrderItem)

            ;;Add the new orderItem
            try
            begin
                _DbContext.OrderItems.Add(aOrderItem)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aOrderItem)

        endmethod

        {ODataRoute("(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPut}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a orderItem.
        ;;; </summary>

        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutOrderItem, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aOrderItem, @OrderItem
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aOrderItem.OrderNumber = aOrderNumber
            aOrderItem.ItemNumber = aItemNumber

            try
            begin
                ;;Add and commit
                data existing = _DbContext.OrderItems.Find(aOrderNumber,aItemNumber)
                if(existing == ^null) then
                begin
                    _DbContext.OrderItems.Add(aOrderItem)
                    _DbContext.SaveChanges()
                    mreturn Created(aOrderItem)
                end
                else
                begin
                    aOrderItem.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {ODataRoute("(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPatch}
        ;;; <summary>
        ;;; Patch  (partial update) a orderItem.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchOrderItem, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aOrderItem, @JsonPatchDocument<OrderItem>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing orderItem
            try
            begin
                ;;Get the orderItem to be updated
                data orderItemToUpdate = _DbContext.OrderItems.Find(aOrderNumber,aItemNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(orderItemToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the orderItem we read
                aOrderItem.ApplyTo(orderItemToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.OrderItems.Update(orderItemToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {ODataRoute("(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpDelete}
        ;;; <summary>
        ;;; Delete a orderItem.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteOrderItem, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            ;;Get the orderItem to be deleted
            data orderItemToRemove = _DbContext.OrderItems.Find(aOrderNumber,aItemNumber)

            ;;Did we find it?
            if (orderItemToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.OrderItems.Remove(orderItemToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace