;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template Name:   DATAOBJECT.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Converters
import System.ComponentModel.DataAnnotations
import Microsoft.EntityFrameworkCore
import Harmony.Core.Context
import Harmony.Core.Interface
import Microsoft.Extensions.DependencyInjection
import System.Diagnostics
import Harmony.Core.FileIO

namespace Harmony.Core.Test.FileIO.Models

	.include 'orders' repository  , structure = 'STROrders', end

    public partial class Orders extends Harmony.Core.DataObjectBase
        ;;make the record available and a copy
        private mSynergyData, STROrders 
		private mOriginalSynergyData, STROrders 
		protected mGlobalRFA  ,a10

		private static sMetadata, @OrdersMetadata
		static method Orders
		proc
			sMetadata = new OrdersMetadata()
			Harmony.Core.DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Orders), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Orders
            endparams
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Orders
			in req inData			,STROrders
			endparams
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @Harmony.Core.AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;{Contained}
		;;public readwrite property VinylRecords, @ICollection<Orders>

        {Key}
        {Required(ErrorMessage="Order number is required. ")}
        {Range(1,999999, ErrorMessage="Order number must be between 1 and 999999. ")}
        public property OrderNumber, int
            method get
            proc
                mreturn (int)mSynergyData.order_number
            endmethod
            method set
            proc
                mSynergyData.order_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customer number
        ;;; </summary>
        {Required(ErrorMessage="Customer number is required. ")}
        {Range(1,999999, ErrorMessage="Customer number must be between 1 and 999999. ")}
        public property CustomerNumber, int
            method get
            proc
                mreturn (int)mSynergyData.customer_number
            endmethod
            method set
            proc
                mSynergyData.customer_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Order placed by
        ;;; </summary>
        {Required(ErrorMessage="Order placed by is required. ")}
        {StringLength(25, ErrorMessage="Order placed by cannot exceed 25 characters. ")}
        public property PlacedBy, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.placed_by, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.placed_by = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customer order reference
        ;;; </summary>
        {StringLength(25, ErrorMessage="Customer order reference cannot exceed 25 characters. ")}
        public property CustomerReference, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.customer_reference, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.customer_reference = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Payment terms code
        ;;; </summary>
        {StringLength(2, ErrorMessage="Payment terms code cannot exceed 2 characters. ")}
        public property PaymentTermsCode, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.payment_terms_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.payment_terms_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Date ordered
        ;;; </summary>
        {Required(ErrorMessage="Date ordered is required. ")}
        public property DateOrdered, DateTime
            method get
            proc
                data formatString = "YYYYMMDD"
                mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.date_ordered, ^null, formatString, ^null)
            endmethod
            method set
            proc
                data formatString = "YYYYMMDD"
                mSynergyData.date_ordered = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, formatString, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Date order completed
        ;;; </summary>
        public property DateCompleted, DateTime
            method get
            proc
                data formatString = "YYYYMMDD"
                mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.date_completed, ^null, formatString, ^null)
            endmethod
            method set
            proc
                data formatString = "YYYYMMDD"
                mSynergyData.date_completed = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, formatString, ^null)
            endmethod
        endproperty

        public readwrite property Customer, @Customer
        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty
		
		public override property GlobalRFA, [#]byte
			method get
			proc
				mreturn mGlobalRFA
			endmethod
			method set
			proc
				mGlobalRFA = value
			endmethod
		endproperty

		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

		public override method InternalGetValues, [#]@object
		proc
			;;this should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

        protected virtual method LoadOwnedObjectsInternal, void
            serviceProvider, @IServiceProvider
        proc
            data dataObjectProvider, @IDataObjectProvider, serviceProvider.GetService<IDataObjectProvider>()
            data fileChannelManager = dataObjectProvider.ChannelManager
            if(dataObjectProvider == ^null || fileChannelManager == ^null)
                throw new Exception("something was null")

            Trace.WriteLine("Loading Owned Objects for Orders")

            disposable data customerFileIO, @IDataObjectIO<Customer>, dataObjectProvider.GetFileIO<Customer>()
            data customerResult, @Customer
            FileIOErrorHelper.EnsureSuccess(customerFileIO.ReadRecord(customerResult, 0, ^a(mSynergyData.customer_number), true))
        endmethod

	endclass
	
	public partial class OrdersMetadata extends Harmony.Core.DataObjectMetadataBase
		;; Define custom property formatters
        private mDateOrderedFormatter, @ILiteralFormatter, new SynergyDecimalDateConverter.LiteralFormatter("FORMAT:YYYYMMDD")
        private mDateCompletedFormatter, @ILiteralFormatter, new SynergyDecimalDateConverter.LiteralFormatter("FORMAT:YYYYMMDD")

        ;;; <summary>
        ;;; Constructs an new OrderMetadata object.
        ;;; </summary>
        public method OrdersMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "ORDERS"
            RPSStructureSize = ^size(STROrders)

            ;; Define fields
            AddFieldInfo("OrderNumber", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("CustomerNumber", "DECIMAL", 6, 7, 0, false)
            AddFieldInfo("PlacedBy", "ALPHA", 25, 13, 0, false)
            AddFieldInfo("CustomerReference", "ALPHA", 25, 38, 0, false)
            AddFieldInfo("PaymentTermsCode", "ALPHA", 2, 63, 0, false)
            AddFieldInfo("DateOrdered", "DATE", 8, 65, 0, false, mDateOrderedFormatter)
            AddFieldInfo("DateCompleted", "DATE", 8, 73, 0, false, mDateCompletedFormatter)

            ;; Define all fields that are associated wity key segments
            AddKeyInfo(0, "OrderNumber")
            AddKeyInfo(1, "CustomerNumber")
            AddKeyInfo(2, "DateOrdered")
            AddKeyInfo(3, "DateCompleted")

            ;; Define the composition of access keys

            data OrderNumber_KeyParts = new FieldDataDefinition[1]
            OrderNumber_KeyParts[1] = GetFieldByName("OrderNumber")
            AddFieldInfo("KEY_ORDER_NUMBER", "COMPOSITE", 0, 0, 0, false, ^null, ^null, OrderNumber_KeyParts)

            data CustomerNumber_KeyParts = new FieldDataDefinition[1]
            CustomerNumber_KeyParts[1] = GetFieldByName("CustomerNumber")
            AddFieldInfo("KEY_CUSTOMER_NUMBER", "COMPOSITE", 0, 0, 0, false, ^null, ^null, CustomerNumber_KeyParts)

            data DateOrdered_KeyParts = new FieldDataDefinition[1]
            DateOrdered_KeyParts[1] = GetFieldByName("DateOrdered")
            AddFieldInfo("KEY_DATE_ORDERED", "COMPOSITE", 0, 0, 0, false, ^null, ^null, DateOrdered_KeyParts)

            data DateCompleted_KeyParts = new FieldDataDefinition[1]
            DateCompleted_KeyParts[1] = GetFieldByName("DateCompleted")
            AddFieldInfo("KEY_DATE_COMPLETED", "COMPOSITE", 0, 0, 0, false, ^null, ^null, DateCompleted_KeyParts)
        endmethod
	
		public override method MakeNew, @DataObjectBase
			req in dataArea, a
			req in grfa, a
		proc
			mreturn new Orders((STROrders)dataArea) { GlobalRFA = grfa }
		endmethod

		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
			required in joinedObjects, [#]KeyValuePair<String, Object>
		proc
			data newOrder = new Orders((STROrders)dataArea) { GlobalRFA = grfa }
			mreturn newOrder
		endmethod
        
		public override method UpdateExistingJoin, void
			required in existing, @DataObjectBase
			required in joinedObjects, [#]KeyValuePair<String, Object>
		proc
			UpdateExistingJoin((@Orders)existing, joinedObjects)
		endmethod

		public method UpdateExistingJoin, void
			required in existing, @Orders
			required in joinedObjects, [#]KeyValuePair<String, Object>
		proc
			
		endmethod

		public override method FormatKeyLiteral, a
			keyNumber, int
			parts, @Dictionary<string, Object>
		proc
			mreturn ""
		endmethod
	endclass
endnamespace

