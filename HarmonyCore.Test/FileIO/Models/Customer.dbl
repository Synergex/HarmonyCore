import Harmony.Core.FileIO
;;*****************************************************************************
;;
;; Title:       Customer.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure CUSTOMERS and from the data file DAT:customers.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import System.Diagnostics
import Microsoft.Extensions.DependencyInjection
import Microsoft.EntityFrameworkCore
import Harmony.Core.Interface
import Microsoft.EntityFrameworkCore.Internal
import Harmony.Core.Context

namespace Harmony.Core.Test

    public partial class Customer extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strCustomer
        private mOriginalSynergyData, strCustomer
		protected mGlobalRFA  ,a10

        private static sMetadata, @CustomerMetadata

.region "Constructors"

        static method Customer
        proc
            sMetadata = new CustomerMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Customer), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Customer
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Customer
            required in inData, a
			required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
			mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Customer number
        ;;; </summary>
        {Key}
        {Required(ErrorMessage="Customer number is required. ")}
        public property CustomerNumber, int
            method get
            proc
                mreturn (int)mSynergyData.customer_number
            endmethod
            method set
            proc
                mSynergyData.customer_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customer name
        ;;; </summary>
        {Required(ErrorMessage="Customer name is required. ")}
        {StringLength(30, ErrorMessage="Customer name cannot exceed 30 characters. ")}
        public property Name, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Street address
        ;;; </summary>
        {StringLength(25, ErrorMessage="Street address cannot exceed 25 characters. ")}
        public property Street, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.street, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.street = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; City
        ;;; </summary>
        {StringLength(20, ErrorMessage="City cannot exceed 20 characters. ")}
        public property City, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.city, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.city = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; State
        ;;; </summary>
        {StringLength(2, ErrorMessage="State cannot exceed 2 characters. ")}
        public property State, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.state, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.state = (A)SynergyAlphaConverter.ConvertBack(value.ToUpper(), ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Zip code
        ;;; </summary>
        public property ZipCode, int
            method get
            proc
                mreturn (int)mSynergyData.zip_code
            endmethod
            method set
            proc
                mSynergyData.zip_code = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Contact name
        ;;; </summary>
        {StringLength(25, ErrorMessage="Contact name cannot exceed 25 characters. ")}
        public property Contact, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.contact, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.contact = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Phone number
        ;;; </summary>
        public property Phone, String
            method get
            proc
                mreturn %string(mSynergyData.phone,"(XXX) XXX-XXXX")
            endmethod
            method set
            proc
                mSynergyData.phone = SynergyDecimalConverter.ConvertBack(value,"(XXX) XXX-XXXX")
            endmethod
        endproperty

        ;;; <summary>
        ;;; Fax number
        ;;; </summary>
        public property Fax, String
            method get
            proc
                mreturn %string(mSynergyData.fax,"(XXX) XXX-XXXX")
            endmethod
            method set
            proc
                mSynergyData.fax = SynergyDecimalConverter.ConvertBack(value,"(XXX) XXX-XXXX")
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customers favorite item
        ;;; </summary>
        public property FavoriteItem, int
            method get
            proc
                mreturn (int)mSynergyData.favorite_item
            endmethod
            method set
            proc
                mSynergyData.favorite_item = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Payment terms code
        ;;; </summary>
        {StringLength(2, ErrorMessage="Payment terms code cannot exceed 2 characters. ")}
        public property PaymentTermsCode, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.payment_terms_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.payment_terms_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customers tax ID number
        ;;; </summary>
        {Required(ErrorMessage="Customers tax ID number is required. ")}
        public property TaxId, int
            method get
            proc
                mreturn (int)mSynergyData.tax_id
            endmethod
            method set
            proc
                mSynergyData.tax_id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Credit limit
        ;;; </summary>
        public property CreditLimit, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.credit_limit, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.credit_limit = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		public override property GlobalRFA, [#]byte
			method get
			proc
				mreturn mGlobalRFA
			endmethod
			method set
			proc
				mGlobalRFA = value
			endmethod
		endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[13]
        endmethod


        public override method Validate, void
            type, ValidationType
            serviceProvider, @IServiceProvider
        proc
            data dbContext = serviceProvider.GetService<DbContext>()
            data dataObjectProvider = serviceProvider.GetService<IDataObjectProvider>()
            data fileChannelManager = dataObjectProvider.ChannelManager
            data transactionContext = serviceProvider.GetService<IDataObjectTransactionContext>()
            if(dbContext == ^null || fileChannelManager == ^null || transactionContext == ^null)
                throw new Exception("something was null")

            Trace.WriteLine(string.Format("Validating Customer Object for operation type {0}", type))

            if(this.City != "Tbilisi")
                throw new ValidationException("City was not valid")
        endmethod
.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_CUSTOMER_NUMBER, string, ""
        public readonly property KEY_CUSTOMER_NUMBER, string, ""

        private _KEY_STATE, string, ""
        public readonly property KEY_STATE, string, ""

        private _KEY_ZIP, string, ""
        public readonly property KEY_ZIP, string, ""

        private _KEY_PAYMENT_TERMS, string, ""
        public readonly property KEY_PAYMENT_TERMS, string, ""

        ;;Foreign keys

        private _KEY_FAVORITE_ITEM, string, ""
        public readonly property KEY_FAVORITE_ITEM, string, ""

.endregion

endclass

endnamespace
