import System
import System.IO
import Microsoft.VisualStudio.TestTools.UnitTesting
import Harmony.Core
import Harmony.Core.FileIO
import HarmonyCore.Test
import Harmony.Core.Test.FileIO.Models

namespace Harmony.Core.Test.FileIO
	{TestClass}
	public class BasicFileIO
		
		private _datEnvVar, string, Environment.GetEnvironmentVariable("DAT")

		{TestMethod}
		public method ReadInputIndexed, void
			endparams
		proc
			ReadInputTest(FileOpenMode.InputIndexed, "DAT:orders.ism")
		endmethod

		{TestMethod}
		public method ReadInputRelative, void
			endparams
		proc
			File.Copy(_datEnvVar + "\orders.txt", _datEnvVar + "\orderscopy.txt",  true)
			ReadInputTest(FileOpenMode.InputRelative, "DAT:orderscopy.txt")
		endmethod

		public method ReadInputTest, void
			fileOpenMode, FileOpenMode
			file, string
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, file, fileOpenMode)
			data firstOrder, @Orders
			data lastOrder, @Orders
			data nextOrder, @Orders
			data shouldBeFirstOrder, @Orders
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			firstOrder.InternalSynergyRecord(lambda(recordData, grfaData) { Assert.AreEqual(FileAccessResults.Success, fileIO.FindRecord(-1, grfaData)) })
			Assert.AreEqual(FileAccessResults.Success, fileIO.FindFirstRecord())
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadNextRecord(shouldBeFirstOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadNextRecord(nextOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))

			Assert.AreEqual(firstOrder.OrderNumber, shouldBeFirstOrder.OrderNumber)
			Assert.IsTrue(firstOrder.OrderNumber < nextOrder.OrderNumber)
			Assert.IsTrue(nextOrder.OrderNumber < lastOrder.OrderNumber)
		endmethod

		{TestMethod}
		public method WriteOrdersIndexed, void
			endparams
		proc
			WriteOrdersTest(FileOpenMode.UpdateIndexed, "DAT:orders.ism")
		endmethod

		{TestMethod}
		public method WriteOrdersRelative, void
			endparams
		proc
			File.Copy(_datEnvVar + "\orders.txt", _datEnvVar + "\orderscopy.txt",  true)
			WriteOrdersTest(FileOpenMode.UpdateRelative, "DAT:orderscopy.txt")
		endmethod

		public method WriteOrdersTest, void
			fileOpenMode, FileOpenMode
			file, string
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, file, fileOpenMode)
			data firstOrder, @Orders
			data firstOrderClone, @Orders
			data lastOrder, @Orders
			
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))

			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrderClone))
			firstOrder.CustomerReference = "ZZZ"
			Assert.AreEqual(FileAccessResults.Success, fileIO.UpdateRecordUsingGRFA(firstOrder))
			Assert.AreEqual(fileOpenMode == FileOpenMode.UpdateIndexed ? FileAccessResults.RecordDataNotSame : FileAccessResults.Success, fileIO.UpdateRecordUsingGRFA(firstOrderClone))
		endmethod

		{TestMethod}
		public method CreateOrderIndexed, void
			endparams
		proc
			CreateOrderTest(FileOpenMode.UpdateIndexed, "DAT:orders.ism")
		endmethod

		{TestMethod}
		public method CreateOrderRelative, void
			endparams
		proc
			File.Copy(_datEnvVar + "\orders.txt", _datEnvVar + "\orderscopy.txt",  true)
			CreateOrderTest(FileOpenMode.UpdateRelative, "DAT:orderscopy.txt")
		endmethod

		public method CreateOrderTest, void
			fileOpenMode, FileOpenMode
			file, string
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, file, fileOpenMode)
			data newOrder, @Orders

			Assert.AreEqual(FileAccessResults.Success, fileIO.CreateRecord(new Orders() { OrderNumber = 987654 } ))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(newOrder))
			Assert.AreEqual(987654, newOrder.OrderNumber)
		endmethod

		{TestMethod}
		public method DeleteOrderIndexed, void
			endparams
		proc
			DeleteOrderTest(FileOpenMode.UpdateIndexed, "DAT:orders.ism")
		endmethod

		{TestMethod}
		public method DeleteOrderRelative, void
			endparams
		proc
			File.Copy(_datEnvVar + "\orders.txt", _datEnvVar + "\orderscopy.txt",  true)
			DeleteOrderTest(FileOpenMode.UpdateRelative, "DAT:orderscopy.txt")
		endmethod

		public method DeleteOrderTest, void
			fileOpenMode, FileOpenMode
			file, string
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, file, fileOpenMode)
			data lastOrder, @Orders

			;; Delete record
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ManualLockUsingGRFA(lastOrder))
			Assert.AreEqual(fileOpenMode == FileOpenMode.UpdateIndexed ? FileAccessResults.Success : FileAccessResults.InvalidOperation, fileIO.DeleteRecord())

			;; Delete record with GRFA
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ManualLockUsingGRFA(lastOrder))
			Assert.AreEqual(fileOpenMode == FileOpenMode.UpdateIndexed ? FileAccessResults.Success : FileAccessResults.InvalidOperation, fileIO.DeleteRecordUsingGRFA(lastOrder))

			;; Delete record with GRFA and lock
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ManualLockUsingGRFA(lastOrder))
			Assert.AreEqual(fileOpenMode == FileOpenMode.UpdateIndexed ? FileAccessResults.Success : FileAccessResults.InvalidOperation, fileIO.DeleteRecordUsingGRFA(lastOrder, true))
		endmethod

		{TestMethod}
		public method FileIOKey, void
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			data lastOrder, @Orders

			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))
			Assert.AreEqual("000027", fileIO.GetKeyValue(lastOrder, 1))
			Assert.AreEqual(6, fileIO.KeyLength(1))
			Assert.AreEqual(7, fileIO.KeyPosition(1))
		endmethod

		{TestMethod}
		public method GetProperties, void
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			
			Assert.AreEqual(4, fileIO.NumberOfKeys)
			Assert.AreEqual(4722, fileIO.NumberOfRecords)
			Assert.AreEqual("DAT:orders.ism", fileIO.OpenFileName)
			Assert.AreEqual(100, fileIO.SizeOfRecord)
		endmethod

		{TestMethod}
		public method Errors, void
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			data firstOrder, @Orders

			;; Lock and delete
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.UnlockChannel())
			Assert.AreEqual(FileAccessResults.NoCurrentRecordLocked, fileIO.DeleteRecord())
			Assert.AreEqual(FileAccessResults.NoCurrentRecordLocked, fileIO.DeleteRecordUsingGRFA(firstOrder))
			Assert.AreEqual(FileAccessResults.InvalidRFA, fileIO.ManualLockUsingGRFA(new Orders()))

			;; Delete twice
			Assert.AreEqual(FileAccessResults.Success, fileIO.ManualLockUsingGRFA(firstOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.DeleteRecordUsingGRFA(firstOrder))
			Assert.AreEqual(FileAccessResults.DeletedRecord, fileIO.DeleteRecordUsingGRFA(firstOrder))

			;; Bad keys
			Assert.AreEqual(0, fileIO.KeyLength(95670))
			Assert.AreEqual(0, fileIO.KeyPosition(95670))

			;; Bad finds
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			Assert.AreEqual(FileAccessResults.EndOFDataFile, fileIO.FindRecord("keyValue"))
			Assert.AreEqual(FileAccessResults.EndOFDataFile, fileIO.FindRecord(95670))
			Assert.AreEqual(FileAccessResults.EndOFDataFile, fileIO.FindRecord(1, "keyValue"))
			Assert.AreEqual(FileAccessResults.IllegalKey, fileIO.FindRecord(95670, "keyValue"))
			Assert.AreEqual(FileAccessResults.DuplicateKeyEncountered, fileIO.CreateRecord(firstOrder))
			Assert.AreEqual(string.Empty, fileIO.GetKeyValue(firstOrder, 95670))

			;; Bad update
			Assert.AreEqual(FileAccessResults.NoCurrentRecordLocked, fileIO.UpdateRecord(new Orders()))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ManualLockUsingGRFA(firstOrder))
			Assert.AreEqual(FileAccessResults.KeyNotSame, fileIO.UpdateRecord(new Orders()))
		endmethod

		{TestMethod}
		public method ReadOrderTest, void
		proc
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			data order, @Orders
			data nextOrder, @Orders
			data prevOrder, @Orders
			data lastOrder, @Orders
			data badOrder, @Orders
			data customerRef, string

			;; Read before first
			Assert.AreEqual(FileAccessResults.EndOFDataFile, fileIO.ReadPrevRecord(badOrder))
			Assert.IsNull(badOrder)

			;; Read next/prev
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadRecord(order))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadNextRecord(nextOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadPrevRecord(prevOrder))
			customerRef = order.CustomerReference
			Assert.AreEqual(customerRef, prevOrder.CustomerReference)
			Assert.AreNotEqual(customerRef, nextOrder.CustomerReference)

			;; Read after last
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))
			Assert.AreEqual(FileAccessResults.EndOFDataFile, FileIO.ReadNextRecord(badOrder))
			Assert.IsNull(badOrder)
		endmethod

	endclass
endnamespace
