import System
import Microsoft.VisualStudio.TestTools.UnitTesting
import Harmony.Core
import Harmony.Core.FileIO
import HarmonyCore.Test
import Harmony.Core.Test.FileIO.Models

namespace Harmony.Core.Test.FileIO
	{TestClass}
	public class BasicFileIO

		{TestMethod}
		public method ReadInput, void
		proc
			data status, i4
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.InputIndexed)
			data firstOrder, @Orders
			data lastOrder, @Orders
			data nextOrder, @Orders
			data shouldBeFirstOrder, @Orders
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			firstOrder.InternalSynergyRecord(lambda(recordData, grfaData) { Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.FindRecord(-1, grfaData)) })
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.FindFirstRecord())
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadNextRecord(shouldBeFirstOrder))
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadNextRecord(nextOrder))
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))


			Assert.AreEqual(firstOrder.OrderNumber, shouldBeFirstOrder.OrderNumber)
			Assert.IsTrue(firstOrder.OrderNumber < nextOrder.OrderNumber)
			Assert.IsTrue(nextOrder.OrderNumber < lastOrder.OrderNumber)
		endmethod

		{TestMethod}
		public async method WriteOrders, void
		proc
			data status, i4
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			data firstOrder, @Orders
			data firstOrderClone, @Orders
			data lastOrder, @Orders
			
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))

			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrderClone))
			firstOrder.CustomerReference = "ZZZ"
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.UpdateRecordUsingGRFA(firstOrder))
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.RecordDataNotSame, fileIO.UpdateRecordUsingGRFA(firstOrderClone))
		endmethod

		{TestMethod}
		public async method CreateOrder, void
		proc
			data status, i4
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			data newOrder, @Orders
			
			Assert.AreEqual(FileAccessResults.Success, fileIO.CreateRecord(new Orders() { OrderNumber = 987654 } ))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(newOrder))
			Assert.AreEqual(987654, newOrder.OrderNumber)
		endmethod

		{TestMethod}
		public async method DeleteOrder, void
		proc
			data status, i4
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			data lastOrder, @Orders
			
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ManualLockUsingGRFA(lastOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.DeleteRecord())
						  
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.ManualLockUsingGRFA(lastOrder))
			Assert.AreEqual(FileAccessResults.Success, fileIO.DeleteRecordUsingGRFA(lastOrder))
		endmethod

		{TestMethod}
		public async method FileIOKey, void
		proc
			data status, i4
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.UpdateIndexed)
			data firstOrder, @Orders
			
			Assert.AreEqual(FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			Assert.AreEqual("000001", fileIO.GetKeyValue(firstOrder, 1))
			Assert.AreEqual(6, fileIO.KeyLength(1))
			Assert.AreEqual(7, fileIO.KeyPosition(1))
		endmethod

	endclass
endnamespace
