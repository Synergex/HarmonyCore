<CODEGEN_FILENAME><INTERFACE_NAME>Hub.dbl</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.4.6</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>DTOS_NAMESPACE</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       SignalRHub.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Creates a SignalR hub that exposes former xfServerPlus
;//              methods in an interface via Harmony Core Traditional Bridge
;//
;// Copyright (c) 2019, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       <INTERFACE_NAME>Hub.dbl
;;
;; Description: SignalR hub that exposes former xfServerPlus methods in an
;;              interface via Harmony Core Traditional Bridge
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import System.Threading.Tasks
import Microsoft.AspNetCore.SignalR
import Microsoft.Extensions.Options
import Harmony.AspNetCore
import Harmony.Core.Context
import <MODELS_NAMESPACE>

namespace <NAMESPACE>

    public partial class <INTERFACE_NAME>Hub extends Hub<I<INTERFACE_NAME>HubClient>
        
        ;;Services provided via dependency injection
        private _contextFactory, @IContextFactory<<INTERFACE_NAME>Service>
        private _serviceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>
        
        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="contextFactory">Context factory</param>
        ;;; <param name="serviceProvider">Service provider</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method <INTERFACE_NAME>Hub
            contextFactory, @IContextFactory<<INTERFACE_NAME>Service>
            serviceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            _contextFactory = contextFactory
            _serviceProvider = serviceProvider
            _AppSettings = aAppSettings
        endmethod

        ;;----------------------------------------------------------------------
        ;;; <summary>
        ;;; Executes when a new connection is first established.
        ;;; </summary>
        ;;; <returns></returns>
        public override async method OnConnectedAsync, @Task
        proc
            await parent.OnConnectedAsync()
            
            data context = await _contextFactory.MakeContextAsync(_serviceProvider)            
            Context.Items.Add("RPCContext", context)

            ;If you need to do user authorization via a custom method then THIS
            ;is a good place to do so. Maybe something like this:
            ;
            ;data userDetail, [#]string, MultiTenantProvider.TenantId.Split("|")
            ;
            ;data request, @<DTOS_NAMESPACE>.UserLogin_Request, new <DTOS_NAMESPACE>.UserLogin_Request() { username=userDetail[1], password=userDetail[2], company=userDetail[3] }
            ;data response, @<DTOS_NAMESPACE>.UserLogin_Response
            ;
            ;response = await context.UserLogin(request)
            ;
            ;if (response.ReturnValue != 0)
            ;    throw new Exception("Invalid user login in OnConnectedAsync")

        endmethod

        ;;----------------------------------------------------------------------
        ;;; <summary>
        ;;; Executes when an existing connection is terminated
        ;;; </summary>
        ;;; <param name="ex"></param>
        ;;; <returns></returns>
        public override async method OnDisconnectedAsync, @Task
            ex, @Exception
        proc
            parent.OnDisconnectedAsync(ex)
            data contextObject, @Object
            if(Context.Items.TryGetValue("RPCContext", contextObject))
            begin
                data callContext = ^as(contextObject, @<INTERFACE_NAME>Service)
                if(callContext != ^null)
                begin
                    _contextFactory.ReturnContext(callContext)
                end
            end
        endmethod

        ;;----------------------------------------------------------------------
        ;;Methods from interface "<INTERFACE_NAME>"

        <METHOD_LOOP>
        public async method <METHOD_NAME>, @Task
            <IF IN_OR_INOUT>
            aRequest, @<DTOS_NAMESPACE>.<METHOD_NAME>_Request
            </IF IN_OR_INOUT>
        proc
            data callContext = ^as(Context.Items["RPCContext"], @<INTERFACE_NAME>Service)
            <IF RETURNS_DATA>data result = </IF RETURNS_DATA>await callContext.<METHOD_NAME>(<IF IN_OR_INOUT>aRequest</IF IN_OR_INOUT>)
            await Clients.Caller.<METHOD_NAME>_Result(<IF RETURNS_DATA>result</IF RETURNS_DATA>)
        endmethod

        </METHOD_LOOP>
    endclass

    public interface I<INTERFACE_NAME>HubClient
        
        method AddTwoNumbers_Result, @Task
            aDecimal, decimal
        endmethod

        <METHOD_LOOP>
        method <METHOD_NAME>_Result, @Task
            <IF RETURNS_DATA>
            response, @<DTOS_NAMESPACE>.<METHOD_NAME>_Response
            </IF RETURNS_DATA>
        endmethod
    
        </METHOD_LOOP>
    endinterface

endnamespace
