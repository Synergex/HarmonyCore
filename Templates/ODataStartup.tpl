<CODEGEN_FILENAME>Startup.dbl</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.8.5</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>API_TITLE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>CONTROLLERS_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>OAUTH_API</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>OAUTH_SERVER</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>SERVER_HTTPS_PORT</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       ODataEdmBuilder.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Creates a Startup class for an OData / Web API hosting environment
;//
;// Copyright (c) 2018, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       Startup.dbl
;;
;; Description: Startup class for an OData / Web API hosting environment
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************
;;

import Harmony.AspNetCore
import Harmony.AspNetCore.Context
import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.Interface
import Harmony.Core.Utility
import Harmony.OData
import Harmony.OData.Adapter
<IF DEFINED_ENABLE_AUTHENTICATION>
import Microsoft.AspNetCore.Authorization
import Microsoft.AspNetCore.Authentication.JwtBearer
</IF DEFINED_ENABLE_AUTHENTICATION>
import Microsoft.AspNetCore.Builder
import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.Http
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.Mvc.Abstractions
import Microsoft.AspNetCore.Mvc.ApiExplorer
import Microsoft.AspNetCore.StaticFiles
import Microsoft.AspNetCore.Builder
import Microsoft.AspNetCore.Mvc.ApplicationModels
import Microsoft.AspNetCore.OData
import Microsoft.AspNetCore.Routing
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.DependencyInjection.Extensions
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.DependencyInjection.Extensions
import Microsoft.Extensions.Logging
import Microsoft.Extensions.Options
import Microsoft.Extensions.Primitives
<IF DEFINED_ENABLE_AUTHENTICATION>
<IF DEFINED_ENABLE_CUSTOM_AUTHENTICATION>
import Microsoft.IdentityModel.Tokens
</IF DEFINED_ENABLE_CUSTOM_AUTHENTICATION>
</IF DEFINED_ENABLE_AUTHENTICATION>
import Microsoft.Net.Http.Headers
import Microsoft.OData
import Microsoft.OData.Edm
import Microsoft.OData.UriParser
import Microsoft.AspNetCore.OData
import Microsoft.AspNetCore.OData.Extensions
import Microsoft.AspNetCore.OData.Routing
import Microsoft.AspNetCore.OData.Formatter
import System.Collections.Generic
import System.IO
import System.Linq
import System.Text
import System.Threading.Tasks
import <CONTROLLERS_NAMESPACE>
import <MODELS_NAMESPACE>
import Swashbuckle.AspNetCore.Swagger
import Microsoft.OpenApi.Models

namespace <NAMESPACE>

    ;;; <summary>
    ;;;
    ;;; </summary>
    public partial class Startup

        ;;; <summary>
        ;;; This property will be populated later by the default SelfHostEnvironment class.
        ;;; It wil contain a list of all of the logical names used to locate data files in the repository.
        ;;; This information can be useful if implementing a custom FileSpecResolver class, which is done
        ;;; in the Services Assembly, which is why the collection is defined here.
        ;;; </summary>
        public static readwrite property LogicalNames, @List<string>

        ;; Items provided by dependency injection
        public _env, @IHostingEnvironment
        public _config, @IConfiguration

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="env">HTTP hosting environment</param>
        ;;; <param name="config">Configuration data</param>
        public method Startup
            env, @IHostingEnvironment
            config, @IConfiguration
        proc
            _env = env
            _config = config
        endmethod

        ;;; <summary>
        ;;; This methoid is used to make services available to the application.
        ;;; These services are typically accessed via dependency injection in controller classes.
        ;;; The primary purpose of the ConfigureServices method is as a place to register
        ;;; implementations of types for services that are needed by the application.
        ;;; It is also used to configure any options related to those services.
        ;;; </summary>
        ;;; <param name="services">Collection of available services.</param>
        public method ConfigureServices, void
            services, @IServiceCollection
        proc
            ;;-------------------------------------------------------
            ;;Enable logging

            data log_level ,Microsoft.Extensions.Logging.LogLevel ,Microsoft.Extensions.Logging.LogLevel.Error

            data logical ,a40
            data logLen ,int ,0
            xcall getlog('ASPNETCORE_LOG_LEVEL',logical,logLen)
            if (logLen)
            begin
                locase logical
                using logical(1:loglen)+' ' select
                ('0 ','trace '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Trace
                ('1 ','debug '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Debug
                ('2 ','information '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Information
                ('3 ','warning '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Warning
                ('4 ','error '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Error
                ('5 ','critical '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Critical
                ('6 ','none '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.None
                (),
                    throw new Exception("Invalid value for logical ODATA_LOG_LEVEL="+logical(1:loglen))
                endusing
            end

            lambda configureLogging(builder)
            begin
                builder.SetMinimumLevel(log_level)
                builder.AddConsole(lambda(con) { con.TimestampFormat = "[HH:mm:ss] " })
            end

            services.AddLogging(configureLogging)

            ;;-------------------------------------------------------
            ;;Make AppSettings available as a service

            lambda GetAppSettings(appSettingsInstance)
            begin
                appSettingsInstance.ProcessEnvironmentVariables()
                mreturn true
            end

            ;;Add an AppSettings service.
            ;;To get an instance from DI ask for an @IOptions<AppSettings>
            if(_config != ^null)
                services.AddOptions<AppSettings>().Validate(GetAppSettings).Bind(_config.GetSection("AppSettings"))

            ;;-------------------------------------------------------
            ;;Load Harmony Core

            ;;DataObjectProvider configuration
            lambda AddDataObjectMappings(serviceProvider)
            begin
                data objectProvider = new DataObjectProvider(serviceProvider.GetService<IFileChannelManager>())
                <STRUCTURE_LOOP>
                objectProvider.AddDataObjectMapping<<StructureNoplural>>("<FILE_NAME>", <IF STRUCTURE_ISAM>FileOpenMode.UpdateIndexed</IF STRUCTURE_ISAM><IF STRUCTURE_RELATIVE>FileOpenMode.UpdateRelative</IF STRUCTURE_RELATIVE>)
                </STRUCTURE_LOOP>

                ;;If we have an AddDataObjectMappingsCustom method, call it
                AddDataObjectMappingsCustom(objectProvider)

                mreturn objectProvider
            end

            ;;DBContext configuration
            lambda ConfigureDBContext(sp,opts)
            begin
                HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, sp.GetService<IDataObjectProvider>())
            end

            services.AddSingleton<IEdmBuilder, EdmBuilder>()
            services.AddSingleton<IFileChannelManager, FileChannelManager>()
            services.AddSingleton<IDataObjectProvider>(AddDataObjectMappings)
            services.AddDbContextPool<<MODELS_NAMESPACE>.DBContext>(ConfigureDBContext)
            services.TryAddEnumerable(ServiceDescriptor.Singleton<MatcherPolicy, Harmony.OData.Adapter.AdapterRoutingMatcherPolicy>())

            ;;-------------------------------------------------------
            ;;Load OData and ASP.NET

            lambda MvcCoreConfig(op)
            begin
                data formatter, @ODataOutputFormatter
                data iformatter, @ODataInputFormatter
                data mediaTypeName, @string, "application/prs.mock-odata"
                data sseg = new StringSegment(mediaTypeName)
                foreach formatter in op.OutputFormatters.OfType<ODataOutputFormatter>().Where(lambda(it) { !it.SupportedMediaTypes.Any() })
                begin
                    formatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(sseg))
                end
                foreach iformatter in op.InputFormatters.OfType<ODataInputFormatter>().Where(lambda(it) { !it.SupportedMediaTypes.Any() })
                begin
                    iformatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(sseg))
                end
                
                op.MaxIAsyncEnumerableBufferLimit = int.MaxValue

                ;;If there is a MvcConfigCustom method, call it
                MvcConfigCustom(op)
            end

            lambda ODataConfig(option)
            begin
                option.EnableAttributeRouting = true
                option<IF DEFINED_ENABLE_COUNT>.Count()</IF><IF DEFINED_ENABLE_RELATIONS>.Filter()</IF><IF DEFINED_ENABLE_RELATIONS>.Expand()</IF><IF DEFINED_ENABLE_SELECT>.Select()</IF><IF DEFINED_ENABLE_ORDERBY>.OrderBy()</IF><IF DEFINED_ENABLE_TOP>.SetMaxTop(40)</IF>
				&	.AddRouteComponents(EdmBuilder.GetEdmModel(^null, 1))
                option.Conventions.Insert(1, new AdapterRoutingConvention())
            end

            services.AddControllers().AddOData(ODataConfig)

            data mvcBuilder = services.AddMvcCore(MvcCoreConfig)
            &    .AddDataAnnotations()      ;;Enable data annotations
            &    .AddNewtonsoftJson(<IF DEFINED_ENABLE_NEWTONSOFT>lambda (opts) { opts.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver()}</IF>)
            &    .AddApplicationPart(^typeof(IsolatedMethodsBase).Assembly)
            &    .AddApplicationPart(^typeof(Microsoft.AspNetCore.OData.Routing.Controllers.MetadataController).Assembly)

			lambda configSwaggerGen(c)
			begin
				c.ResolveConflictingActions(lambda(apiDescriptions) { apiDescriptions.First() })
				c.IgnoreObsoleteActions()
				c.IgnoreObsoleteProperties()
				c.CustomSchemaIds(lambda(ty) { ty.FullName })
			end

			services.AddSwaggerGen(configSwaggerGen)

        <IF DEFINED_ENABLE_AUTHENTICATION>
          <IF DEFINED_ENABLE_CUSTOM_AUTHENTICATION>
            <IF DEFINED_ENABLE_SIGNALR>
            lambda jwtMessageHook(context)
            begin
                data accessToken = context.Request.Query["access_token"];

                ;; If the request is for our hub...
                data path = context.HttpContext.Request.Path
                if (!string.IsNullOrEmpty(accessToken) && (path.StartsWithSegments(new PathString("<SIGNALR_PATH>"))))
                begin
                    ;; Read the token out of the query string
                    context.Token = accessToken;
                end
                mreturn Task.CompletedTask
            end

            </IF DEFINED_ENABLE_SIGNALR>
            lambda configJwt(o)
            begin
                o.IncludeErrorDetails = true
                o.ClaimsIssuer = AuthenticationTools.GetIssuer()
                o.Audience = AuthenticationTools.GetAudience()
                o.TokenValidationParameters = new TokenValidationParameters()
                &    {
                &    ValidateIssuer = true,
                &    ValidIssuer = AuthenticationTools.GetIssuer(),
                &    ValidateAudience = true,
                &    ValidAudience = AuthenticationTools.GetAudience(),
                &    ValidateIssuerSigningKey = true,
                &    IssuerSigningKey = new SymmetricSecurityKey(AuthenticationTools.GetKey())
                &    }
            <IF DEFINED_ENABLE_SIGNALR>

                data jwtEvents = new JwtBearerEvents()
                o.Events = jwtEvents
                jwtEvents.OnMessageReceived=jwtMessageHook
            </IF DEFINED_ENABLE_SIGNALR>
            end

            lambda authenticationOptions(options)
            begin
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme
            end

            lambda authorizationOptions(options)
            begin
                 options.DefaultPolicy = new AuthorizationPolicyBuilder(JwtBearerDefaults.AuthenticationScheme).RequireAuthenticatedUser().Build()
            end

            services.AddAuthentication(authenticationOptions).AddJwtBearer("Bearer", configJwt)
            mvcBuilder.AddAuthorization(authorizationOptions)
          <ELSE>
            ;;-------------------------------------------------------
            ;;Enable authentication and authorization

            lambda identityServerOptions(options)
            begin
                options.Authority = "<OAUTH_SERVER>"
                options.RequireHttpsMetadata = false
                options.ApiName = "<OAUTH_API>"
            end

            lambda authenticationOptions(options)
            begin
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme
            end

            lambda authorizationOptions(options)
            begin
                options.DefaultPolicy = new AuthorizationPolicyBuilder(JwtBearerDefaults.AuthenticationScheme).RequireAuthenticatedUser().Build()
            end

            services.AddAuthentication(authenticationOptions).AddIdentityServerAuthentication(identityServerOptions)
            mvcBuilder.AddAuthorization(authorizationOptions)
          </IF DEFINED_ENABLE_CUSTOM_AUTHENTICATION>
        </IF DEFINED_ENABLE_AUTHENTICATION>

            ;;-------------------------------------------------------
            ;;Enable HTTP redirection to HTTPS

            lambda httpsConfig(options)
            begin
                options.RedirectStatusCode = StatusCodes.Status307TemporaryRedirect
                options.HttpsPort = <SERVER_HTTPS_PORT>
            end

            services.AddHttpsRedirection(httpsConfig)

        <IF DEFINED_ENABLE_IIS_SUPPORT>
            ;;-------------------------------------------------------
            ;;Enable support for hosting in IIS

            lambda iisOptions(options)
            begin
                options.ForwardClientCertificate = false
            end

            services.Configure<IISOptions>(iisOptions)

        </IF DEFINED_ENABLE_IIS_SUPPORT>
        <IF DEFINED_ENABLE_CORS>
            ;;-------------------------------------------------------
            ;;Add "Cross Origin Resource Sharing" (CORS) support

            services.AddCors()

        </IF DEFINED_ENABLE_CORS>
        <IF DEFINED_ENABLE_SIGNALR>
            ;; -------------------------------------------------------------------------------
            ;;Add SignalR support
            services.AddSignalR().AddNewtonsoftJsonProtocol()
            services.AddDistributedMemoryCache()
            services.AddSession()

        </IF DEFINED_ENABLE_SIGNALR>
            ;;If there is a ConfigureServicesCustom method, call it
            ConfigureServicesCustom(services)

        endmethod

        private AppSettingsMonitor, @IDisposable

        ;;; <summary>
        ;;; This method is used to configure the ASP.NET WebApi request pipeline.
        ;;; </summary>
        ;;; <param name="app">IApplicationBuilder component that configures the request pipeline by having middleware added to it.</param>
        ;;; <param name="env">IHostingEnvironment that exposes information about the environment that is hosting the application.</param>
        public method Configure, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        proc
            ;;-------------------------------------------------------
            ;;Configure the AppSettings environment

            data optionsMonitorObj, @IOptionsMonitor<AppSettings>, ServiceProviderServiceExtensions.GetService<IOptionsMonitor<AppSettings>>(app.ApplicationServices)
            AppSettingsMonitor = optionsMonitorObj.OnChange(lambda(opts, name) { opts.ProcessEnvironmentVariables() })
            data settings, @AppSettings, ServiceProviderServiceExtensions.GetService<IOptions<AppSettings>>(app.ApplicationServices).Value

            ;;-------------------------------------------------------
            ;;Configure development and production specific components

            data loggerFactory = app.ApplicationServices.GetRequiredService<ILoggerFactory>()
            app.UseDeveloperExceptionPage()

            data hc_log_level ,Harmony.Core.Interface.LogLevel ,Harmony.Core.Interface.LogLevel.Debug
            data logical ,a40
            data logLen ,int ,0
            xcall getlog('HARMONY_CORE_LOG_LEVEL',logical,logLen)
            if (logLen)
            begin
                locase logical
                using logical(1:loglen)+' ' select
                ('0 ','trace '),
                    hc_log_level = Harmony.Core.Interface.LogLevel.Trace
                ('1 ','debug '),
                    hc_log_level = Harmony.Core.Interface.LogLevel.Debug
                ('2 ','information '),
                    hc_log_level = Harmony.Core.Interface.LogLevel.Info
                ('3 ','warning '),
                    hc_log_level = Harmony.Core.Interface.LogLevel.Warning
                ('4 ','error '),
                    hc_log_level = Harmony.Core.Interface.LogLevel.Error
                ('5 ','critical '),
                    hc_log_level = Harmony.Core.Interface.LogLevel.Critical
                (),
                    throw new Exception("Invalid value for logical HARMONY_CORE_LOG_LEVEL="+logical(1:loglen))
                endusing
            end

            DebugLogSession.Logging = new AspNetCoreDebugLogger(loggerFactory.CreateLogger("HarmonyCore")) { Level = hc_log_level }
            app.UseLogging(DebugLogSession.Logging)

            ;if (!env.IsDevelopment())
            ;begin
                ;;Enable HTTP Strict Transport Security Protocol (HSTS)
                ;
                ;You need to research this and know what you are doing with this. Here's a starting point:
                ;https://docs.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-2.1&tabs=visual-studio
                ;
                ;app.UseHsts()
            ;end

            ;;-------------------------------------------------------
            ;;Enable HTTP redirection to HTTPS

            app.UseHttpsRedirection()

        <IF DEFINED_ENABLE_AUTHENTICATION>
            ;;-------------------------------------------------------
            ;;Enable the authentication middleware

            app.UseAuthentication()

        </IF DEFINED_ENABLE_AUTHENTICATION>

        <IF DEFINED_ENABLE_CORS>
            ;;-------------------------------------------------------
            ;;Add "Cross Origin Resource Sharing" (CORS) support

            lambda corsOptions(builder)
            begin
                builder
                &   .AllowCredentials()
                &   .AllowAnyMethod()
                &   .AllowAnyHeader()
                &   .SetIsOriginAllowed(lambda(p) { true } )
            end

            app.UseCors(corsOptions)

        </IF DEFINED_ENABLE_CORS>
            ;;-------------------------------------------------------
            ;;Enable MVC

            ;;If there is a ConfigureCustomBeforeMvc method, call it
            ConfigureCustomBeforeMvc(app,env)

			app.UseSwagger()
			app.UseSwaggerUI(lambda(c) { c.SwaggerEndpoint("/swagger/v<API_VERSION>/swagger.json", "<API_TITLE>") })

            ;;Enable serving static files
            app.UseDefaultFiles()
            app.UseStaticFiles()

            app.UsePathBase(new PathString("/odata/v1"))

            ;;Use odata route debug, /$odata
            app.UseODataRouteDebug("/$odata")
			app.UseODataQueryRequest()

            lambda RoutingConfig(endpoints)
            begin
				endpoints.MapControllers()
			end

            app.UseRouting()

            app.UseEndpoints(RoutingConfig)

            ;;If there is a ConfigureCustom method, call it
            ConfigureCustom(app,env)

        endmethod

.region "Partial method extensibility points"

        ;;; <summary>
        ;;; Declare the ConfigueServicesCustom partial method.
        ;;; Developers can implement this method in a partial class to provide custom services.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial method ConfigureServicesCustom, void
            required in services, @IServiceCollection
        endmethod

        ;;; <summary>
        ;;; Declare the ConfigueCustom partial method
        ;;; Developers can implement this method in a partial class to provide custom configuration.
        ;;; </summary>
        ;;; <param name="app"></param>
        ;;; <param name="env"></param>
        partial method ConfigureCustom, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        endmethod

        ;;; <summary>
        ;;; Declare the ConfigueCustom partial method called immediately before AddMvc
        ;;; Developers can implement this method in a partial class to provide custom configuration.
        ;;; </summary>
        ;;; <param name="app"></param>
        ;;; <param name="env"></param>
        partial method ConfigureCustomBeforeMvc, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        endmethod

        ;;; <summary>
        ;;; Declare the MvcConfigCustom partial method
        ;;; Developers can use this to inject custom options into the MVC environemnt
        ;;; </summary>
        ;;; <param name="options">MVC options</param>
        partial method MvcConfigCustom, void
            required in options, @MvcOptions
        endmethod

        ;;; <summary>
        ;;; Declare the AddDataObjectMappingsCustom partial method
        ;;; Developers can use this to inject additional data object mappings
        ;;; </summary>
        ;;; <param name="serviceProvider">Data object provider</param>
        partial method AddDataObjectMappingsCustom, void
            required in provider, @DataObjectProvider
        endmethod

.endregion

    endclass

endnamespace
