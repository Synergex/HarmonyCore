<CODEGEN_FILENAME><StructureNoplural>MetaData.dbl</CODEGEN_FILENAME>
<OPTIONAL_USERTOKEN>RPSDATAFILES= </OPTIONAL_USERTOKEN>
<REQUIRES_CODEGEN_VERSION>5.4.6</REQUIRES_CODEGEN_VERSION>
;//****************************************************************************
;//
;// Title:       DataObjectMetaData.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to define meta data associated with a data object
;//
;// Copyright (c) 2018, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       <StructureNoplural>MetaData.dbl
;;
;; Description: Defines meta data associated with a data object <StructureNoplural>.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.TraditionalBridge

subroutine Meta<StructureNoplural>
	required out metadata, @DataObjectMetadataBase
proc
	if(<StructureNoplural>.sMetadata == ^null)
		<StructureNoplural>.sMetadata = new <StructureNoplural>Metadata()
	metadata = <StructureNoplural>.sMetadata
	xreturn
endsubroutine

namespace <NAMESPACE>

	.include "<STRUCTURE_NOALIAS>" repository <RPSDATAFILES>, structure="str<StructureNoplural>", end

	public partial class <StructureNoplural>Metadata extends DataObjectMetadataBase
		
		public method <StructureNoplural>Metadata
		proc
			RPSStructureName = "<STRUCTURE_NOALIAS>"
			RPSStructureSize = ^size(str<StructureNoplural>)
<FIELD_LOOP>
	<IF CUSTOM_NOT_HARMONY_EXCLUDE>
			;AddFieldInfo("<FieldSqlname>", "<FIELD_TYPE_NAME>", <FIELD_SIZE>, <FIELD_POSITION>, 0<FIELD_PRECISION>, false)
	</IF CUSTOM_NOT_HARMONY_EXCLUDE>
</FIELD_LOOP>
		endmethod

;//TODO: If we're not going to use this we should remove it from the base class and here
		public override method GetFieldByName, @FieldDataDefinition
			fieldName, @string
		proc
			mreturn ^null
		endmethod

		public override method SetIntoArray, void
            dataArea, a
            arrayObject, @object
            index, int
		record
			typedArrayObject, [#]str<StructureNoplural>
        proc
            typedArrayObject = ([#]str<StructureNoplural>)arrayObject
			typedArrayObject[index] = dataArea
        endmethod

		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
			record
				new<StructureNoplural>, @<NAMESPACE>.<StructureNoplural>
		proc
			new<StructureNoplural> = new <NAMESPACE>.<StructureNoplural>(dataArea) 
			new<StructureNoplural>.GlobalRFA = grfa
			mreturn new<StructureNoplural>
		endmethod

	endclass

endnamespace