<CODEGEN_FILENAME><INTERFACE_NAME>Controller.dbl</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.8.5</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>DTOS_NAMESPACE</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       InterfaceController.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Creates a Web API controller that exposes former xfServerPlus
;//              methods in an interface via Harmony Core Traditional Bridge
;//
;// Copyright (c) 2019, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       <INTERFACE_NAME>Controller.dbl
;;
;; Description: This class defines a WebAPI controller that exposes
;;              various endpoints used to execute routines via the
;;              Harmony Core Traditional Bridge mechanism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

<IF DEFINED_ENABLE_AUTHENTICATION>
import Microsoft.AspNetCore.Authorization
</IF DEFINED_ENABLE_AUTHENTICATION>
import Microsoft.AspNetCore.Mvc
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.Options
import Newtonsoft.Json
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import <DTOS_NAMESPACE>

import <NAMESPACE>

namespace <NAMESPACE>

    <IF DEFINED_ENABLE_AUTHENTICATION>
    {Authorize}
    </IF DEFINED_ENABLE_AUTHENTICATION>
    {Route("<INTERFACE_NAME>")}
    public partial class <INTERFACE_NAME>Controller extends ControllerBase

        ;;Services provided via dependency injection
        private _<INTERFACE_NAME>Service, @<INTERFACE_NAME>Service
        private _AppSettings, @IOptions<<MODELS_NAMESPACE>.AppSettings>

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="a<INTERFACE_NAME>Service"><INTERFACE_NAME>Service instance provided via dependency injection</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method <INTERFACE_NAME>Controller
            a<INTERFACE_NAME>Service, @<INTERFACE_NAME>Service
            aAppSettings, @IOptions<<MODELS_NAMESPACE>.AppSettings>
        proc
            _<INTERFACE_NAME>Service = a<INTERFACE_NAME>Service
            _AppSettings = aAppSettings
        endmethod

<METHOD_LOOP>
        {Http<IF IN_OR_INOUT>Post<ELSE>Get</IF>}
        {Route("<METHOD_NAME>")}
  <IF COMMENT>
        ;;; <summary>
        ;;; <METHOD_COMMENT>
        ;;; </summary>
        ;;; <returns><METHOD_RETURN_COMMENT></returns>
  </IF>
        public async method <METHOD_NAME>, <IF RETURNS_DATA>@Task<ActionResult<<METHOD_NAME>_Response>><ELSE>@Task<IActionResult></IF RETURNS_DATA>
  <IF IN_OR_INOUT>
            {FromBody}
            required in aRequest, @<METHOD_NAME>_Request
  </IF IN_OR_INOUT>
        proc
  <IF IN_OR_INOUT>
    <IF NOT_DEFINED_GLOBAL_MODELSTATE_FILTER>
            if (!ModelState.IsValid)
                mreturn BadRequest()
    </IF>
  </IF>
  <IF RETURNS_DATA>
            mreturn ok(await _<INTERFACE_NAME>Service.<METHOD_NAME>(<IF IN_OR_INOUT>aRequest</IF IN_OR_INOUT>))
  <ELSE>
            await _<INTERFACE_NAME>Service.<METHOD_NAME>(<IF IN_OR_INOUT>aRequest</IF IN_OR_INOUT>)
            mreturn ok()
  </IF RETURNS_DATA>
        endmethod

</METHOD_LOOP>
    endclass

endnamespace
