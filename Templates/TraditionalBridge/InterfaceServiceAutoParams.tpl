<CODEGEN_FILENAME><INTERFACE_NAME>ServiceAutoParams.dbl</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.8.1</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>DTOS_NAMESPACE</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       InterfaceServiceAutoParams.tpl
;//
;// Type:        CodeGen Template (Custom to Lallemand)
;//
;// Description: Creates a partial service class that adds p_cie, p_lang and
;//              p_user parameters as necessary.
;//
;// Copyright (c) 2021, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       <INTERFACE_NAME>ServiceAutoParams.dbl
;;
;; Description: Adds p_cie, p_lang and p_user parameters as needed.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.EF.Extensions
import Harmony.OData
import Harmony.OData.Adapter
import Microsoft.AspNet.OData
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.Authorization
import Newtonsoft.Json.Linq
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

import <MODELS_NAMESPACE>

namespace <NAMESPACE>

    public partial class <IF DEFINED_ENABLE_CAMEL_CASE><interfaceName><ELSE><INTERFACE_NAME></IF>Service

		;;-------------------------------------------------------------------------------------------
        ;; Expose a dictionary to translate company codes into company numbers.
		;; This collection is populated by code in the Startup.ConfigureCustom method.

        public static CompanyCodes, @Dictionary<string,int>
	
		;;-------------------------------------------------------------------------------------------
        ;; Get access to the controller context

        private contextAccessor, @Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor
        private context, @ActionContext

        public override method InitServices, void
            sp, @IServiceProvider
        proc
            parent.InitServices(sp)
            contextAccessor = (@Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor)sp.GetService(^typeof(Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor))
            context = contextAccessor.ActionContext
        endmethod

        ;;-------------------------------------------------------------------------------------------
		;; Add common parameters to method calls

		;;; <summary>
        ;;; Called before each bridge call.
        ;;; </summary>
        ;;; <param name="methodName">Name of the method being called</param>
        ;;; <param name="args">Arguments being passed to the method, which you can alter!</param>
        ;;; <returns>The arguments to be passed to the Traditional Bridge call</returns>
        protected internal override method BeforeCall, [#]@Object
            required in methodName, string
            required in args, [#]@Object
        proc
            if (methodName=="<IF DEFINED_ENABLE_CAMEL_CASE>wUtilGetCompanyCodes<ELSE>w_util_get_company_codes</IF>")
            begin
                mreturn args
            end

			;;Get the users identity (JWT)
			data identity = ^as(context.HttpContext.User.Identity,System.Security.Claims.ClaimsIdentity)

			data argsToAdd, int
			data newArgs, [#]@object
			data ix, int

            using methodName select
<METHOD_LOOP>
			("<IF DEFINED_ENABLE_CAMEL_CASE><methodName><ELSE><METHOD_NAME></IF>"),
			begin<COUNTER_1_RESET><PARAMETER_LOOP><IF PARAM_NAME_IS_p_cie><COUNTER_1_INCREMENT></IF><IF PARAM_NAME_IS_p_lang><COUNTER_1_INCREMENT></IF><IF PARAM_NAME_IS_p_user OR PARAM_NAME_IS_p_usr><COUNTER_1_INCREMENT></IF></PARAMETER_LOOP>
  				if (argsToAdd=<COUNTER_1_VALUE>) then
				begin
					;; Create a new array big enough to hold the new and original arguments
					newArgs = new object[args.Length + argsToAdd]

					;; Add the new arguments at the beginning of the parameter list
					data nextArgNum = 0
  <PARAMETER_LOOP>
		<IF PARAM_NAME_IS_p_cie>
					newArgs[nextArgNum+=1] = CompanyCodes[Harmony.AspNetCore.MultiTenantProvider.TenantId]
		</IF>
		<IF PARAM_NAME_IS_p_lang>
					newArgs[nextArgNum+=1] = (@int)int.Parse(identity.FindFirst("LanguageCode").Value)
		</IF>
		<IF PARAM_NAME_IS_p_user OR PARAM_NAME_IS_p_usr>
					newArgs[nextArgNum+=1] = identity.FindFirst("UserName").Value
		</IF>
  </PARAMETER_LOOP>

					;; Copy in the original arguments after the new ones
					Array.Copy(args,1,newArgs,argsToAdd+1,args.Length)
				end
				else
				begin
					newArgs = args
				end
			end
</METHOD_LOOP>
			endusing

			mreturn newArgs
            
        endmethod

    endclass

endnamespace
