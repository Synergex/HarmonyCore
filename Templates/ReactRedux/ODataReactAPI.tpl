<CODEGEN_FILENAME><structureNoplural>Api.js</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.5.3</REQUIRES_CODEGEN_VERSION>
;//****************************************************************************
;//
;// Title:       ODataReactAPI.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Used to create React API's for OData Controllers
;// in a Harmony Core environment
;//
;// Copyright (c) 2020, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// Title:       <structureNoplural>Api.js
//
// Description: React API for /<SERVER_BASE_PATH>/v<API_VERSION>/<StructurePlural> endpoints.
//
//*****************************************************************************
// WARNING: GENERATED CODE!
// This file was generated by CodeGen. Avoid editing the file if possible.
// Any changes you make will be lost of the file is re-generated.
//*****************************************************************************

//Import helper functions
import { handleResponse, handleError } from "./apiUtils";

<IF DEFINED_ENABLE_AUTHENTICATION>
//Import authentication helper functions
import * as tokenApi from "./tokenApi";

</IF DEFINED_ENABLE_AUTHENTICATION>
//Define the base URL used for all oprtations of this API
const baseUrl = "<SERVER_PROTOCOL>://<SERVER_NAME>:<SERVER_HTTPS_PORT>/<SERVER_BASE_PATH>/v<API_VERSION>/<StructurePlural>";

;//
;// GET ALL -------------------------------------------------------------------
;//
<IF DEFINED_ENABLE_GET_ALL AND GET_ALL_ENDPOINT>
export async function get<StructurePlural>() {
  try {
    let response = await fetch(baseUrl, {
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "accept": "application/json"
      }
    });
    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}

</IF>
;//
;// GET ONE (ISAM, UNIQUE PRIMARY KEY READ) -----------------------------------
;//
<IF STRUCTURE_ISAM AND STRUCTURE_HAS_UNIQUE_PK AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT>
export async function get<StructureNoplural>(<PRIMARY_KEY><SEGMENT_LOOP><FieldSqlName><,></SEGMENT_LOOP></PRIMARY_KEY>) {
  try {
    let response = await fetch(`${baseUrl}(<PRIMARY_KEY><SEGMENT_LOOP><FieldSqlName>=${a<FieldSqlName>}<,></SEGMENT_LOOP></PRIMARY_KEY>)`, {
      method: "GET",
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "accept": "application/json"
      }
    });
    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}

</IF>
;//
;// GET ONE (RELATIVE FILE RECORD NUMBER READ) --------------------------------
;//
<IF STRUCTURE_RELATIVE AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT>
export async function get<StructureNoplural>(recordNumber) {
  try {
    let response = await fetch(`${baseUrl}(${recordNumber})`, {
      method: "GET",
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "accept": "application/json"
      }
    });
    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}

</IF>
;//
;// GET BY ALTERNATE KEY ------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_ALTERNATE_KEYS AND ALTERNATE_KEY_ENDPOINTS> 
  <ALTERNATE_KEY_LOOP_UNIQUE>
export async function <IF DUPLICATES>get<StructurePlural>By<KeyName><ELSE>get<StructureNoplural>By<KeyName></IF DUPLICATES>(<SEGMENT_LOOP><FieldSqlName><,></SEGMENT_LOOP>) {
  try {
    let response = await fetch(`${baseUrl}(<SEGMENT_LOOP><FieldSqlName>=${a<FieldSqlName>}<,></SEGMENT_LOOP>)`, {
      method: "GET",
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "accept": "application/json"
      }
    });
    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}

  </ALTERNATE_KEY_LOOP_UNIQUE>
</IF>
;//
;// POST ----------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_POST AND POST_ENDPOINT>
export async function create<StructureNoplural>(<structureNoplural>) {
  try {
    let response = await fetch(`${baseUrl}`, {
      method: "POST",
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "content-type": "application/json",
        "accept": "application/json"
      },
      body: JSON.stringify(<structureNoplural>),
    });

    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}

</IF>
;//
;// PUT -----------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_PUT AND PUT_ENDPOINT>
export async function upsert<StructureNoplural>(<structureNoplural>) {
  try {
    let response = await fetch(`${baseUrl}(<PRIMARY_KEY><SEGMENT_LOOP><FieldSqlName>=${<structureNoplural>.<FieldSqlName>}<,></SEGMENT_LOOP></PRIMARY_KEY>)`, {
      method: "PUT",
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "content-type": "application/json"
      },
      body: JSON.stringify(<structureNoplural>),
    });

    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}

</IF>
;//
;// PATCH ---------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_PATCH AND PATCH_ENDPOINT>
export async function patch<StructureNoplural>(patchDocument) {
  try {
    let response = await fetch(`${baseUrl}(<PRIMARY_KEY><SEGMENT_LOOP><FieldSqlName>=${<structureNoplural>.<FieldSqlName>}<,></SEGMENT_LOOP></PRIMARY_KEY>)`, {
      method: "POST",
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "content-type": "application/json"
      },
      body: JSON.stringify(patchDocument),
    });

    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}

</IF>
;//
;// DELETE --------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_DELETE AND DELETE_ENDPOINT>
export async function delete<StructureNoplural>(<PRIMARY_KEY><SEGMENT_LOOP><FieldSqlName><,></SEGMENT_LOOP></PRIMARY_KEY>) {
  try {
    let response = await fetch(`${baseUrl}(<PRIMARY_KEY><SEGMENT_LOOP><FieldSqlName>=${<FieldSqlName>}<,></SEGMENT_LOOP></PRIMARY_KEY>)`, {
      method: "DELETE",
      headers: {
  <IF DEFINED_ENABLE_AUTHENTICATION>
        authorization: `Bearer ${tokenApi.authToken}`,
  </IF DEFINED_ENABLE_AUTHENTICATION>
        "accept": "application/json"
      },
    });
    return handleResponse(response);
  } catch (error) {
    return handleError(error);
  }
}
</IF>
