<CODEGEN_FILENAME><StructurePlural>Controller.dbl</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.6.8</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>SERVICES_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>API_ENABLE_QUERY_PARAMS</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       ODataController.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Used to create OData Controllers in a Harmony Core environment
;//
;// Copyright (c) 2018, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       <StructurePlural>Controller.dbl
;;
;; Description: OData controller for the <STRUCTURE_NOALIAS> structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

<IF DEFINED_ENABLE_AUTHENTICATION>
import Microsoft.AspNetCore.Authorization
</IF DEFINED_ENABLE_AUTHENTICATION>
import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Linq
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import <MODELS_NAMESPACE>

namespace <NAMESPACE>

<IF DEFINED_ENABLE_AUTHENTICATION>
    {Authorize}
</IF DEFINED_ENABLE_AUTHENTICATION>
    {ApiVersion("<API_VERSION>")}
    {ODataRoutePrefix("<StructurePlural>")}
    ;;; <summary>
    ;;; OData controller for <StructurePlural>
    ;;; </summary>
    public partial class <StructurePlural>Controller extends ODataController

;//
;//------------------------------------------------------------------------------------------------
;// CONSTRUCTOR AND DEPENDENCY INJECTION
;//
        ;;------------------------------------------------------------------------------------------
        ;; CONSTRUCTOR AND DI

        ;;Services provided via dependency injection
        private _DbContext, @<MODELS_NAMESPACE>.<MYSQL_DBCONTEXT_CLASS>
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of <StructurePlural>Controller
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method <StructurePlural>Controller
            aDbContext, @<MODELS_NAMESPACE>.<MYSQL_DBCONTEXT_CLASS>
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

;//
;//------------------------------------------------------------------------------------------------
;// GET ALL ROWS
;//
<IF DEFINED_ENABLE_GET_ALL AND GET_ALL_ENDPOINT>
        ;;------------------------------------------------------------------------------------------
        ;; GET ALL

        {HttpGet}
        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<<StructureNoplural>>>),StatusCodes.Status200OK)}
  <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
  </IF DEFINED_ENABLE_AUTHENTICATION>
  <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        {Authorize(Roles="<ROLES_GET>")}
  </IF DEFINED_ENABLE_AUTHENTICATION_AND_USERTOKEN_ROLES_GET>
  <IF DEFINED_ENABLE_FIELD_SECURITY>
        {HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>}
  <ELSE>
        {EnableQuery<API_ENABLE_QUERY_PARAMS>}
  </IF DEFINED_ENABLE_FIELD_SECURITY>
        ;;; <summary>
        ;;; Get all <StructurePlural>
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get<StructurePlural>, @IActionResult
        proc
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
            mreturn Ok(_DbContext.<StructurePlural>.AsNoTracking().FindAlternate<<StructureNoplural>>("Companyext",companyExt))
        endmethod

</IF>
;//
;//------------------------------------------------------------------------------------------------
;// GET BY UNIQUE PRIMARY KEY
;//
;// When working with MySQL (for FCL at least) we don't have access to the actual primary key, because the corresponding
;// field is not defined in the repository. The first key defined in repository actually refers to an alternate index
;// as far as MySQL and EF are concerned. So our EdmBuilder declares the key the same way we generally declare alternate
;// keys, and that means we need to use FindAlternate instead of FindQuery that we would generally use for a primary key.
;//
<IF STRUCTURE_ISAM AND STRUCTURE_HAS_UNIQUE_PK AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT>
        ;;------------------------------------------------------------------------------------------
        ;; GET (PRIMARY KEY, UNIQUE)

        {HttpGet}
        {ODataRoute("(<PRIMARY_KEY><SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP></PRIMARY_KEY>)")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(<StructureNoplural>),StatusCodes.Status200OK)}
  <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
  </IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status404NotFound)}
  <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        {Authorize(Roles="<ROLES_GET>")}
  </IF>
  <IF DEFINED_ENABLE_FIELD_SECURITY>
        {HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>}
  <ELSE>
        {EnableQuery<API_ENABLE_QUERY_PARAMS>}
  </IF>
        ;;; <summary>
        ;;; Get a single <StructureNoplural> by primary key.
        ;;; </summary>
  <PRIMARY_KEY>
    <SEGMENT_LOOP>
      <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
      </IF>
    </SEGMENT_LOOP>
  </PRIMARY_KEY>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get<StructureNoplural>, @SingleResult<<StructureNoplural>>
  <PRIMARY_KEY>
    <SEGMENT_LOOP>
      <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
      </IF>
    </SEGMENT_LOOP>
  </PRIMARY_KEY>
        proc
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
            mreturn new SingleResult<<StructureNoplural>>(_DbContext.<StructurePlural>.AsNoTracking().FindAlternate<<StructureNoplural>>("Companyext",companyExt,<PRIMARY_KEY><SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP></PRIMARY_KEY>))
        endmethod

</IF>
;//
;//------------------------------------------------------------------------------------------------
;// GET BY NON-UNIQUE PRIMARY KEY
;//
;// When working with MySQL (for FCL at least) we don't have access to the actual primary key, because the corresponding
;// field is not defined in the repository. The first key defined in repository actually refers to an alternate index
;// as far as MySQL and EF are concerned. So our EdmBuilder declares the key the same way we generally declare alternate
;// keys, and that means we need to use FindAlternate here instead of FindQuery that we would generally use for a primary key.
;//
<IF STRUCTURE_ISAM AND NOT STRUCTURE_HAS_UNIQUE_PK AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT>
        ;;------------------------------------------------------------------------------------------
        ;; GET (PRIMARY KEY, DUPLICATES)

        {HttpGet}
        {ODataRoute("(<PRIMARY_KEY><SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP></PRIMARY_KEY>)")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<<StructureNoplural>>>),StatusCodes.Status200OK)}
  <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
  </IF DEFINED_ENABLE_AUTHENTICATION>
  <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        {Authorize(Roles="<ROLES_GET>")}
  </IF DEFINED_ENABLE_AUTHENTICATION>
  <IF DEFINED_ENABLE_FIELD_SECURITY>
        {HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>}
  <ELSE>
        {EnableQuery<API_ENABLE_QUERY_PARAMS>}
  </IF DEFINED_ENABLE_FIELD_SECURITY>
        ;;; <summary>
        ;;; Get all <StructurePlural> matching non-unique primary key.
        ;;; </summary>
  <PRIMARY_KEY>
    <SEGMENT_LOOP>
      <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
      </IF>
    </SEGMENT_LOOP>
  </PRIMARY_KEY>
        ;;; <returns>Returns a collection of any <StructurePlural> matching non-unique primary key, or an empty collection if no matching records are found.</returns>
        public method Get<StructureNoplural>, @IActionResult
  <PRIMARY_KEY>
    <SEGMENT_LOOP>
      <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
      </IF>
    </SEGMENT_LOOP>
  </PRIMARY_KEY>
        proc
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
            data result = _DbContext.<StructurePlural>.AsNoTracking().FindAlternate("Companyext",companyExt,<PRIMARY_KEY><SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP></PRIMARY_KEY>)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

</IF STRUCTURE_ISAM>
;//
;//------------------------------------------------------------------------------------------------
;// GET BY ALTERNATE KEY (NOT YET USED!!!!!)
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_ALTERNATE_KEYS AND ALTERNATE_KEY_ENDPOINTS> 
  <ALTERNATE_KEY_LOOP_UNIQUE>
    <IF DUPLICATES>
        ;;------------------------------------------------------------------------------------------
        ;; GET (<KEY_NAME>, <KEY_DESCRIPTION>, DUPLICATES)

        {HttpGet}
        {ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<<StructureNoplural>>>),StatusCodes.Status200OK)}
      <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
      </IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status404NotFound)}
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        {Authorize(Roles="<ROLES_GET>")}
      </IF DEFINED_ENABLE_AUTHENTICATION>
      <IF DEFINED_ENABLE_FIELD_SECURITY>
        {HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>}
      <ELSE>
        {EnableQuery<API_ENABLE_QUERY_PARAMS>}
      </IF DEFINED_ENABLE_FIELD_SECURITY>
        ;;; <summary>
        ;;; Get <structurePlural> by alternate key key <KeyName>.
        ;;; </summary>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get<StructurePlural>By<KeyName>, @IActionResult
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
        </IF>
      </SEGMENT_LOOP>
        proc
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
            data result = _DbContext.<StructurePlural>.AsNoTracking().FindAlternate("Companyext",companyExt,<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod
    <ELSE>
        ;;------------------------------------------------------------------------------------------
        ;; GET (ALTERNATE KEY, UNIQUE)

        {HttpGet}
        {ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(<StructureNoplural>),StatusCodes.Status200OK)}
      <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
      </IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status404NotFound)}
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        {Authorize(Roles="<ROLES_GET>")}
      </IF DEFINED_ENABLE_AUTHENTICATION>
      <IF DEFINED_ENABLE_FIELD_SECURITY>
        {HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>}
      <ELSE>
        {EnableQuery<API_ENABLE_QUERY_PARAMS>}
      </IF DEFINED_ENABLE_FIELD_SECURITY>
        ;;; <summary>
        ;;; Get <structureNoplural> by alternate key <KeyName>.
        ;;; </summary>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get<StructureNoplural>By<KeyName>, @SingleResult<<StructureNoplural>>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
        </IF>
      </SEGMENT_LOOP>
        proc
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
            mreturn new SingleResult<<StructureNoplural>>(_DbContext.<StructurePlural>.AsNoTracking().FindAlternate("Companyext",companyExt,<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>))
        endmethod
    </IF DUPLICATES>

  </ALTERNATE_KEY_LOOP_UNIQUE>
</IF STRUCTURE_ISAM>
;//
;// GET BY PARTIAL KEY --------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_PARTIAL_KEYS>
  <PARTIAL_KEY_LOOP>
    <IF (PRIMARY_KEY AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT) OR ((NOT PRIMARY_KEY) AND DEFINED_ENABLE_ALTERNATE_KEYS AND ALTERNATE_KEY_ENDPOINTS)>
        ;;------------------------------------------------------------------------------------------
        ;; PARTIAL KEY

        {HttpGet}
        {ODataRoute("(<SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL><FieldSqlName>={a<FieldSqlName>}<,></IF></SEGMENT_LOOP>)")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<<StructureNoplural>>>),StatusCodes.Status200OK)}
      <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
      </IF>
        {ProducesResponseType(StatusCodes.Status404NotFound)}
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        {Authorize(Roles="<ROLES_GET>")}
      </IF>
      <IF DEFINED_ENABLE_FIELD_SECURITY>
        {HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>}
      <ELSE>
        {EnableQuery<API_ENABLE_QUERY_PARAMS>}
      </IF>
        ;;; <summary>
        ;;; Get <structurePlural> by partial key <KeyName>.
        ;;; </summary>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get<StructurePlural>By<KeyName>, @IActionResult
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
        </IF>
      </SEGMENT_LOOP>
        proc
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
            data result = _DbContext.<StructurePlural>.AsNoTracking().FindAlternate("Companyext",companyExt,<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF><,></SEGMENT_LOOP>)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

    </IF>
  </PARTIAL_KEY_LOOP>
</IF>
;//
;//------------------------------------------------------------------------------------------------
;// POST (NOT YET USED!!!!!)
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_POST AND POST_ENDPOINT AND STRUCTURE_HAS_UNIQUE_PK>
        ;;------------------------------------------------------------------------------------------
        ;; POST

        {HttpPost}
        {ODataRoute}
  <IF DEFINED_ENABLE_AUTHENTICATION>
    <IF USERTOKEN_ROLES_POST>
        {Authorize(Roles="<ROLES_POST>")}
    </IF USERTOKEN_ROLES_POST>
  </IF DEFINED_ENABLE_AUTHENTICATION>
        {Produces("application/json")}
        {ProducesResponseType(^typeof(<StructureNoplural>),StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
  <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
  </IF DEFINED_ENABLE_AUTHENTICATION>
        ;;; <summary>
        ;;; Create a new <structureNoplural> (automatically assigned primary key).
        ;;; </summary>
        ;;; <param name="a<StructureNoplural>"><StructureNoplural> to create.</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Post<StructureNoplural>, @IActionResult
            {FromBody}
            required in a<StructureNoplural>, @<StructureNoplural>
        proc
            ;;Remove the primary key fields from ModelState
    <PRIMARY_KEY>
      <SEGMENT_LOOP>
            ModelState.Remove("<FieldSqlName>")
      </SEGMENT_LOOP>
    </PRIMARY_KEY>

    <IF NOT DEFINED_GLOBAL_MODELSTATE_FILTER>
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

    </IF>
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(a<StructureNoplural>)

            ;;Add the new <structureNoplural>
            try
            begin
                _DbContext.<StructurePlural>.Add(a<StructureNoplural>)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(a<StructureNoplural>)

        endmethod

</IF STRUCTURE_ISAM>
;//
;//------------------------------------------------------------------------------------------------
;// PUT
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_PUT AND PUT_ENDPOINT>
  <KEY_LOOP>
    <IF FIRST_UNIQUE_KEY OR (NODUPLICATES AND DEFINED_ENABLE_ALT_PUT)>
        ;;------------------------------------------------------------------------------------------
        ;; PUT

        {HttpPut}
        {ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")}
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_PUT>
        {Authorize(Roles="<ROLES_PUT>")}
      </IF DEFINED_ENABLE_AUTHENTICATION>
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
      <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
      </IF DEFINED_ENABLE_AUTHENTICATION>
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a <structureNoplural>.
        ;;; </summary>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Put<StructureNoplural><IF NOT FIRST_UNIQUE_KEY>By<KeyName></IF>, @IActionResult
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
        </IF>
      </SEGMENT_LOOP>
            {FromBody}
            required in a<StructureNoplural>, @<StructureNoplural>
        proc
      <IF NOT DEFINED_GLOBAL_MODELSTATE_FILTER>
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

      </IF>
            ;;Ensure that the key values in the URI win over any data that may be in the model object
      <SEGMENT_LOOP>
        <IF SEG_TAG_EQUAL>
            a<StructureNoplural>.<FieldSqlname> = <SEGMENT_TAG_VALUE>
        <ELSE>
            a<StructureNoplural>.<FieldSqlname> = a<FieldSqlName>
        </IF SEG_TAG_EQUAL>
      </SEGMENT_LOOP>

            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>

            try
            begin
                ;;Add and commit
                data existing<structureNoplural> = _DbContext.<StructurePlural>.FindAlternate<<StructureNoplural>>("Companyext",companyExt,<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>)
                if(existing<structureNoplural> == ^null) then
                begin
                    _DbContext.<StructurePlural>.Add(a<StructureNoplural>)
                    _DbContext.SaveChanges()
                    mreturn Created(a<StructureNoplural>)
                end
                else
                begin
                    Tools.CopyProperties<<StructureNoplural>>(a<StructureNoplural>,existing<structureNoplural>.First())
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod

    </IF FIRST_UNIQUE_KEY>
  </KEY_LOOP>
</IF STRUCTURE_ISAM>
;//
;//------------------------------------------------------------------------------------------------
;// PATCH (NOT YET USED!!!!!)
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_PATCH AND PATCH_ENDPOINT>
  <KEY_LOOP>
    <IF FIRST_UNIQUE_KEY OR (NODUPLICATES AND DEFINED_ENABLE_ALT_PATCH)>
        ;;------------------------------------------------------------------------------------------
        ;; PATCH

        {HttpPatch}
        {ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")}
    <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_PATCH>
        {Authorize(Roles="<ROLES_PATCH>")}
    </IF DEFINED_ENABLE_AUTHENTICATION>
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
      <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
      </IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch  (partial update)  <structureNoplural>.
        ;;; </summary>
        <SEGMENT_LOOP>
          <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
          </IF>
        </SEGMENT_LOOP>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Patch<StructureNoplural><IF NOT FIRST_UNIQUE_KEY>By<KeyName></IF>, @IActionResult
        <SEGMENT_LOOP>
          <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
          </IF>
        </SEGMENT_LOOP>
            {FromBody}
            required in a<StructureNoplural>, @JsonPatchDocument<<StructureNoplural>>
        proc
        <IF NOT DEFINED_GLOBAL_MODELSTATE_FILTER>
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

        </IF>
            ;;Patch the existing <structureNoplural>
            try
            begin
                ;;Get the <structureNoplural> to be updated
                data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
                data <structureNoplural>ToUpdate = _DbContext.<StructurePlural>.FindAlternate<<StructureNoplural>>("Companyext",companyExt,<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(<structureNoplural>ToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the <structureNoplural> we read
                a<StructureNoplural>.ApplyTo(<structureNoplural>ToUpdate.First(), lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.<StructurePlural>.Update(<structureNoplural>ToUpdate.First())
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod

    </IF FIRST_UNIQUE_KEY>
  </KEY_LOOP>
</IF STRUCTURE_ISAM>
;//
;//------------------------------------------------------------------------------------------------
;// DELETE (NOT YET USED!!!!!)
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_DELETE AND DELETE_ENDPOINT>
   <KEY_LOOP>
    <IF FIRST_UNIQUE_KEY OR (NODUPLICATES AND DEFINED_ENABLE_ALT_DELETE)>
        ;;------------------------------------------------------------------------------------------
        ;; DELETE

        {HttpDelete}
        {ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")}
    <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_DELETE>
        {Authorize(Roles="<ROLES_DELETE>")}
    </IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status204NoContent)}
    <IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status401Unauthorized)}
    </IF DEFINED_ENABLE_AUTHENTICATION>
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a <structureNoplural>.
        ;;; </summary>
        <SEGMENT_LOOP>
          <IF NOT SEG_TAG_EQUAL>
        ;;; <param name="a<FieldSqlName>"><FIELD_DESC></param>
          </IF>
        </SEGMENT_LOOP>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Delete<StructureNoplural><IF NOT FIRST_UNIQUE_KEY>By<KeyName></IF>, @IActionResult
        <SEGMENT_LOOP>
          <IF NOT SEG_TAG_EQUAL>
            {FromODataUri}
            required in a<FieldSqlName>, <IF CUSTOM_HARMONY_AS_STRING>string<ELSE><HARMONYCORE_SEGMENT_DATATYPE></IF>
          </IF>
        </SEGMENT_LOOP>
        proc
            ;;Get the <structureNoplural> to be deleted
            data companyExt = <IF GLOBAL_ENTITY>"GBL"<ELSE>Harmony.AspNetCore.MultiTenantProvider.TenantID</IF>
            data <structureNoplural>ToRemove = _DbContext.<StructurePlural>.FindAlternate<<StructureNoplural>>("Companyext",companyExt,<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>)

            ;;Did we find it?
            if (<structureNoplural>ToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.<StructurePlural>.Remove(<structureNoplural>ToRemove.First())
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod

    </IF FIRST_UNIQUE_KEY>
  </KEY_LOOP>
</IF STRUCTURE_ISAM>
    endclass

endnamespace