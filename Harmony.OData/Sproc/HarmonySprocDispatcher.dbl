import System.IO
import System.Reflection
import System.Collections.Concurrent
import System.Linq.Expressions
import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNetCore.OData
import Microsoft.AspNetCore.Routing
import Microsoft.AspNetCore.Mvc
import Microsoft.Extensions.DependencyInjection
import Microsoft.AspNetCore.OData.Routing.Controllers

namespace Harmony.OData

	public class HarmonySprocDispatcher<T> extends ODataController
	
        private static ExpressionLookup, @ConcurrentDictionary<string, Func<IDictionary<object, object>, string, IServiceProvider, IActionResult>> 
        private mServiceProvider, @IServiceProvider
        static method HarmonySprocDispatcher
        proc
            ExpressionLookup = new ConcurrentDictionary<string, Func<IDictionary<object, object>, string, IServiceProvider, IActionResult>>()
        endmethod

        public method HarmonySprocDispatcher
            serviceProvider, @IServiceProvider
        proc
            mServiceProvider = serviceProvider
        endmethod


        {EnableQuery}
        public method GetQueryable, @IActionResult
        proc
            mreturn Ok()
        endmethod

        {EnableQuery}
        public method PostQueryable, @IActionResult
        proc
            mreturn Ok()
        endmethod


        public method Get, @IActionResult
        proc
            mreturn Ok()
        endmethod

        public method Post, @IActionResult
        proc
            data methodName = ControllerContext.ActionDescriptor.RouteValues["methodName"]
            data callableDelegate = ExpressionLookup.GetOrAdd(methodName, GenerateCallExpression)
            disposable data requestBody = new StreamReader(HttpContext.Request.Body)
            data body = requestBody.ReadToEnd()
            mreturn callableDelegate(ControllerContext.ActionDescriptor.Properties, body, mServiceProvider)
        endmethod

        public static method WrapResponseForExceptions, @IActionResult
            callBody, @Func<IActionResult>
        proc
            ;;TODO add request/error logging here
            try
            begin
                mreturn callBody()
            end
            catch(ex, @Exception)
            begin
                mreturn new BadRequestResult()
            end
            endtry
        endmethod

        public static method CreateInstance, T
            serviceProvider, @IServiceProvider
        proc
            mreturn ActivatorUtilities.CreateInstance<T>(serviceProvider)
        endmethod


        private method GenerateCallExpression, @Func<IDictionary<object, object>, string, IServiceProvider, IActionResult>
            methodName, @string
        proc
            data targetMethodInfo = ^typeof(T).GetMethod(methodName)
            data targetParameters = targetMethodInfo.GetParameters()
            data returnType = targetMethodInfo.ReturnType
            ;;TODO: if the routine has out/ref parameters, we need to translate those into a return type 

            data uriArguments = Expression.Parameter(^typeof(IDictionary<object, object>), "uriArguments")
            data bodyString = Expression.Parameter(^typeof(String), "bodyString")
            data serviceProvider = Expression.Parameter(^typeof(IServiceProvider), "serviceProvider")
            data thisType = ^typeof(HarmonySprocDispatcher<T>)
            data parameterValues = new List<Expression>()
            data instanceValue, @Expression, ^null
            if(!targetMethodInfo.IsStatic)
            begin
                data createInstanceMethod = this.GetType().GetMethod("CreateInstance")
                instanceValue = Expression.Call(createInstanceMethod, new Expression[#] { serviceProvider })
            end

            data paramInfo, @ParameterInfo
            foreach paramInfo in targetParameters
            begin
                ;;extract parmeters from the passed in dictionary, possibly from the post body

            end

            data conversionBody = Expression.Call(instanceValue, targetMethodInfo, parameterValues)
            data okResultType = ^typeof(OkResult)
            data okObjectResultType = ^typeof(OkObjectResult)
            data resultExpression, @Expression
            if(returnType == ^typeof(Void)) then
            begin
                resultExpression = Expression.Block(new Expression[#] { conversionBody, Expression.New(okResultType) })
            end
            else
            begin
                data okObjectConstructor = okObjectResultType.GetConstructor(new Type[#] { ^typeof(Object) })
                resultExpression = Expression.New(okObjectConstructor, new Expression[#] { Expression.Convert(conversionBody, ^typeof(Object)) })
            end

            data conversionRoutine = Expression.Lambda<Func<IActionResult>>(resultExpression, new ParameterExpression[0])
            data wrapResponseMethod = ^typeof(HarmonySprocDispatcher<T>).GetMethod("WrapResponseForExceptions")
            data responseWrapper = Expression.Call(wrapResponseMethod, conversionRoutine)
            ;;todo investigate compiler bug here
            ;;data resultLambdaExpression = Expression.Lambda<Func<IDictionary<object, object>, string, IServiceProvider, IActionResult>>(responseWrapper, new ParameterExpression[#] { uriArguments, bodyString })
            data resultLambdaExpression, @Expression<Func<IDictionary<object, object>, string, IServiceProvider, IActionResult>>, Expression.Lambda<Func<IDictionary<object, object>, string, IServiceProvider, IActionResult>>(responseWrapper, new ParameterExpression[#] { uriArguments, bodyString, serviceProvider })
            mreturn resultLambdaExpression.Compile()

        endmethod
	endclass

endnamespace
