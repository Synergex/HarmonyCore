import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNet.OData.Builder
import System.Reflection
import System.Linq
import System.Threading.Tasks
import Harmony.OData.Adapter
import Microsoft.AspNetCore.Mvc
import System.Reflection.Emit

namespace Harmony.OData

    public static class ODataConventionModelBuilderExtensions
        
        private static FunctionReturnsCollectionMethod, @MethodInfo
        private static FunctionReturnsMethod, @MethodInfo
        private static FunctionReturnsFromEntitySetMethod, @MethodInfo
        private static FunctionReturnsCollectionFromEntitySetMethod, @MethodInfo
        private static FunctionParameterMethod, @MethodInfo

        private static ActionReturnsCollectionMethod, @MethodInfo
        private static ActionReturnsMethod, @MethodInfo
        private static ActionReturnsFromEntitySetMethod, @MethodInfo
        private static ActionReturnsCollectionFromEntitySetMethod, @MethodInfo
        private static ActionParameterMethod, @MethodInfo

        static method ODataConventionModelBuilderExtensions
        proc
            data functionType = ^typeof(FunctionConfiguration)
            data actionType = ^typeof(ActionConfiguration)
            FunctionReturnsCollectionMethod = functionType.GetMethod("ReturnsCollection", new Type[0])
            FunctionReturnsMethod = functionType.GetMethod("Returns", new Type[0])
            FunctionReturnsFromEntitySetMethod = functionType.GetMethod("ReturnsFromEntitySet", new Type[#] { ^typeof(String) })
            FunctionReturnsCollectionFromEntitySetMethod = functionType.GetMethod("ReturnsCollectionFromEntitySet", new Type[#] { ^typeof(String) })
            FunctionParameterMethod = functionType.GetMethod("Parameter", new Type[#] { ^typeof(String) })

            ActionReturnsCollectionMethod = actionType.GetMethod("ReturnsCollection", new Type[0])
            ActionReturnsMethod = actionType.GetMethod("Returns", new Type[0])
            ActionReturnsFromEntitySetMethod = actionType.GetMethod("ReturnsFromEntitySet", new Type[#] { ^typeof(String) })
            ActionReturnsCollectionFromEntitySetMethod = actionType.GetMethod("ReturnsCollectionFromEntitySet", new Type[#] { ^typeof(String) })
            ActionParameterMethod = actionType.GetMethod("Parameter", new Type[#] { ^typeof(String) })
        endmethod


        public class EntityTypeWrapper<T(class)>
            {System.ComponentModel.DataAnnotations.Key}
            public readwrite property ID, int, 0
        endclass

        public static extension method AddMethod<T(class), EntityType(class)>, void
            builder, @ODataModelBuilder
            methodName, @string
            namespaceName, @string
            entityConfig, @object
            entitySetLookup, @Dictionary<Type, EntitySetConfiguration>
        proc
            data targetMethod = ^typeof(T).GetMethod(methodName)
            if(targetMethod == ^null)
                throw new MissingMethodException(^typeof(T).FullName, methodName)

            AddMethod<EntityType>(builder, targetMethod, namespaceName, entityConfig, entitySetLookup)
        endmethod

        private static method CreateFunctionConfig<EntityType(class)>, @FunctionConfiguration
            typeConfig, @object
            memberName, @string
            builder, @ODataModelBuilder
        proc
            if(typeConfig .is. EntityTypeConfiguration<EntityType>) then
            begin
                data esetConfig = ((@EntityTypeConfiguration<EntityType>)typeConfig)
                mreturn esetConfig.Function(memberName)
            end
            else if(typeConfig .is. EntityCollectionConfiguration<EntityType>) then
            begin
                mreturn ((@EntityCollectionConfiguration<EntityType>)typeConfig).Function(memberName)
            end
            else if(typeConfig .is. EntityTypeConfiguration) then
            begin
                data config = builder.Function(memberName)
                config.SetBindingParameter("binding", (@IEdmTypeConfiguration)typeConfig)
                mreturn config
            end
            else
                throw new InvalidOperationException("Type config needs to be an EntityTypeConfiguration<EntityType> or EntityCollectionConfiguration<EntityType>")
            
        endmethod

        private static method CreateActionConfig<EntityType(class)>, @ActionConfiguration
            typeConfig, @object
            memberName, @string
            builder, @ODataModelBuilder
        proc
            if(typeConfig .is. EntityTypeConfiguration<EntityType>) then
            begin
                mreturn ((@EntityTypeConfiguration<EntityType>)typeConfig).Action(memberName)
            end
            else if(typeConfig .is. EntityCollectionConfiguration<EntityType>) then
            begin
                mreturn ((@EntityCollectionConfiguration<EntityType>)typeConfig).Action(memberName)
            end
            else if(typeConfig .is. EntityTypeConfiguration) then
            begin
                data config = builder.Action(memberName)
                config.SetBindingParameter("binding", (@IEdmTypeConfiguration)typeConfig)
                mreturn config
            end
            else
                throw new InvalidOperationException("Type config needs to be an EntitySetConfiguration<EntityType> or EntityCollectionConfiguration<EntityType>")
            
        endmethod


        public static extension method AddMethod<EntityType(class)>, void
            builder, @ODataModelBuilder
            targetMethod, @MethodInfo
            namespaceName, @string
            typeConfig, @object
            entitySetLookup, @Dictionary<Type, EntitySetConfiguration>
        proc
            data callableMethodConfig, @CallableMethodConfigurationAttribute
            callableMethodConfig = targetMethod.GetCustomAttribute<CallableMethodConfigurationAttribute>(false)
            if(callableMethodConfig == ^null)
            begin
                callableMethodConfig = new CallableMethodConfigurationAttribute()
				if(entitySetLookup.ContainsKey(targetMethod.ReturnType))
				begin
					callableMethodConfig.ReturnsFromEntitySet = true
				end

			end
			data returnIsCollection, boolean
			data returnType = CleanReturnType(targetMethod, returnIsCollection)
			data eSet, @EntitySetConfiguration
			if(entitySetLookup.TryGetValue(returnType, eSet) && eSet == ^null) ;;bad input from old versions
			begin
				foreach eSet in builder.EntitySets
				begin
					if(!entitySetLookup.ContainsKey(eSet.ClrType)) then
						entitySetLookup.Add(eSet.ClrType, eSet)
					else
						entitySetLookup[eSet.ClrType] = eSet
				end
			end

            data paramFunction, @MethodInfo
            data resultObject, @Object
            ;;need to also check for TransformRefOutParametersAttribute to determine the real return type of the routine
            if(callableMethodConfig.IsFunction) then
            begin
                data addedFunction, @FunctionConfiguration
                if(typeConfig != ^null) then
                begin
                    ;;TODO isolate compiler bug here
                    ;addedFunction = singletonConfig.EntityType.Function(targetMethod.Name)
                    addedFunction = CreateFunctionConfig<EntityType>(typeConfig, targetMethod.Name, builder)
                end
                else
					addedFunction = builder.Function(targetMethod.Name)

                MakeReturnType(targetMethod, callableMethodConfig, addedFunction, entitySetLookup)
                resultObject = addedFunction
                paramFunction = FunctionParameterMethod
            end
            else
            begin
                data addedAction, @ActionConfiguration
                if(typeConfig != ^null) then
                    addedAction = CreateActionConfig<EntityType>(typeConfig, targetMethod.Name, builder)
                else
                    addedAction = builder.Action(targetMethod.Name)

                MakeReturnType(targetMethod, callableMethodConfig, addedAction, entitySetLookup)
                resultObject = addedAction
                paramFunction = ActionParameterMethod
            end

			data paramInfo, @ParameterInfo
			data allParametersAreOptional = true
			data hasParameters = false
            foreach paramInfo in targetMethod.GetParameters()
            begin
                data adapterAttribute = paramInfo.GetCustomAttribute<AdapterParameterAttribute>(false)
                if(adapterAttribute != ^null) then
                begin
                    ;;if its an adapter parameter we need to translate any fields/properties marked as parameters into the appropriate edm info
                    data prop, @PropertyInfo
                    foreach prop in paramInfo.ParameterType.GetProperties()
                    begin
                        data getter = prop.GetMethod
                        if(getter != ^null && getter.IsPublic && !getter.IsStatic)
                        begin
                            data paramAttr = prop.GetCustomAttribute<ParameterFieldAdapterAttribute>(false)
                            if(paramAttr != ^null)
							begin
								hasParameters = true
                                data paramConfig = ^as(paramFunction.MakeGenericMethod(new Type[#] { prop.PropertyType }).Invoke(resultObject, new Object[#] { paramAttr.EdmName }), @ParameterConfiguration)
                                if(paramAttr.IsOptional) then
									paramConfig.Optional()
								else
									allParametersAreOptional = false
                            end
                        end
                    end
                end
				else
				begin
					hasParameters = true
					allParametersAreOptional = false
					paramFunction.MakeGenericMethod(new Type[#] { paramInfo.ParameterType }).Invoke(resultObject, new Object[#] { paramInfo.Name })
				end

            end

			if(hasParameters && allParametersAreOptional)
			begin
				if(callableMethodConfig.IsFunction) then
				begin
					MakeReturnType(targetMethod, callableMethodConfig, typeConfig != ^null ? CreateFunctionConfig<EntityType>(typeConfig, targetMethod.Name, builder) : builder.Function(targetMethod.Name), entitySetLookup)
				end
				else
				begin
					MakeReturnType(targetMethod, callableMethodConfig, typeConfig != ^null ? CreateActionConfig<EntityType>(typeConfig, targetMethod.Name, builder) : builder.Action(targetMethod.Name), entitySetLookup)
				end
			end

            ;builder.AddOperation((OperationConfiguration)resultObject)

        endmethod


        private static method MakeEntityTypeWrapper<T(class)>, @Type
        proc
            data dynamicAssemblyName = "dynamic_" + ^typeof(EntityTypeWrapper<T>).Name
            data ab, @AssemblyBuilder, AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(dynamicAssemblyName), AssemblyBuilderAccess.RunAndCollect)
            data mb, @ModuleBuilder, ab.DefineDynamicModule(dynamicAssemblyName)
            data tb, @TypeBuilder, mb.DefineType("Harmony.OData.EntityTypeWrapperOf" + ^typeof(T).Name, TypeAttributes.Public, ^typeof(T))
            data constructor = ^typeof(T).GetConstructors().FirstOrDefault()
            data ctorBuilder, @ConstructorBuilder, tb.DefineConstructor(constructor.Attributes, constructor.CallingConvention, constructor.GetParameters().Select(lambda(parm) { parm.ParameterType }).ToArray())
            data emitter = ctorBuilder.GetILGenerator()
            emitter.Emit(System.Reflection.Emit.OpCodes.Nop)

            ;;Load 'this' and call base constructor with arguments
            emitter.Emit(System.Reflection.Emit.OpCodes.Ldarg_0)
            data i = 0
            for i from 1 thru constructor.GetParameters().Length by 1
            begin
                emitter.Emit(System.Reflection.Emit.OpCodes.Ldarg, i)
            end 

            emitter.Emit(System.Reflection.Emit.OpCodes.Call, constructor)

            emitter.Emit(System.Reflection.Emit.OpCodes.Ret)
            data madeType, @Type, tb.CreateTypeInfo().AsType()
            mreturn madeType
        endmethod



        ;;Use reflection on the provided generic type, find all of the public methods
        ;;make functions/actions depending on the return type and the presance of Harmony.OData.PureFunctionAttribute
        public static extension method AddMethods<T(class)>, void
            builder, @ODataModelBuilder
            namespaceName, @string
        proc
            data madeType = ^typeof(EntityTypeWrapper<T>)
            data entityConfig = builder.AddEntityType(madeType)
            
            data singletonConfig, @NavigationSourceConfiguration, String.IsNullOrWhiteSpace(namespaceName) ? ^null : builder.AddSingleton(namespaceName, entityConfig)
            data targetMethod, @MethodInfo
            HarmonySprocRoutingConvention.AddSprocDispatcher<T>(namespaceName)
            data entitySetLookup = new Dictionary<Type, EntitySetConfiguration>()
            data eSet, @EntitySetConfiguration
            foreach eSet in builder.EntitySets
            begin
                if(!entitySetLookup.ContainsKey(eSet.ClrType))
                    entitySetLookup.Add(eSet.ClrType, eSet)
            end

            data targetType = ^typeof(T)
            data methods = ^typeof(T).GetMethods()
            foreach targetMethod in methods
            begin
                if(targetMethod.DeclaringType != ^typeof(T) || targetMethod.IsSpecialName || targetMethod.Name.Contains("$"))
                    nextloop

                data securityAttribute = targetMethod.GetCustomAttribute<MethodSecurityAttribute>(false)
                if(securityAttribute != ^null && !((@MethodSecurityAttribute)securityAttribute).AllowAccess)
                begin
                    nextloop
                end

                AddMethod<EntityTypeWrapper<T>>(builder, targetMethod, "Default", entityConfig, entitySetLookup)

            end

            builder.Namespace = String.Empty
        endmethod

        private static method GetSequenceType, @Type
            type, @Type
		proc
			if(type == ^typeof(String))
				mreturn ^null

            if(type.IsGenericType && type.GetGenericTypeDefinition() == ^typeof(IEnumerable<>))
                mreturn type.GenericTypeArguments.First()


            data implementsIEnumerable = type.GetInterfaces().FirstOrDefault(lambda(inter) { inter.IsGenericType && inter.GetGenericTypeDefinition() == ^typeof(IEnumerable<>) } )
            if (implementsIEnumerable != ^null) then
                mreturn implementsIEnumerable.GenericTypeArguments.First()
            else
                mreturn ^null
        endmethod

		private static method CleanReturnType, @Type
			methInfo, @MethodInfo
			out isCollectionType, boolean
		proc
			data sequenceType, @Type
			data returnType, @Type
			data taskClean = methInfo.ReturnType
			if(taskClean.IsGenericType && taskClean.GetGenericTypeDefinition() == ^typeof(Task<>))
			begin
				taskClean = taskClean.GetGenericArguments()[1]
			end

			if(taskClean.IsGenericType && taskClean.GetGenericTypeDefinition() == ^typeof(ActionResult<>))
			begin
				taskClean = taskClean.GetGenericArguments()[1]
			end

			sequenceType = GetSequenceType(taskClean)
			if(sequenceType != ^null) then
			begin
				isCollectionType = true
				returnType = sequenceType
			end
			else
			begin
				isCollectionType = false
				returnType = taskClean
			end
		
			mreturn returnType
		endmethod


        private static method MakeReturnType, void
            methInfo, @MethodInfo
            callableConfig, @CallableMethodConfigurationAttribute
			funcConfig, @FunctionConfiguration
			entitySetLookup, @Dictionary<Type, EntitySetConfiguration>
		proc
			data returnTypeIsCollection, boolean, false
			data returnTypeIsFromEntitySet, boolean, false
			data returnTypeIsCollectionFromEntitySet, boolean, false
			data returnType = CleanReturnType(methInfo, returnTypeIsCollection)
			
            if(callableConfig.ReturnsFromEntitySet)
            begin
                if(returnTypeIsCollection) then
                    returnTypeIsCollectionFromEntitySet = true
                else
                    returnTypeIsFromEntitySet = true
            end


            if(returnTypeIsFromEntitySet) then
            begin
                FunctionReturnsFromEntitySetMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(funcConfig, new Object[#] { GetEntitySetName(returnType, entitySetLookup)}) 
            end
            else if(returnTypeIsCollectionFromEntitySet) then
            begin
                FunctionReturnsCollectionFromEntitySetMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(funcConfig, new Object[#] { GetEntitySetName(returnType, entitySetLookup) })
            end
            else if(returnTypeIsCollection) then
            begin
                FunctionReturnsCollectionMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(funcConfig, new Object[0])
            end
            else
            begin
                FunctionReturnsMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(funcConfig, new Object[0])
            end
            
        endmethod

		private static method GetEntitySetName, @string
			targetType, @Type
			entitySetLookup, @Dictionary<Type, EntitySetConfiguration>
		proc
			data resultConfig, @EntitySetConfiguration
			if(entitySetLookup.TryGetValue(targetType, resultConfig)) then
				mreturn resultConfig.Name
			else
				mreturn targetType.Name
		endmethod


        private static method MakeReturnType, void
            methInfo, @MethodInfo
            callableConfig, @CallableMethodConfigurationAttribute
			actionConfig, @ActionConfiguration
			entitySetLookup, @Dictionary<Type, EntitySetConfiguration>
        proc
            data returnTypeIsCollection, boolean, false
			data returnTypeIsFromEntitySet, boolean, false
			data returnTypeIsCollectionFromEntitySet, boolean, false
			data returnType = CleanReturnType(methInfo, returnTypeIsCollection)

            if(returnType == ^typeof(void))
                mreturn

            if(callableConfig.ReturnsFromEntitySet)
            begin
                if(returnTypeIsCollection) then
                    returnTypeIsCollectionFromEntitySet = true
                else
                    returnTypeIsFromEntitySet = true
            end


            if(returnTypeIsFromEntitySet) then
            begin
                ActionReturnsFromEntitySetMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(actionConfig, new Object[#] { GetEntitySetName(returnType, entitySetLookup) }) 
            end
            else if(returnTypeIsCollectionFromEntitySet) then
            begin
                ActionReturnsCollectionFromEntitySetMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(actionConfig, new Object[#] { GetEntitySetName(returnType, entitySetLookup) })
            end
            else if(returnTypeIsCollection) then
            begin
                ActionReturnsCollectionMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(actionConfig, new Object[0])
            end
            else
            begin
                ActionReturnsMethod.MakeGenericMethod(new Type[#] { returnType }).Invoke(actionConfig, new Object[0])
            end
            
        endmethod
    endclass

endnamespace
