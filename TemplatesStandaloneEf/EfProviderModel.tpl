<CODEGEN_FILENAME><StructureNoplural>.dbl</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.5.3</REQUIRES_CODEGEN_VERSION>
;//****************************************************************************
;//
;// Title:       EfProviderModel.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to define structure based Data Object with CLR types
;//
;// Copyright (c) 2020, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       <StructureNoplural>.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure <STRUCTURE_NOALIAS><IF STRUCTURE_FILES> and from the data file <FILE_NAME></IF STRUCTURE_FILES>.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace <NAMESPACE>

    public partial class <StructureNoplural> extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, str<StructureNoplural>
        private mOriginalSynergyData, str<StructureNoplural>

        private static sMetadata, @<StructureNoplural>Metadata

.region "Constructors"

        static method <StructureNoplural>
        proc
            sMetadata = new <StructureNoplural>Metadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(<StructureNoplural>), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method <StructureNoplural>
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method <StructureNoplural>
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

<IF STRUCTURE_RELATIVE>
        ;;; <summary>
        ;;; Record number
        ;;; </summary>
        public readwrite property RecordNumber, int

</IF STRUCTURE_RELATIVE>
<COUNTER_1_RESET>
<FIELD_LOOP>
  <IF USER>
  <ELSE>
    <IF CUSTOM_NOT_HARMONY_EXCLUDE>
        ;;; <summary>
        ;;; <FIELD_DESC>
        ;;; </summary>
;//
;// Field property attributes
;//
      <IF ONLY_PKSEGMENT>
        {Key}
      </IF ONLY_PKSEGMENT>
      <IF REQUIRED>
        {Required(ErrorMessage="<FIELD_DESC> is required. ")}
      </IF REQUIRED>
      <IF HARMONYCORE_CUSTOM_FIELD_DATATYPE>
;//We can't add validation attributes for fields with custom data types!!!
      <ELSE>
        <IF ALPHA>
        {StringLength(<FIELD_SIZE>, ErrorMessage="<FIELD_DESC> cannot exceed <FIELD_SIZE> characters. ")}
        </IF ALPHA>
        <IF DECIMAL>
          <IF CUSTOM_NOT_HARMONY_AS_STRING>
        {Range(<FIELD_MINVALUE>,<FIELD_MAXVALUE>, ErrorMessage="<FIELD_DESC> must be between <FIELD_MINVALUE> and <FIELD_MAXVALUE>. ")}
          </IF CUSTOM_NOT_HARMONY_AS_STRING>
        </IF DECIMAL>
        <IF INTEGER>
        {Range(<FIELD_MINVALUE>,<FIELD_MAXVALUE>, ErrorMessage="<FIELD_DESC> must be between <FIELD_MINVALUE> and <FIELD_MAXVALUE>. ")}
        </IF INTEGER>
      </IF HARMONYCORE_CUSTOM_FIELD_DATATYPE>
;//
;// Field property
;//
      <COUNTER_1_INCREMENT>
      <IF CUSTOM_HARMONY_AS_STRING>
        public property <FieldSqlname>, String
      <ELSE>
        public property <FieldSqlname>, <HARMONYCORE_FIELD_DATATYPE>
      </IF CUSTOM_HARMONY_AS_STRING>
;//
;// Field property get method
;//
            method get
            proc
      <IF HARMONYCORE_CUSTOM_FIELD>
                mreturn <HARMONYCORE_CUSTOM_FIELD_TYPE>Converter.Convert(mSynergyData.<field_original_name_modified>)
      <ELSE>
        <IF ALPHA>
                mreturn (<FIELD_SNTYPE>)SynergyAlphaConverter.Convert(mSynergyData.<field_original_name_modified>, ^null, ^null, ^null)
        </IF ALPHA>
        <IF DATE>
          <IF CUSTOM_HARMONY_AS_STRING>
                mreturn %string(mSynergyData.<field_original_name_modified>,"XXXX-XX-XX")
          <ELSE>
                data formatString = "YYYYMMDD"
            <IF DATE_YYMMDD>
                formatString = "YYMMDD"
            </IF DATE_YYMMDD>
            <IF DATE_YYYYJJJ>
                formatString = "YYYYJJJ"
            </IF DATE_YYYYJJJ>
                mreturn (<FIELD_SNTYPE>)SynergyDecimalDateConverter.Convert(mSynergyData.<field_original_name_modified>, ^null, formatString, ^null)
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF DATE>
        <IF TIME_HHMM>
          <IF CUSTOM_HARMONY_AS_STRING>
                mreturn %string(mSynergyData.<field_original_name_modified>,"XX:XX")
          <ELSE>
                mreturn Convert.ToDateTime(%string(mSynergyData.<field_original_name_modified>,"XX:XX"))
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF TIME_HHMM>
        <IF TIME_HHMMSS>
          <IF CUSTOM_HARMONY_AS_STRING>
                mreturn %string(mSynergyData.<field_original_name_modified>,"XX:XX:XX")
          <ELSE>
                mreturn Convert.ToDateTime(%string(mSynergyData.<field_original_name_modified>,"XX:XX:XX"))
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF TIME_HHMMSS>
        <IF DECIMAL>
          <IF CUSTOM_HARMONY_AS_STRING>
            <IF PRECISION>
                mreturn %string(SynergyImpliedDecimalConverter.Convert(mSynergyData.<field_original_name_modified>, ^null, "DECIMALPLACES#<FIELD_PRECISION>", ^null),"<FIELD_FORMATSTRING>")
            <ELSE>
                mreturn %string(mSynergyData.<field_original_name_modified>,"<FIELD_FORMATSTRING>")
            </IF PRECISION>
          <ELSE>
            <IF PRECISION>
                mreturn (<FIELD_SNTYPE>)SynergyImpliedDecimalConverter.Convert(mSynergyData.<field_original_name_modified>, ^null, "DECIMALPLACES#<FIELD_PRECISION>", ^null)
            <ELSE>
                mreturn (<FIELD_SNTYPE>)mSynergyData.<field_original_name_modified>
            </IF PRECISION>
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF DECIMAL>
        <IF INTEGER>
                mreturn (<FIELD_SNTYPE>)mSynergyData.<field_original_name_modified>
        </IF INTEGER>
        <IF BOOLEAN>
                mreturn (<FIELD_SNTYPE>)mSynergyData.<field_original_name_modified>
        </IF BOOLEAN>
        <IF AUTO_SEQUENCE>
                mreturn (<FIELD_SNTYPE>)mSynergyData.<field_original_name_modified>
        </IF AUTO_SEQUENCE>
        <IF AUTO_TIMESTAMP>
                mreturn (<FIELD_SNTYPE>)mSynergyData.<field_original_name_modified>
        </IF AUTO_TIMESTAMP>
      </IF HARMONYCORE_CUSTOM_FIELD>
            endmethod
;//
;// Field property set method
;//
            method set
            proc
      <IF DEFINED_ENABLE_READ_ONLY_PROPERTIES>
        <IF READONLY>
                throw new ApplicationException("Property <FieldSqlname> is read only!")
        </IF READONLY>
      </IF DEFINED_ENABLE_READ_ONLY_PROPERTIES>
      <IF HARMONYCORE_CUSTOM_FIELD>
                mSynergyData.<field_original_name_modified> = <HARMONYCORE_CUSTOM_FIELD_TYPE>Converter.ConvertBack(value)
      <ELSE>
        <IF ALPHA>
                mSynergyData.<field_original_name_modified> = (<FIELD_TYPE>)SynergyAlphaConverter.ConvertBack(value<IF UPPERCASE>.ToUpper()</IF UPPERCASE>, ^null, ^null, ^null)
        </IF ALPHA>
        <IF DATE>
          <IF CUSTOM_HARMONY_AS_STRING>
                mSynergyData.<field_original_name_modified> = SynergyDecimalConverter.ConvertBack(value,"XXXX-XX-XX")
          <ELSE>
                data formatString = "YYYYMMDD"
            <IF DATE_YYMMDD>
                formatString = "YYMMDD"
            </IF DATE_YYMMDD>
            <IF DATE_YYYYJJJ>
                formatString = "YYYYJJJ"
            </IF DATE_YYYYJJJ>
                mSynergyData.<field_original_name_modified> = (<FIELD_TYPE>)SynergyDecimalDateConverter.ConvertBack(value, ^null, formatString, ^null)
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF DATE>
        <IF TIME_HHMM>
          <IF CUSTOM_HARMONY_AS_STRING>
                mSynergyData.<field_original_name_modified> = SynergyDecimalConverter.ConvertBack(value,"XX:XX")
          <ELSE>
                mSynergyData.<field_original_name_modified> = (value.Hour * 100) + value.Minute
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF TIME_HHMM>
        <IF TIME_HHMMSS>
          <IF CUSTOM_HARMONY_AS_STRING>
                mSynergyData.<field_original_name_modified> = SynergyDecimalConverter.ConvertBack(value,"XX:XX:XX")
          <ELSE>
                mSynergyData.<field_original_name_modified> = (value.Hour * 10000) + (value.Minute * 100) + value.Second
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF TIME_HHMMSS>
        <IF DECIMAL>
          <IF CUSTOM_HARMONY_AS_STRING>
            <IF PRECISION>
                mSynergyData.<field_original_name_modified> = SynergyImpliedDecimalConverter.ConvertBack(value,"<FIELD_FORMATSTRING>")
            <ELSE>
                mSynergyData.<field_original_name_modified> = SynergyDecimalConverter.ConvertBack(value,"<FIELD_FORMATSTRING>")
            </IF PRECISION>
          <ELSE>
                mSynergyData.<field_original_name_modified> = value
          </IF CUSTOM_HARMONY_AS_STRING>
        </IF DECIMAL>
        <IF INTEGER>
                mSynergyData.<field_original_name_modified> = value
        </IF INTEGER>
        <IF BOOLEAN>
                mSynergyData.<field_original_name_modified> = value
        </IF BOOLEAN>
        <IF AUTO_SEQUENCE>
                mSynergyData.<field_original_name_modified> = value
        </IF AUTO_SEQUENCE>
        <IF AUTO_TIMESTAMP>
                mSynergyData.<field_original_name_modified> = value
        </IF AUTO_TIMESTAMP>
      </IF HARMONYCORE_CUSTOM_FIELD>
            endmethod
;//
;// End of field property
;//
        endproperty

    </IF CUSTOM_NOT_HARMONY_EXCLUDE>
  </IF USER>
</FIELD_LOOP>
.endregion
;//
;//
;//

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[<COUNTER_1_VALUE>]
        endmethod

;//
;// ==========================================================================================
;// RUNTIME VALIDATION FOR RELATIONS
;//
<IF DEFINED_ENABLE_RELATIONS>
  <IF STRUCTURE_RELATIONS>
;//
        ;;; <summary>
        ;;; Validate data for one-to-one relations
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
    <RELATION_LOOP_RESTRICTED>

            ;;From key for <HARMONYCORE_RELATION_NAME>
            record rel<RELATION_NUMBER>FromKey
      <COUNTER_1_RESET>
      <FROM_KEY_SEGMENT_LOOP>
        <IF SEG_TYPE_FIELD>
              <segment_name>, <segment_spec>
        </IF SEG_TYPE_FIELD>
        <IF SEG_TYPE_LITERAL>
          <COUNTER_1_INCREMENT>
              litseg<COUNTER_1_VALUE>, a*, "<SEGMENT_LITVAL>"
        </IF SEG_TYPE_LITERAL>
      </FROM_KEY_SEGMENT_LOOP>
            endrecord
    </RELATION_LOOP_RESTRICTED>
        proc
            ;;No relation validation if the record is being deleted
            if (vType == ValidationType.Delete)
                mreturn

            ;;Get an instance of IDataObjectProvider
            data doProvider, @IDataObjectProvider, sp.GetService<IDataObjectProvider>()

    <RELATION_LOOP_RESTRICTED>
            ;;--------------------------------------------------------------------------------
            ;;Validate data for relation <RELATION_NUMBER> (<HARMONYCORE_RELATION_NAME>)

      <COUNTER_1_RESET>
        <FROM_KEY_SEGMENT_LOOP>
          <IF SEG_TYPE_FIELD>
            rel<RELATION_NUMBER>FromKey.<segment_name> = mSynergyData.<segment_name>
          <ELSE>
            <IF SEG_TYPE_LITERAL>
            <COUNTER_1_INCREMENT>
            rel<RELATION_NUMBER>FromKey.litseg<COUNTER_1_VALUE> = "<SEGMENT_LITVAL>"
            </IF SEG_TYPE_LITERAL>
          </IF SEG_TYPE_FIELD>
        </FROM_KEY_SEGMENT_LOOP>
      <IF NOT REQUIRES_MATCH>
            ;;This key does not REQUIRE a match, so only attempt to validate if we have a "from key" value
            data rel<RELATION_NUMBER>FromKeyValue, string, rel<RELATION_NUMBER>FromKey
            if (!String.IsNullOrWhiteSpace(rel<RELATION_NUMBER>FromKeyValue.Replace("0"," ")))
      </IF REQUIRES_MATCH>
            begin
            disposable data rel<RELATION_NUMBER>FileIO = doProvider.GetFileIO<<RelationTostructureNoplural>>()
            if (rel<RELATION_NUMBER>FileIO.FindRecord(<TO_KEY_NUMBER>,rel<RELATION_NUMBER>FromKey) != FileAccessResults.Success)
                begin
                throw new ValidationException("Invalid data for relation <HARMONYCORE_RELATION_NAME>")
                end
            end

    </RELATION_LOOP_RESTRICTED>
            ;;--------------------------------------------------------------------------------
            ;;If we have a ValidateCustom method, call it

            ValidateCustom(vType,sp)

        endmethod

  <ELSE>
        ;;; <summary>
        ;;; Validate data
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;If we have a ValidateCustom method, call it
            ValidateCustom(vType,sp)
        endmethod

  </IF STRUCTURE_RELATIONS>
</IF DEFINED_ENABLE_RELATIONS>

        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

;// ==========================================================================================
.endregion
;//
;// Relations
;//
<IF DEFINED_ENABLE_RELATIONS>
  <IF STRUCTURE_RELATIONS>

.region "Relationships to other entities"

    <RELATION_LOOP_RESTRICTED>
      <COUNTER_1_INCREMENT>
;//
;//
;//
      <IF MANY_TO_ONE_TO_MANY>
        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; <STRUCTURE_NOPLURAL>.<RELATION_FROMKEY> (one) --> (one) --> (many) <RELATION_TOSTRUCTURE_NOPLURAL>.<RELATION_TOKEY>
        ;;; </summary>
        public readwrite property <HARMONYCORE_RELATION_NAME>, @<RelationTostructureNoplural>
      </IF MANY_TO_ONE_TO_MANY>
;//
;//
;//
      <IF ONE_TO_ONE_TO_ONE>
        ;;; <summary>
        ;;; Relationship (Type B)
        ;;; <STRUCTURE_NOPLURAL>.<RELATION_FROMKEY> (one) --> (one) --> (one) <RELATION_TOSTRUCTURE_NOPLURAL>.<RELATION_TOKEY>
        ;;; </summary>
        public readwrite property <HARMONYCORE_RELATION_NAME>, @<RelationTostructureNoplural>
      </IF ONE_TO_ONE_TO_ONE>
;//
;//
;//
      <IF ONE_TO_ONE>
        ;;; <summary>
        ;;; Relationship (Type C)
        ;;; <STRUCTURE_NOPLURAL>.<RELATION_FROMKEY> (one) --> (one) <RELATION_TOSTRUCTURE_NOPLURAL>.<RELATION_TOKEY>
        ;;; </summary>
        public readwrite property <HARMONYCORE_RELATION_NAME>, @<RelationTostructureNoplural>
      </IF ONE_TO_ONE>
;//
;//
;//
      <IF ONE_TO_MANY_TO_ONE>
        ;;; <summary>
        ;;; Relationship (Type D)
        ;;; <STRUCTURE_NOPLURAL>.<RELATION_FROMKEY> (one) <-> (many) <RELATION_TOSTRUCTURE_NOPLURAL>.<RELATION_TOKEY>
        ;;; </summary>
        public readwrite property <HARMONYCORE_RELATION_NAME>, @ICollection<<RelationTostructureNoplural>>
      </IF ONE_TO_MANY_TO_ONE>
;//
;//
;//
      <IF ONE_TO_MANY>
        ;;; <summary>
        ;;; Relationship (Type E)
        ;;; <STRUCTURE_NOPLURAL>.<RELATION_FROMKEY> (one) --> (many) <RELATION_TOSTRUCTURE_NOPLURAL>.<RELATION_TOKEY>
        ;;; </summary>
        public readwrite property <HARMONYCORE_RELATION_NAME>, @ICollection<<RelationTostructureNoplural>>
      </IF ONE_TO_MANY>

    </RELATION_LOOP_RESTRICTED>
.endregion
;//
;//
;//
    <COUNTER_2_RESET>
    <RELATION_LOOP_RESTRICTED>
      <COUNTER_1_RESET>
      <FROM_KEY_SEGMENT_LOOP>
        <IF SEG_TYPE_LITERAL>
          <COUNTER_2_INCREMENT>
            <IF COUNTER_2_EQ_1>

.region "Properties to represent literal key segments"

            </IF COUNTER_2_EQ_1>
        ;;; <summary>
        ;;;
        ;;; </summary>
        public readonly property <RelationFromkey>Literal<COUNTER_1_INCREMENT><COUNTER_1_VALUE>, <LITERAL_SEGMENT_SNTYPE>, <LITERAL_SEGMENT_VALUE>
        private _<RelationFromkey>Literal<COUNTER_1_VALUE>, <LITERAL_SEGMENT_SNTYPE>, <LITERAL_SEGMENT_VALUE>
        </IF SEG_TYPE_LITERAL>
      </FROM_KEY_SEGMENT_LOOP>
    </RELATION_LOOP_RESTRICTED>
    <IF COUNTER_2_GT_0>

.endregion

    </IF COUNTER_2_GT_0>
  </IF STRUCTURE_RELATIONS>
</IF DEFINED_ENABLE_RELATIONS>

<IF STRUCTURE_FILES>
.region "Properties to represent keys"
<IF STRUCTURE_ISAM>
        ;;Access keys

  <KEY_LOOP_UNIQUE>
        private _KEY_<KEY_NAME>, string, ""
        public readonly property KEY_<KEY_NAME>, string, ""

  </KEY_LOOP_UNIQUE>
  <FOREIGN_KEY_LOOP>
    <IF FIRST>
        ;;Foreign keys

    </IF FIRST>
        private _KEY_<KEY_NAME>, string, ""
        public readonly property KEY_<KEY_NAME>, string, ""

  </FOREIGN_KEY_LOOP>

</IF STRUCTURE_ISAM>
.endregion

</IF STRUCTURE_FILES>
endclass

endnamespace
