<CODEGEN_FILENAME>EfProviderConfig.dbl</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.4.6</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       EfProviderConfig.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Used to create a Synergy EF Provider configuration class
;//
;// Copyright (c) 2020, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       EfProviderConfig.dbl
;;
;; Description: EF Provider configuration code
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.Interface
import Harmony.Core.Utility
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.DependencyInjection.Extensions
import Microsoft.Extensions.Logging
import Microsoft.Extensions.Options
import Microsoft.Extensions.Primitives
import System.Collections.Generic
import System.IO
import System.Linq
import System.Text
import System.Threading.Tasks
import <MODELS_NAMESPACE>

namespace <NAMESPACE>

    public partial static class EfProviderConfig

        public static method ConfigureProvider, void
            services, @IServiceCollection 
        proc

            ;;------------------------------------------------------------------------------------------
            ;;Configure FileChannelManager

            services.AddSingleton<IFileChannelManager, FileChannelManager>()

            ;;------------------------------------------------------------------------------------------
            ;;Configure DataObjectProvider

            lambda AddDataObjectMappings(serviceProvider)
            begin
                data objectProvider = new DataObjectProvider(serviceProvider.GetService<IFileChannelManager>())
<STRUCTURE_LOOP>
                objectProvider.AddDataObjectMapping<<StructureNoplural>>("<FILE_NAME>", FileOpenMode.UpdateIndexed)
</STRUCTURE_LOOP>
                mreturn objectProvider
            end

            services.AddSingleton<IDataObjectProvider>(AddDataObjectMappings)

            ;;------------------------------------------------------------------------------------------
            ;;Configure DBContext

            lambda ConfigureDBContext(sp,opts)
            begin
                HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, sp.GetService<IDataObjectProvider>())
            end

            services.AddDbContextPool<<NAMESPACE>.DBContext>(ConfigureDBContext)

            ;;------------------------------------------------------------------------------------------
            ;;If there is a ConfigureProviderCustom method, call it

            ConfigureCustom(services)


        endmethod

.region "Partial method extensibility points"

        ;;; <summary>
        ;;; Declare the ConfigueCustom partial method.
        ;;; Developers can implement this method in a partial class to provide custom services.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial static method ConfigureCustom, void
            services, @IServiceCollection
        endmethod

.endregion

    endclass

endnamespace
